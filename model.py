# generated by datamodel-codegen:
#   filename:  netbox-openapi.json
#   timestamp: 2022-02-13T18:34:29+00:00

from __future__ import annotations

from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import AnyUrl, BaseModel, EmailStr, Field, condecimal, conint, constr


class Model(BaseModel):
    __root__: Any


class NestedCircuit(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    cid: constr(min_length=1, max_length=100) = Field(..., title='Circuit ID')


class NestedSite(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )


class NestedProviderNetwork(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')


class NestedCable(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    label: Optional[constr(max_length=100)] = Field(None, title='Label')


class TermSide(Enum):
    A = 'A'
    Z = 'Z'


class CircuitTermination(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    circuit: NestedCircuit
    term_side: TermSide = Field(..., title='Termination')
    site: Optional[NestedSite] = None
    provider_network: Optional[NestedProviderNetwork] = None
    port_speed: Optional[conint(ge=0, le=2147483647)] = Field(
        None, title='Port speed (Kbps)'
    )
    upstream_speed: Optional[conint(ge=0, le=2147483647)] = Field(
        None,
        description='Upstream speed, if different from port speed',
        title='Upstream speed (Kbps)',
    )
    xconnect_id: Optional[constr(max_length=50)] = Field(None, title='Cross-connect ID')
    pp_info: Optional[constr(max_length=100)] = Field(None, title='Patch panel/port(s)')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    _occupied: Optional[bool] = Field(None, title='occupied')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class TermSide1(Enum):
    A = 'A'
    Z = 'Z'


class WritableCircuitTermination(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    circuit: int = Field(..., title='Circuit')
    term_side: TermSide1 = Field(..., title='Termination')
    site: Optional[int] = Field(None, title='Site')
    provider_network: Optional[int] = Field(None, title='Provider network')
    port_speed: Optional[conint(ge=0, le=2147483647)] = Field(
        None, title='Port speed (Kbps)'
    )
    upstream_speed: Optional[conint(ge=0, le=2147483647)] = Field(
        None,
        description='Upstream speed, if different from port speed',
        title='Upstream speed (Kbps)',
    )
    xconnect_id: Optional[constr(max_length=50)] = Field(None, title='Cross-connect ID')
    pp_info: Optional[constr(max_length=100)] = Field(None, title='Patch panel/port(s)')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    _occupied: Optional[bool] = Field(None, title='occupied')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedTag(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', min_length=1, max_length=6)] = Field(
        None, title='Color'
    )


class CircuitType(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    circuit_count: Optional[int] = Field(None, title='Circuit count')


class NestedProvider(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    circuit_count: Optional[int] = Field(None, title='Circuit count')


class NestedCircuitType(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    circuit_count: Optional[int] = Field(None, title='Circuit count')


class NestedTenant(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )


class CircuitCircuitTermination(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    site: NestedSite
    provider_network: NestedProviderNetwork
    port_speed: Optional[conint(ge=0, le=2147483647)] = Field(
        None, title='Port speed (Kbps)'
    )
    upstream_speed: Optional[conint(ge=0, le=2147483647)] = Field(
        None,
        description='Upstream speed, if different from port speed',
        title='Upstream speed (Kbps)',
    )
    xconnect_id: Optional[constr(max_length=50)] = Field(None, title='Cross-connect ID')


class Label(Enum):
    Planned = 'Planned'
    Provisioning = 'Provisioning'
    Active = 'Active'
    Offline = 'Offline'
    Deprovisioning = 'Deprovisioning'
    Decommissioned = 'Decommissioned'


class Value(Enum):
    planned = 'planned'
    provisioning = 'provisioning'
    active = 'active'
    offline = 'offline'
    deprovisioning = 'deprovisioning'
    decommissioned = 'decommissioned'


class Status(BaseModel):
    label: Label
    value: Value


class Circuit(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    cid: constr(min_length=1, max_length=100) = Field(..., title='Circuit ID')
    provider: NestedProvider
    type: NestedCircuitType
    status: Optional[Status] = Field(None, title='Status')
    tenant: Optional[NestedTenant] = None
    install_date: Optional[date] = Field(None, title='Date installed')
    commit_rate: Optional[conint(ge=0, le=2147483647)] = Field(
        None, title='Commit rate (Kbps)'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    termination_a: Optional[CircuitCircuitTermination] = None
    termination_z: Optional[CircuitCircuitTermination] = None
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Status1(Enum):
    planned = 'planned'
    provisioning = 'provisioning'
    active = 'active'
    offline = 'offline'
    deprovisioning = 'deprovisioning'
    decommissioned = 'decommissioned'


class WritableCircuit(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    cid: constr(min_length=1, max_length=100) = Field(..., title='Circuit ID')
    provider: int = Field(..., title='Provider')
    type: int = Field(..., title='Type')
    status: Optional[Status1] = Field(None, title='Status')
    tenant: Optional[int] = Field(None, title='Tenant')
    install_date: Optional[date] = Field(None, title='Date installed')
    commit_rate: Optional[conint(ge=0, le=2147483647)] = Field(
        None, title='Commit rate (Kbps)'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    termination_a: Optional[int] = Field(None, title='Termination a')
    termination_z: Optional[int] = Field(None, title='Termination z')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class ProviderNetwork(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    provider: NestedProvider
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableProviderNetwork(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    provider: int = Field(..., title='Provider')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Provider(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    asn: Optional[conint(ge=1, le=4294967295)] = Field(
        None, description='32-bit autonomous system number', title='ASN'
    )
    account: Optional[constr(max_length=30)] = Field(None, title='Account number')
    portal_url: Optional[AnyUrl] = Field(None, title='Portal URL')
    noc_contact: Optional[str] = Field(None, title='NOC contact')
    admin_contact: Optional[str] = Field(None, title='Admin contact')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    circuit_count: Optional[int] = Field(None, title='Circuit count')


class Type(Enum):
    cat3 = 'cat3'
    cat5 = 'cat5'
    cat5e = 'cat5e'
    cat6 = 'cat6'
    cat6a = 'cat6a'
    cat7 = 'cat7'
    cat7a = 'cat7a'
    cat8 = 'cat8'
    dac_active = 'dac-active'
    dac_passive = 'dac-passive'
    mrj21_trunk = 'mrj21-trunk'
    coaxial = 'coaxial'
    mmf = 'mmf'
    mmf_om1 = 'mmf-om1'
    mmf_om2 = 'mmf-om2'
    mmf_om3 = 'mmf-om3'
    mmf_om4 = 'mmf-om4'
    mmf_om5 = 'mmf-om5'
    smf = 'smf'
    smf_os1 = 'smf-os1'
    smf_os2 = 'smf-os2'
    aoc = 'aoc'
    power = 'power'


class Label1(Enum):
    Connected = 'Connected'
    Planned = 'Planned'
    Decommissioning = 'Decommissioning'


class Value1(Enum):
    connected = 'connected'
    planned = 'planned'
    decommissioning = 'decommissioning'


class Status2(BaseModel):
    label: Label1
    value: Value1


class Label2(Enum):
    Kilometers = 'Kilometers'
    Meters = 'Meters'
    Centimeters = 'Centimeters'
    Miles = 'Miles'
    Feet = 'Feet'
    Inches = 'Inches'


class Value2(Enum):
    km = 'km'
    m = 'm'
    cm = 'cm'
    mi = 'mi'
    ft = 'ft'
    in_ = 'in'


class LengthUnit(BaseModel):
    label: Label2
    value: Value2


class Cable(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    termination_a_type: str = Field(..., title='Termination a type')
    termination_a_id: conint(ge=0, le=2147483647) = Field(..., title='Termination a id')
    termination_a: Optional[Dict[str, str]] = Field(None, title='Termination a')
    termination_b_type: str = Field(..., title='Termination b type')
    termination_b_id: conint(ge=0, le=2147483647) = Field(..., title='Termination b id')
    termination_b: Optional[Dict[str, str]] = Field(None, title='Termination b')
    type: Optional[Type] = Field(None, title='Type')
    status: Optional[Status2] = Field(None, title='Status')
    tenant: Optional[NestedTenant] = None
    label: Optional[constr(max_length=100)] = Field(None, title='Label')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    length: Optional[Decimal] = Field(None, title='Length')
    length_unit: Optional[LengthUnit] = Field(None, title='Length unit')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type1(Enum):
    cat3 = 'cat3'
    cat5 = 'cat5'
    cat5e = 'cat5e'
    cat6 = 'cat6'
    cat6a = 'cat6a'
    cat7 = 'cat7'
    cat7a = 'cat7a'
    cat8 = 'cat8'
    dac_active = 'dac-active'
    dac_passive = 'dac-passive'
    mrj21_trunk = 'mrj21-trunk'
    coaxial = 'coaxial'
    mmf = 'mmf'
    mmf_om1 = 'mmf-om1'
    mmf_om2 = 'mmf-om2'
    mmf_om3 = 'mmf-om3'
    mmf_om4 = 'mmf-om4'
    mmf_om5 = 'mmf-om5'
    smf = 'smf'
    smf_os1 = 'smf-os1'
    smf_os2 = 'smf-os2'
    aoc = 'aoc'
    power = 'power'


class Status3(Enum):
    connected = 'connected'
    planned = 'planned'
    decommissioning = 'decommissioning'


class LengthUnit1(Enum):
    km = 'km'
    m = 'm'
    cm = 'cm'
    mi = 'mi'
    ft = 'ft'
    in_ = 'in'


class WritableCable(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    termination_a_type: str = Field(..., title='Termination a type')
    termination_a_id: conint(ge=0, le=2147483647) = Field(..., title='Termination a id')
    termination_a: Optional[Dict[str, str]] = Field(None, title='Termination a')
    termination_b_type: str = Field(..., title='Termination b type')
    termination_b_id: conint(ge=0, le=2147483647) = Field(..., title='Termination b id')
    termination_b: Optional[Dict[str, str]] = Field(None, title='Termination b')
    type: Optional[Type1] = Field(None, title='Type')
    status: Optional[Status3] = Field(None, title='Status')
    tenant: Optional[int] = Field(None, title='Tenant')
    label: Optional[constr(max_length=100)] = Field(None, title='Label')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    length: Optional[Decimal] = Field(None, title='Length')
    length_unit: Optional[LengthUnit1] = Field(None, title='Length unit')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedManufacturer(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    devicetype_count: Optional[int] = Field(None, title='Devicetype count')


class NestedDeviceType(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    manufacturer: Optional[NestedManufacturer] = None
    model: constr(min_length=1, max_length=100) = Field(..., title='Model')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    device_count: Optional[int] = Field(None, title='Device count')


class NestedDeviceRole(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    device_count: Optional[int] = Field(None, title='Device count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')


class NestedPlatform(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    device_count: Optional[int] = Field(None, title='Device count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')


class NestedLocation(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    rack_count: Optional[int] = Field(None, title='Rack count')
    _depth: Optional[int] = Field(None, title='depth')


class NestedRack(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    device_count: Optional[int] = Field(None, title='Device count')


class NestedDevice(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: Optional[constr(max_length=64)] = Field(None, title='Name')


class NestedIPAddress(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[int] = Field(None, title='Family')
    address: str = Field(
        ..., description='IPv4 or IPv6 address (with mask)', title='Address'
    )


class NestedCluster(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')


class NestedVirtualChassis(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    master: NestedDevice
    member_count: Optional[int] = Field(None, title='Member count')


class Label3(Enum):
    Front = 'Front'
    Rear = 'Rear'


class Value3(Enum):
    front = 'front'
    rear = 'rear'


class Face(BaseModel):
    label: Label3
    value: Value3


class Label4(Enum):
    Offline = 'Offline'
    Active = 'Active'
    Planned = 'Planned'
    Staged = 'Staged'
    Failed = 'Failed'
    Inventory = 'Inventory'
    Decommissioning = 'Decommissioning'


class Value4(Enum):
    offline = 'offline'
    active = 'active'
    planned = 'planned'
    staged = 'staged'
    failed = 'failed'
    inventory = 'inventory'
    decommissioning = 'decommissioning'


class Status4(BaseModel):
    label: Label4
    value: Value4


class Label5(Enum):
    Front_to_rear = 'Front to rear'
    Rear_to_front = 'Rear to front'
    Left_to_right = 'Left to right'
    Right_to_left = 'Right to left'
    Side_to_rear = 'Side to rear'
    Passive = 'Passive'


class Value5(Enum):
    front_to_rear = 'front-to-rear'
    rear_to_front = 'rear-to-front'
    left_to_right = 'left-to-right'
    right_to_left = 'right-to-left'
    side_to_rear = 'side-to-rear'
    passive = 'passive'


class Airflow(BaseModel):
    label: Label5
    value: Value5


class Device(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(max_length=64) = Field(..., title='Name')
    device_type: NestedDeviceType
    device_role: NestedDeviceRole
    tenant: Optional[NestedTenant] = None
    platform: Optional[NestedPlatform] = None
    serial: Optional[constr(max_length=50)] = Field(None, title='Serial number')
    asset_tag: Optional[constr(max_length=50)] = Field(
        None, description='A unique tag used to identify this device', title='Asset tag'
    )
    site: NestedSite
    location: Optional[NestedLocation] = None
    rack: Optional[NestedRack] = None
    position: Optional[conint(ge=1)] = Field(None, title='Position (U)')
    face: Optional[Face] = Field(None, title='Face')
    parent_device: Optional[NestedDevice] = None
    status: Optional[Status4] = Field(None, title='Status')
    airflow: Optional[Airflow] = Field(None, title='Airflow')
    primary_ip: Optional[NestedIPAddress] = None
    primary_ip4: Optional[NestedIPAddress] = None
    primary_ip6: Optional[NestedIPAddress] = None
    cluster: Optional[NestedCluster] = None
    virtual_chassis: Optional[NestedVirtualChassis] = None
    vc_position: Optional[conint(ge=0, le=255)] = Field(None, title='Vc position')
    vc_priority: Optional[conint(ge=0, le=255)] = Field(None, title='Vc priority')
    comments: Optional[str] = Field(None, title='Comments')
    local_context_data: Optional[str] = Field(None, title='Local context data')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Label6(Enum):
    DE_9 = 'DE-9'
    DB_25 = 'DB-25'
    RJ_11 = 'RJ-11'
    RJ_12 = 'RJ-12'
    RJ_45 = 'RJ-45'
    Mini_DIN_8 = 'Mini-DIN 8'
    USB_Type_A = 'USB Type A'
    USB_Type_B = 'USB Type B'
    USB_Type_C = 'USB Type C'
    USB_Mini_A = 'USB Mini A'
    USB_Mini_B = 'USB Mini B'
    USB_Micro_A = 'USB Micro A'
    USB_Micro_B = 'USB Micro B'
    USB_Micro_AB = 'USB Micro AB'
    Other = 'Other'


class Value6(Enum):
    de_9 = 'de-9'
    db_25 = 'db-25'
    rj_11 = 'rj-11'
    rj_12 = 'rj-12'
    rj_45 = 'rj-45'
    mini_din_8 = 'mini-din-8'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    other = 'other'


class Type2(BaseModel):
    label: Label6
    value: Value6


class ConsolePortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: NestedDeviceType
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type2] = Field(None, title='Type')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type3(Enum):
    de_9 = 'de-9'
    db_25 = 'db-25'
    rj_11 = 'rj-11'
    rj_12 = 'rj-12'
    rj_45 = 'rj-45'
    mini_din_8 = 'mini-din-8'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    other = 'other'


class WritableConsolePortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: int = Field(..., title='Device type')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type3] = Field(None, title='Type')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Label7(Enum):
    DE_9 = 'DE-9'
    DB_25 = 'DB-25'
    RJ_11 = 'RJ-11'
    RJ_12 = 'RJ-12'
    RJ_45 = 'RJ-45'
    Mini_DIN_8 = 'Mini-DIN 8'
    USB_Type_A = 'USB Type A'
    USB_Type_B = 'USB Type B'
    USB_Type_C = 'USB Type C'
    USB_Mini_A = 'USB Mini A'
    USB_Mini_B = 'USB Mini B'
    USB_Micro_A = 'USB Micro A'
    USB_Micro_B = 'USB Micro B'
    USB_Micro_AB = 'USB Micro AB'
    Other = 'Other'


class Value7(Enum):
    de_9 = 'de-9'
    db_25 = 'db-25'
    rj_11 = 'rj-11'
    rj_12 = 'rj-12'
    rj_45 = 'rj-45'
    mini_din_8 = 'mini-din-8'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    other = 'other'


class Type4(BaseModel):
    label: Label7
    value: Value7


class Label8(Enum):
    field_1200_bps = '1200 bps'
    field_2400_bps = '2400 bps'
    field_4800_bps = '4800 bps'
    field_9600_bps = '9600 bps'
    field_19_2_kbps = '19.2 kbps'
    field_38_4_kbps = '38.4 kbps'
    field_57_6_kbps = '57.6 kbps'
    field_115_2_kbps = '115.2 kbps'


class Value8(Enum):
    integer_1200 = 1200
    integer_2400 = 2400
    integer_4800 = 4800
    integer_9600 = 9600
    integer_19200 = 19200
    integer_38400 = 38400
    integer_57600 = 57600
    integer_115200 = 115200


class Speed(BaseModel):
    label: Label8
    value: Value8


class ConsolePort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type4] = Field(None, title='Type')
    speed: Optional[Speed] = Field(None, title='Speed')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Type5(Enum):
    de_9 = 'de-9'
    db_25 = 'db-25'
    rj_11 = 'rj-11'
    rj_12 = 'rj-12'
    rj_45 = 'rj-45'
    mini_din_8 = 'mini-din-8'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    other = 'other'


class Speed1(Enum):
    integer_1200 = 1200
    integer_2400 = 2400
    integer_4800 = 4800
    integer_9600 = 9600
    integer_19200 = 19200
    integer_38400 = 38400
    integer_57600 = 57600
    integer_115200 = 115200


class WritableConsolePort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type5] = Field(None, description='Physical port type', title='Type')
    speed: Optional[Speed1] = Field(
        None, description='Port speed in bits per second', title='Speed'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Label9(Enum):
    DE_9 = 'DE-9'
    DB_25 = 'DB-25'
    RJ_11 = 'RJ-11'
    RJ_12 = 'RJ-12'
    RJ_45 = 'RJ-45'
    Mini_DIN_8 = 'Mini-DIN 8'
    USB_Type_A = 'USB Type A'
    USB_Type_B = 'USB Type B'
    USB_Type_C = 'USB Type C'
    USB_Mini_A = 'USB Mini A'
    USB_Mini_B = 'USB Mini B'
    USB_Micro_A = 'USB Micro A'
    USB_Micro_B = 'USB Micro B'
    USB_Micro_AB = 'USB Micro AB'
    Other = 'Other'


class Value9(Enum):
    de_9 = 'de-9'
    db_25 = 'db-25'
    rj_11 = 'rj-11'
    rj_12 = 'rj-12'
    rj_45 = 'rj-45'
    mini_din_8 = 'mini-din-8'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    other = 'other'


class Type6(BaseModel):
    label: Label9
    value: Value9


class ConsoleServerPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: NestedDeviceType
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type6] = Field(None, title='Type')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type7(Enum):
    de_9 = 'de-9'
    db_25 = 'db-25'
    rj_11 = 'rj-11'
    rj_12 = 'rj-12'
    rj_45 = 'rj-45'
    mini_din_8 = 'mini-din-8'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    other = 'other'


class WritableConsoleServerPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: int = Field(..., title='Device type')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type7] = Field(None, title='Type')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Label10(Enum):
    DE_9 = 'DE-9'
    DB_25 = 'DB-25'
    RJ_11 = 'RJ-11'
    RJ_12 = 'RJ-12'
    RJ_45 = 'RJ-45'
    Mini_DIN_8 = 'Mini-DIN 8'
    USB_Type_A = 'USB Type A'
    USB_Type_B = 'USB Type B'
    USB_Type_C = 'USB Type C'
    USB_Mini_A = 'USB Mini A'
    USB_Mini_B = 'USB Mini B'
    USB_Micro_A = 'USB Micro A'
    USB_Micro_B = 'USB Micro B'
    USB_Micro_AB = 'USB Micro AB'
    Other = 'Other'


class Value10(Enum):
    de_9 = 'de-9'
    db_25 = 'db-25'
    rj_11 = 'rj-11'
    rj_12 = 'rj-12'
    rj_45 = 'rj-45'
    mini_din_8 = 'mini-din-8'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    other = 'other'


class Type8(BaseModel):
    label: Label10
    value: Value10


class Label11(Enum):
    field_1200_bps = '1200 bps'
    field_2400_bps = '2400 bps'
    field_4800_bps = '4800 bps'
    field_9600_bps = '9600 bps'
    field_19_2_kbps = '19.2 kbps'
    field_38_4_kbps = '38.4 kbps'
    field_57_6_kbps = '57.6 kbps'
    field_115_2_kbps = '115.2 kbps'


class Value11(Enum):
    integer_1200 = 1200
    integer_2400 = 2400
    integer_4800 = 4800
    integer_9600 = 9600
    integer_19200 = 19200
    integer_38400 = 38400
    integer_57600 = 57600
    integer_115200 = 115200


class Speed2(BaseModel):
    label: Label11
    value: Value11


class ConsoleServerPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type8] = Field(None, title='Type')
    speed: Optional[Speed2] = Field(None, title='Speed')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Type9(Enum):
    de_9 = 'de-9'
    db_25 = 'db-25'
    rj_11 = 'rj-11'
    rj_12 = 'rj-12'
    rj_45 = 'rj-45'
    mini_din_8 = 'mini-din-8'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    other = 'other'


class Speed3(Enum):
    integer_1200 = 1200
    integer_2400 = 2400
    integer_4800 = 4800
    integer_9600 = 9600
    integer_19200 = 19200
    integer_38400 = 38400
    integer_57600 = 57600
    integer_115200 = 115200


class WritableConsoleServerPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type9] = Field(None, description='Physical port type', title='Type')
    speed: Optional[Speed3] = Field(
        None, description='Port speed in bits per second', title='Speed'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class DeviceBayTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: NestedDeviceType
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableDeviceBayTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: int = Field(..., title='Device type')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class DeviceBay(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    installed_device: Optional[NestedDevice] = None
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableDeviceBay(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    installed_device: Optional[int] = Field(None, title='Installed device')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class DeviceRole(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', min_length=1, max_length=6)] = Field(
        None, title='Color'
    )
    vm_role: Optional[bool] = Field(
        None,
        description='Virtual machines may be assigned to this role',
        title='VM Role',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')


class Label12(Enum):
    Parent = 'Parent'
    Child = 'Child'


class Value12(Enum):
    parent = 'parent'
    child = 'child'


class SubdeviceRole(BaseModel):
    label: Label12
    value: Value12


class Label13(Enum):
    Front_to_rear = 'Front to rear'
    Rear_to_front = 'Rear to front'
    Left_to_right = 'Left to right'
    Right_to_left = 'Right to left'
    Side_to_rear = 'Side to rear'
    Passive = 'Passive'


class Value13(Enum):
    front_to_rear = 'front-to-rear'
    rear_to_front = 'rear-to-front'
    left_to_right = 'left-to-right'
    right_to_left = 'right-to-left'
    side_to_rear = 'side-to-rear'
    passive = 'passive'


class Airflow1(BaseModel):
    label: Label13
    value: Value13


class DeviceType(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    manufacturer: NestedManufacturer
    model: constr(min_length=1, max_length=100) = Field(..., title='Model')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    part_number: Optional[constr(max_length=50)] = Field(
        None, description='Discrete part number (optional)', title='Part number'
    )
    u_height: Optional[conint(ge=0, le=32767)] = Field(None, title='Height (U)')
    is_full_depth: Optional[bool] = Field(
        None,
        description='Device consumes both front and rear rack faces',
        title='Is full depth',
    )
    subdevice_role: Optional[SubdeviceRole] = Field(None, title='Subdevice role')
    airflow: Optional[Airflow1] = Field(None, title='Airflow')
    front_image: Optional[AnyUrl] = Field(None, title='Front image')
    rear_image: Optional[AnyUrl] = Field(None, title='Rear image')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')


class SubdeviceRole1(Enum):
    parent = 'parent'
    child = 'child'


class Airflow2(Enum):
    front_to_rear = 'front-to-rear'
    rear_to_front = 'rear-to-front'
    left_to_right = 'left-to-right'
    right_to_left = 'right-to-left'
    side_to_rear = 'side-to-rear'
    passive = 'passive'


class WritableDeviceType(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    manufacturer: int = Field(..., title='Manufacturer')
    model: constr(min_length=1, max_length=100) = Field(..., title='Model')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    part_number: Optional[constr(max_length=50)] = Field(
        None, description='Discrete part number (optional)', title='Part number'
    )
    u_height: Optional[conint(ge=0, le=32767)] = Field(None, title='Height (U)')
    is_full_depth: Optional[bool] = Field(
        None,
        description='Device consumes both front and rear rack faces',
        title='Is full depth',
    )
    subdevice_role: Optional[SubdeviceRole1] = Field(
        None,
        description='Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.',
        title='Parent/child status',
    )
    airflow: Optional[Airflow2] = Field(None, title='Airflow')
    front_image: Optional[AnyUrl] = Field(None, title='Front image')
    rear_image: Optional[AnyUrl] = Field(None, title='Rear image')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')


class Label14(Enum):
    Front = 'Front'
    Rear = 'Rear'


class Value14(Enum):
    front = 'front'
    rear = 'rear'


class Face1(BaseModel):
    label: Label14
    value: Value14


class Label15(Enum):
    Offline = 'Offline'
    Active = 'Active'
    Planned = 'Planned'
    Staged = 'Staged'
    Failed = 'Failed'
    Inventory = 'Inventory'
    Decommissioning = 'Decommissioning'


class Value15(Enum):
    offline = 'offline'
    active = 'active'
    planned = 'planned'
    staged = 'staged'
    failed = 'failed'
    inventory = 'inventory'
    decommissioning = 'decommissioning'


class Status5(BaseModel):
    label: Label15
    value: Value15


class DeviceWithConfigContext(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(max_length=64) = Field(..., title='Name')
    device_type: NestedDeviceType
    device_role: NestedDeviceRole
    tenant: Optional[NestedTenant] = None
    platform: Optional[NestedPlatform] = None
    serial: Optional[constr(max_length=50)] = Field(None, title='Serial number')
    asset_tag: Optional[constr(max_length=50)] = Field(
        None, description='A unique tag used to identify this device', title='Asset tag'
    )
    site: NestedSite
    location: Optional[NestedLocation] = None
    rack: Optional[NestedRack] = None
    position: Optional[conint(ge=1)] = Field(None, title='Position (U)')
    face: Optional[Face1] = Field(None, title='Face')
    parent_device: Optional[NestedDevice] = None
    status: Optional[Status5] = Field(None, title='Status')
    primary_ip: Optional[NestedIPAddress] = None
    primary_ip4: Optional[NestedIPAddress] = None
    primary_ip6: Optional[NestedIPAddress] = None
    cluster: Optional[NestedCluster] = None
    virtual_chassis: Optional[NestedVirtualChassis] = None
    vc_position: Optional[conint(ge=0, le=255)] = Field(None, title='Vc position')
    vc_priority: Optional[conint(ge=0, le=255)] = Field(None, title='Vc priority')
    comments: Optional[str] = Field(None, title='Comments')
    local_context_data: Optional[str] = Field(None, title='Local context data')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    config_context: Optional[Dict[str, str]] = Field(None, title='Config context')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Face2(Enum):
    front = 'front'
    rear = 'rear'


class Status6(Enum):
    offline = 'offline'
    active = 'active'
    planned = 'planned'
    staged = 'staged'
    failed = 'failed'
    inventory = 'inventory'
    decommissioning = 'decommissioning'


class WritableDeviceWithConfigContext(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(max_length=64) = Field(..., title='Name')
    device_type: int = Field(..., title='Device type')
    device_role: int = Field(..., title='Device role')
    tenant: int = Field(..., title='Tenant')
    platform: Optional[int] = Field(None, title='Platform')
    serial: Optional[constr(max_length=50)] = Field(None, title='Serial number')
    asset_tag: Optional[constr(max_length=50)] = Field(
        None, description='A unique tag used to identify this device', title='Asset tag'
    )
    site: int = Field(..., title='Site')
    location: Optional[int] = Field(None, title='Location')
    rack: int = Field(..., title='Rack')
    position: Optional[conint(ge=1)] = Field(None, title='Position (U)')
    face: Face2 = Field(..., title='Rack face')
    parent_device: Optional[NestedDevice] = None
    status: Optional[Status6] = Field(None, title='Status')
    primary_ip: Optional[str] = Field(None, title='Primary ip')
    primary_ip4: Optional[int] = Field(None, title='Primary IPv4')
    primary_ip6: Optional[int] = Field(None, title='Primary IPv6')
    cluster: Optional[int] = Field(None, title='Cluster')
    virtual_chassis: int = Field(..., title='Virtual chassis')
    vc_position: Optional[conint(ge=0, le=255)] = Field(None, title='Vc position')
    vc_priority: Optional[conint(ge=0, le=255)] = Field(None, title='Vc priority')
    comments: Optional[str] = Field(None, title='Comments')
    local_context_data: Optional[str] = Field(None, title='Local context data')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    config_context: Optional[Dict[str, str]] = Field(None, title='Config context')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class DeviceNAPALM(BaseModel):
    method: Dict[str, str] = Field(..., title='Method')


class NestedRearPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')


class Label16(Enum):
    field_8P8C = '8P8C'
    field_8P6C = '8P6C'
    field_8P4C = '8P4C'
    field_8P2C = '8P2C'
    field_6P6C = '6P6C'
    field_6P4C = '6P4C'
    field_6P2C = '6P2C'
    field_4P4C = '4P4C'
    field_4P2C = '4P2C'
    GG45 = 'GG45'
    TERA_4P = 'TERA 4P'
    TERA_2P = 'TERA 2P'
    TERA_1P = 'TERA 1P'
    field_110_Punch = '110 Punch'
    BNC = 'BNC'
    F_Connector = 'F Connector'
    N_Connector = 'N Connector'
    MRJ21 = 'MRJ21'
    FC = 'FC'
    LC = 'LC'
    LC_APC = 'LC/APC'
    LSH = 'LSH'
    LSH_APC = 'LSH/APC'
    MPO = 'MPO'
    MTRJ = 'MTRJ'
    SC = 'SC'
    SC_APC = 'SC/APC'
    ST = 'ST'
    CS = 'CS'
    SN = 'SN'
    SMA_905 = 'SMA 905'
    SMA_906 = 'SMA 906'
    URM_P2 = 'URM-P2'
    URM_P4 = 'URM-P4'
    URM_P8 = 'URM-P8'
    Splice = 'Splice'


class Value16(Enum):
    field_8p8c = '8p8c'
    field_8p6c = '8p6c'
    field_8p4c = '8p4c'
    field_8p2c = '8p2c'
    field_6p6c = '6p6c'
    field_6p4c = '6p4c'
    field_6p2c = '6p2c'
    field_4p4c = '4p4c'
    field_4p2c = '4p2c'
    gg45 = 'gg45'
    tera_4p = 'tera-4p'
    tera_2p = 'tera-2p'
    tera_1p = 'tera-1p'
    field_110_punch = '110-punch'
    bnc = 'bnc'
    f = 'f'
    n = 'n'
    mrj21 = 'mrj21'
    fc = 'fc'
    lc = 'lc'
    lc_apc = 'lc-apc'
    lsh = 'lsh'
    lsh_apc = 'lsh-apc'
    mpo = 'mpo'
    mtrj = 'mtrj'
    sc = 'sc'
    sc_apc = 'sc-apc'
    st = 'st'
    cs = 'cs'
    sn = 'sn'
    sma_905 = 'sma-905'
    sma_906 = 'sma-906'
    urm_p2 = 'urm-p2'
    urm_p4 = 'urm-p4'
    urm_p8 = 'urm-p8'
    splice = 'splice'


class Type10(BaseModel):
    label: Label16
    value: Value16


class FrontPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: NestedDeviceType
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type10 = Field(..., title='Type')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    rear_port: NestedRearPortTemplate
    rear_port_position: Optional[conint(ge=1, le=1024)] = Field(
        1, title='Rear port position'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type11(Enum):
    field_8p8c = '8p8c'
    field_8p6c = '8p6c'
    field_8p4c = '8p4c'
    field_8p2c = '8p2c'
    field_6p6c = '6p6c'
    field_6p4c = '6p4c'
    field_6p2c = '6p2c'
    field_4p4c = '4p4c'
    field_4p2c = '4p2c'
    gg45 = 'gg45'
    tera_4p = 'tera-4p'
    tera_2p = 'tera-2p'
    tera_1p = 'tera-1p'
    field_110_punch = '110-punch'
    bnc = 'bnc'
    f = 'f'
    n = 'n'
    mrj21 = 'mrj21'
    fc = 'fc'
    lc = 'lc'
    lc_apc = 'lc-apc'
    lsh = 'lsh'
    lsh_apc = 'lsh-apc'
    mpo = 'mpo'
    mtrj = 'mtrj'
    sc = 'sc'
    sc_apc = 'sc-apc'
    st = 'st'
    cs = 'cs'
    sn = 'sn'
    sma_905 = 'sma-905'
    sma_906 = 'sma-906'
    urm_p2 = 'urm-p2'
    urm_p4 = 'urm-p4'
    urm_p8 = 'urm-p8'
    splice = 'splice'


class WritableFrontPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: int = Field(..., title='Device type')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type11 = Field(..., title='Type')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    rear_port: int = Field(..., title='Rear port')
    rear_port_position: Optional[conint(ge=1, le=1024)] = Field(
        1, title='Rear port position'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class FrontPortRearPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )


class Label17(Enum):
    field_8P8C = '8P8C'
    field_8P6C = '8P6C'
    field_8P4C = '8P4C'
    field_8P2C = '8P2C'
    field_6P6C = '6P6C'
    field_6P4C = '6P4C'
    field_6P2C = '6P2C'
    field_4P4C = '4P4C'
    field_4P2C = '4P2C'
    GG45 = 'GG45'
    TERA_4P = 'TERA 4P'
    TERA_2P = 'TERA 2P'
    TERA_1P = 'TERA 1P'
    field_110_Punch = '110 Punch'
    BNC = 'BNC'
    F_Connector = 'F Connector'
    N_Connector = 'N Connector'
    MRJ21 = 'MRJ21'
    FC = 'FC'
    LC = 'LC'
    LC_APC = 'LC/APC'
    LSH = 'LSH'
    LSH_APC = 'LSH/APC'
    MPO = 'MPO'
    MTRJ = 'MTRJ'
    SC = 'SC'
    SC_APC = 'SC/APC'
    ST = 'ST'
    CS = 'CS'
    SN = 'SN'
    SMA_905 = 'SMA 905'
    SMA_906 = 'SMA 906'
    URM_P2 = 'URM-P2'
    URM_P4 = 'URM-P4'
    URM_P8 = 'URM-P8'
    Splice = 'Splice'


class Value17(Enum):
    field_8p8c = '8p8c'
    field_8p6c = '8p6c'
    field_8p4c = '8p4c'
    field_8p2c = '8p2c'
    field_6p6c = '6p6c'
    field_6p4c = '6p4c'
    field_6p2c = '6p2c'
    field_4p4c = '4p4c'
    field_4p2c = '4p2c'
    gg45 = 'gg45'
    tera_4p = 'tera-4p'
    tera_2p = 'tera-2p'
    tera_1p = 'tera-1p'
    field_110_punch = '110-punch'
    bnc = 'bnc'
    f = 'f'
    n = 'n'
    mrj21 = 'mrj21'
    fc = 'fc'
    lc = 'lc'
    lc_apc = 'lc-apc'
    lsh = 'lsh'
    lsh_apc = 'lsh-apc'
    mpo = 'mpo'
    mtrj = 'mtrj'
    sc = 'sc'
    sc_apc = 'sc-apc'
    st = 'st'
    cs = 'cs'
    sn = 'sn'
    sma_905 = 'sma-905'
    sma_906 = 'sma-906'
    urm_p2 = 'urm-p2'
    urm_p4 = 'urm-p4'
    urm_p8 = 'urm-p8'
    splice = 'splice'


class Type12(BaseModel):
    label: Label17
    value: Value17


class FrontPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type12 = Field(..., title='Type')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    rear_port: FrontPortRearPort
    rear_port_position: Optional[conint(ge=1, le=1024)] = Field(
        1, title='Rear port position'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Type13(Enum):
    field_8p8c = '8p8c'
    field_8p6c = '8p6c'
    field_8p4c = '8p4c'
    field_8p2c = '8p2c'
    field_6p6c = '6p6c'
    field_6p4c = '6p4c'
    field_6p2c = '6p2c'
    field_4p4c = '4p4c'
    field_4p2c = '4p2c'
    gg45 = 'gg45'
    tera_4p = 'tera-4p'
    tera_2p = 'tera-2p'
    tera_1p = 'tera-1p'
    field_110_punch = '110-punch'
    bnc = 'bnc'
    f = 'f'
    n = 'n'
    mrj21 = 'mrj21'
    fc = 'fc'
    lc = 'lc'
    lc_apc = 'lc-apc'
    lsh = 'lsh'
    lsh_apc = 'lsh-apc'
    mpo = 'mpo'
    mtrj = 'mtrj'
    sc = 'sc'
    sc_apc = 'sc-apc'
    st = 'st'
    cs = 'cs'
    sn = 'sn'
    sma_905 = 'sma-905'
    sma_906 = 'sma-906'
    urm_p2 = 'urm-p2'
    urm_p4 = 'urm-p4'
    urm_p8 = 'urm-p8'
    splice = 'splice'


class WritableFrontPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type13 = Field(..., title='Type')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    rear_port: int = Field(..., title='Rear port')
    rear_port_position: Optional[conint(ge=1, le=1024)] = Field(
        1, title='Rear port position'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Label18(Enum):
    Virtual = 'Virtual'
    Bridge = 'Bridge'
    Link_Aggregation_Group__LAG_ = 'Link Aggregation Group (LAG)'
    field_100BASE_TX__10_100ME_ = '100BASE-TX (10/100ME)'
    field_1000BASE_T__1GE_ = '1000BASE-T (1GE)'
    field_2_5GBASE_T__2_5GE_ = '2.5GBASE-T (2.5GE)'
    field_5GBASE_T__5GE_ = '5GBASE-T (5GE)'
    field_10GBASE_T__10GE_ = '10GBASE-T (10GE)'
    field_10GBASE_CX4__10GE_ = '10GBASE-CX4 (10GE)'
    GBIC__1GE_ = 'GBIC (1GE)'
    SFP__1GE_ = 'SFP (1GE)'
    SFP___10GE_ = 'SFP+ (10GE)'
    XFP__10GE_ = 'XFP (10GE)'
    XENPAK__10GE_ = 'XENPAK (10GE)'
    X2__10GE_ = 'X2 (10GE)'
    SFP28__25GE_ = 'SFP28 (25GE)'
    SFP56__50GE_ = 'SFP56 (50GE)'
    QSFP___40GE_ = 'QSFP+ (40GE)'
    QSFP28__50GE_ = 'QSFP28 (50GE)'
    CFP__100GE_ = 'CFP (100GE)'
    CFP2__100GE_ = 'CFP2 (100GE)'
    CFP2__200GE_ = 'CFP2 (200GE)'
    CFP4__100GE_ = 'CFP4 (100GE)'
    Cisco_CPAK__100GE_ = 'Cisco CPAK (100GE)'
    QSFP28__100GE_ = 'QSFP28 (100GE)'
    QSFP56__200GE_ = 'QSFP56 (200GE)'
    QSFP_DD__400GE_ = 'QSFP-DD (400GE)'
    OSFP__400GE_ = 'OSFP (400GE)'
    IEEE_802_11a = 'IEEE 802.11a'
    IEEE_802_11b_g = 'IEEE 802.11b/g'
    IEEE_802_11n = 'IEEE 802.11n'
    IEEE_802_11ac = 'IEEE 802.11ac'
    IEEE_802_11ad = 'IEEE 802.11ad'
    IEEE_802_11ax = 'IEEE 802.11ax'
    IEEE_802_15_1__Bluetooth_ = 'IEEE 802.15.1 (Bluetooth)'
    GSM = 'GSM'
    CDMA = 'CDMA'
    LTE = 'LTE'
    OC_3_STM_1 = 'OC-3/STM-1'
    OC_12_STM_4 = 'OC-12/STM-4'
    OC_48_STM_16 = 'OC-48/STM-16'
    OC_192_STM_64 = 'OC-192/STM-64'
    OC_768_STM_256 = 'OC-768/STM-256'
    OC_1920_STM_640 = 'OC-1920/STM-640'
    OC_3840_STM_1234 = 'OC-3840/STM-1234'
    SFP__1GFC_ = 'SFP (1GFC)'
    SFP__2GFC_ = 'SFP (2GFC)'
    SFP__4GFC_ = 'SFP (4GFC)'
    SFP___8GFC_ = 'SFP+ (8GFC)'
    SFP___16GFC_ = 'SFP+ (16GFC)'
    SFP28__32GFC_ = 'SFP28 (32GFC)'
    QSFP___64GFC_ = 'QSFP+ (64GFC)'
    QSFP28__128GFC_ = 'QSFP28 (128GFC)'
    SDR__2_Gbps_ = 'SDR (2 Gbps)'
    DDR__4_Gbps_ = 'DDR (4 Gbps)'
    QDR__8_Gbps_ = 'QDR (8 Gbps)'
    FDR10__10_Gbps_ = 'FDR10 (10 Gbps)'
    FDR__13_5_Gbps_ = 'FDR (13.5 Gbps)'
    EDR__25_Gbps_ = 'EDR (25 Gbps)'
    HDR__50_Gbps_ = 'HDR (50 Gbps)'
    NDR__100_Gbps_ = 'NDR (100 Gbps)'
    XDR__250_Gbps_ = 'XDR (250 Gbps)'
    T1__1_544_Mbps_ = 'T1 (1.544 Mbps)'
    E1__2_048_Mbps_ = 'E1 (2.048 Mbps)'
    T3__45_Mbps_ = 'T3 (45 Mbps)'
    E3__34_Mbps_ = 'E3 (34 Mbps)'
    xDSL = 'xDSL'
    Cisco_StackWise = 'Cisco StackWise'
    Cisco_StackWise_Plus = 'Cisco StackWise Plus'
    Cisco_FlexStack = 'Cisco FlexStack'
    Cisco_FlexStack_Plus = 'Cisco FlexStack Plus'
    Cisco_StackWise_80 = 'Cisco StackWise-80'
    Cisco_StackWise_160 = 'Cisco StackWise-160'
    Cisco_StackWise_320 = 'Cisco StackWise-320'
    Cisco_StackWise_480 = 'Cisco StackWise-480'
    Juniper_VCP = 'Juniper VCP'
    Extreme_SummitStack = 'Extreme SummitStack'
    Extreme_SummitStack_128 = 'Extreme SummitStack-128'
    Extreme_SummitStack_256 = 'Extreme SummitStack-256'
    Extreme_SummitStack_512 = 'Extreme SummitStack-512'
    Other = 'Other'


class Value18(Enum):
    virtual = 'virtual'
    bridge = 'bridge'
    lag = 'lag'
    field_100base_tx = '100base-tx'
    field_1000base_t = '1000base-t'
    field_2_5gbase_t = '2.5gbase-t'
    field_5gbase_t = '5gbase-t'
    field_10gbase_t = '10gbase-t'
    field_10gbase_cx4 = '10gbase-cx4'
    field_1000base_x_gbic = '1000base-x-gbic'
    field_1000base_x_sfp = '1000base-x-sfp'
    field_10gbase_x_sfpp = '10gbase-x-sfpp'
    field_10gbase_x_xfp = '10gbase-x-xfp'
    field_10gbase_x_xenpak = '10gbase-x-xenpak'
    field_10gbase_x_x2 = '10gbase-x-x2'
    field_25gbase_x_sfp28 = '25gbase-x-sfp28'
    field_50gbase_x_sfp56 = '50gbase-x-sfp56'
    field_40gbase_x_qsfpp = '40gbase-x-qsfpp'
    field_50gbase_x_sfp28 = '50gbase-x-sfp28'
    field_100gbase_x_cfp = '100gbase-x-cfp'
    field_100gbase_x_cfp2 = '100gbase-x-cfp2'
    field_200gbase_x_cfp2 = '200gbase-x-cfp2'
    field_100gbase_x_cfp4 = '100gbase-x-cfp4'
    field_100gbase_x_cpak = '100gbase-x-cpak'
    field_100gbase_x_qsfp28 = '100gbase-x-qsfp28'
    field_200gbase_x_qsfp56 = '200gbase-x-qsfp56'
    field_400gbase_x_qsfpdd = '400gbase-x-qsfpdd'
    field_400gbase_x_osfp = '400gbase-x-osfp'
    ieee802_11a = 'ieee802.11a'
    ieee802_11g = 'ieee802.11g'
    ieee802_11n = 'ieee802.11n'
    ieee802_11ac = 'ieee802.11ac'
    ieee802_11ad = 'ieee802.11ad'
    ieee802_11ax = 'ieee802.11ax'
    ieee802_15_1 = 'ieee802.15.1'
    gsm = 'gsm'
    cdma = 'cdma'
    lte = 'lte'
    sonet_oc3 = 'sonet-oc3'
    sonet_oc12 = 'sonet-oc12'
    sonet_oc48 = 'sonet-oc48'
    sonet_oc192 = 'sonet-oc192'
    sonet_oc768 = 'sonet-oc768'
    sonet_oc1920 = 'sonet-oc1920'
    sonet_oc3840 = 'sonet-oc3840'
    field_1gfc_sfp = '1gfc-sfp'
    field_2gfc_sfp = '2gfc-sfp'
    field_4gfc_sfp = '4gfc-sfp'
    field_8gfc_sfpp = '8gfc-sfpp'
    field_16gfc_sfpp = '16gfc-sfpp'
    field_32gfc_sfp28 = '32gfc-sfp28'
    field_64gfc_qsfpp = '64gfc-qsfpp'
    field_128gfc_qsfp28 = '128gfc-qsfp28'
    infiniband_sdr = 'infiniband-sdr'
    infiniband_ddr = 'infiniband-ddr'
    infiniband_qdr = 'infiniband-qdr'
    infiniband_fdr10 = 'infiniband-fdr10'
    infiniband_fdr = 'infiniband-fdr'
    infiniband_edr = 'infiniband-edr'
    infiniband_hdr = 'infiniband-hdr'
    infiniband_ndr = 'infiniband-ndr'
    infiniband_xdr = 'infiniband-xdr'
    t1 = 't1'
    e1 = 'e1'
    t3 = 't3'
    e3 = 'e3'
    xdsl = 'xdsl'
    cisco_stackwise = 'cisco-stackwise'
    cisco_stackwise_plus = 'cisco-stackwise-plus'
    cisco_flexstack = 'cisco-flexstack'
    cisco_flexstack_plus = 'cisco-flexstack-plus'
    cisco_stackwise_80 = 'cisco-stackwise-80'
    cisco_stackwise_160 = 'cisco-stackwise-160'
    cisco_stackwise_320 = 'cisco-stackwise-320'
    cisco_stackwise_480 = 'cisco-stackwise-480'
    juniper_vcp = 'juniper-vcp'
    extreme_summitstack = 'extreme-summitstack'
    extreme_summitstack_128 = 'extreme-summitstack-128'
    extreme_summitstack_256 = 'extreme-summitstack-256'
    extreme_summitstack_512 = 'extreme-summitstack-512'
    other = 'other'


class Type14(BaseModel):
    label: Label18
    value: Value18


class InterfaceTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: NestedDeviceType
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type14 = Field(..., title='Type')
    mgmt_only: Optional[bool] = Field(None, title='Management only')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type15(Enum):
    virtual = 'virtual'
    bridge = 'bridge'
    lag = 'lag'
    field_100base_tx = '100base-tx'
    field_1000base_t = '1000base-t'
    field_2_5gbase_t = '2.5gbase-t'
    field_5gbase_t = '5gbase-t'
    field_10gbase_t = '10gbase-t'
    field_10gbase_cx4 = '10gbase-cx4'
    field_1000base_x_gbic = '1000base-x-gbic'
    field_1000base_x_sfp = '1000base-x-sfp'
    field_10gbase_x_sfpp = '10gbase-x-sfpp'
    field_10gbase_x_xfp = '10gbase-x-xfp'
    field_10gbase_x_xenpak = '10gbase-x-xenpak'
    field_10gbase_x_x2 = '10gbase-x-x2'
    field_25gbase_x_sfp28 = '25gbase-x-sfp28'
    field_50gbase_x_sfp56 = '50gbase-x-sfp56'
    field_40gbase_x_qsfpp = '40gbase-x-qsfpp'
    field_50gbase_x_sfp28 = '50gbase-x-sfp28'
    field_100gbase_x_cfp = '100gbase-x-cfp'
    field_100gbase_x_cfp2 = '100gbase-x-cfp2'
    field_200gbase_x_cfp2 = '200gbase-x-cfp2'
    field_100gbase_x_cfp4 = '100gbase-x-cfp4'
    field_100gbase_x_cpak = '100gbase-x-cpak'
    field_100gbase_x_qsfp28 = '100gbase-x-qsfp28'
    field_200gbase_x_qsfp56 = '200gbase-x-qsfp56'
    field_400gbase_x_qsfpdd = '400gbase-x-qsfpdd'
    field_400gbase_x_osfp = '400gbase-x-osfp'
    ieee802_11a = 'ieee802.11a'
    ieee802_11g = 'ieee802.11g'
    ieee802_11n = 'ieee802.11n'
    ieee802_11ac = 'ieee802.11ac'
    ieee802_11ad = 'ieee802.11ad'
    ieee802_11ax = 'ieee802.11ax'
    ieee802_15_1 = 'ieee802.15.1'
    gsm = 'gsm'
    cdma = 'cdma'
    lte = 'lte'
    sonet_oc3 = 'sonet-oc3'
    sonet_oc12 = 'sonet-oc12'
    sonet_oc48 = 'sonet-oc48'
    sonet_oc192 = 'sonet-oc192'
    sonet_oc768 = 'sonet-oc768'
    sonet_oc1920 = 'sonet-oc1920'
    sonet_oc3840 = 'sonet-oc3840'
    field_1gfc_sfp = '1gfc-sfp'
    field_2gfc_sfp = '2gfc-sfp'
    field_4gfc_sfp = '4gfc-sfp'
    field_8gfc_sfpp = '8gfc-sfpp'
    field_16gfc_sfpp = '16gfc-sfpp'
    field_32gfc_sfp28 = '32gfc-sfp28'
    field_64gfc_qsfpp = '64gfc-qsfpp'
    field_128gfc_qsfp28 = '128gfc-qsfp28'
    infiniband_sdr = 'infiniband-sdr'
    infiniband_ddr = 'infiniband-ddr'
    infiniband_qdr = 'infiniband-qdr'
    infiniband_fdr10 = 'infiniband-fdr10'
    infiniband_fdr = 'infiniband-fdr'
    infiniband_edr = 'infiniband-edr'
    infiniband_hdr = 'infiniband-hdr'
    infiniband_ndr = 'infiniband-ndr'
    infiniband_xdr = 'infiniband-xdr'
    t1 = 't1'
    e1 = 'e1'
    t3 = 't3'
    e3 = 'e3'
    xdsl = 'xdsl'
    cisco_stackwise = 'cisco-stackwise'
    cisco_stackwise_plus = 'cisco-stackwise-plus'
    cisco_flexstack = 'cisco-flexstack'
    cisco_flexstack_plus = 'cisco-flexstack-plus'
    cisco_stackwise_80 = 'cisco-stackwise-80'
    cisco_stackwise_160 = 'cisco-stackwise-160'
    cisco_stackwise_320 = 'cisco-stackwise-320'
    cisco_stackwise_480 = 'cisco-stackwise-480'
    juniper_vcp = 'juniper-vcp'
    extreme_summitstack = 'extreme-summitstack'
    extreme_summitstack_128 = 'extreme-summitstack-128'
    extreme_summitstack_256 = 'extreme-summitstack-256'
    extreme_summitstack_512 = 'extreme-summitstack-512'
    other = 'other'


class WritableInterfaceTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: int = Field(..., title='Device type')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type15 = Field(..., title='Type')
    mgmt_only: Optional[bool] = Field(None, title='Management only')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedInterface(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: Optional[NestedDevice] = None
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    cable: Optional[int] = Field(None, title='Cable')
    _occupied: Optional[str] = Field(None, title='occupied')


class NestedVLAN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    vid: conint(ge=1, le=4094) = Field(..., title='ID')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')


class NestedWirelessLink(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    ssid: Optional[constr(max_length=32)] = Field(None, title='SSID')


class NestedWirelessLAN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    ssid: constr(min_length=1, max_length=32) = Field(..., title='SSID')


class Label19(Enum):
    Virtual = 'Virtual'
    Bridge = 'Bridge'
    Link_Aggregation_Group__LAG_ = 'Link Aggregation Group (LAG)'
    field_100BASE_TX__10_100ME_ = '100BASE-TX (10/100ME)'
    field_1000BASE_T__1GE_ = '1000BASE-T (1GE)'
    field_2_5GBASE_T__2_5GE_ = '2.5GBASE-T (2.5GE)'
    field_5GBASE_T__5GE_ = '5GBASE-T (5GE)'
    field_10GBASE_T__10GE_ = '10GBASE-T (10GE)'
    field_10GBASE_CX4__10GE_ = '10GBASE-CX4 (10GE)'
    GBIC__1GE_ = 'GBIC (1GE)'
    SFP__1GE_ = 'SFP (1GE)'
    SFP___10GE_ = 'SFP+ (10GE)'
    XFP__10GE_ = 'XFP (10GE)'
    XENPAK__10GE_ = 'XENPAK (10GE)'
    X2__10GE_ = 'X2 (10GE)'
    SFP28__25GE_ = 'SFP28 (25GE)'
    SFP56__50GE_ = 'SFP56 (50GE)'
    QSFP___40GE_ = 'QSFP+ (40GE)'
    QSFP28__50GE_ = 'QSFP28 (50GE)'
    CFP__100GE_ = 'CFP (100GE)'
    CFP2__100GE_ = 'CFP2 (100GE)'
    CFP2__200GE_ = 'CFP2 (200GE)'
    CFP4__100GE_ = 'CFP4 (100GE)'
    Cisco_CPAK__100GE_ = 'Cisco CPAK (100GE)'
    QSFP28__100GE_ = 'QSFP28 (100GE)'
    QSFP56__200GE_ = 'QSFP56 (200GE)'
    QSFP_DD__400GE_ = 'QSFP-DD (400GE)'
    OSFP__400GE_ = 'OSFP (400GE)'
    IEEE_802_11a = 'IEEE 802.11a'
    IEEE_802_11b_g = 'IEEE 802.11b/g'
    IEEE_802_11n = 'IEEE 802.11n'
    IEEE_802_11ac = 'IEEE 802.11ac'
    IEEE_802_11ad = 'IEEE 802.11ad'
    IEEE_802_11ax = 'IEEE 802.11ax'
    IEEE_802_15_1__Bluetooth_ = 'IEEE 802.15.1 (Bluetooth)'
    GSM = 'GSM'
    CDMA = 'CDMA'
    LTE = 'LTE'
    OC_3_STM_1 = 'OC-3/STM-1'
    OC_12_STM_4 = 'OC-12/STM-4'
    OC_48_STM_16 = 'OC-48/STM-16'
    OC_192_STM_64 = 'OC-192/STM-64'
    OC_768_STM_256 = 'OC-768/STM-256'
    OC_1920_STM_640 = 'OC-1920/STM-640'
    OC_3840_STM_1234 = 'OC-3840/STM-1234'
    SFP__1GFC_ = 'SFP (1GFC)'
    SFP__2GFC_ = 'SFP (2GFC)'
    SFP__4GFC_ = 'SFP (4GFC)'
    SFP___8GFC_ = 'SFP+ (8GFC)'
    SFP___16GFC_ = 'SFP+ (16GFC)'
    SFP28__32GFC_ = 'SFP28 (32GFC)'
    QSFP___64GFC_ = 'QSFP+ (64GFC)'
    QSFP28__128GFC_ = 'QSFP28 (128GFC)'
    SDR__2_Gbps_ = 'SDR (2 Gbps)'
    DDR__4_Gbps_ = 'DDR (4 Gbps)'
    QDR__8_Gbps_ = 'QDR (8 Gbps)'
    FDR10__10_Gbps_ = 'FDR10 (10 Gbps)'
    FDR__13_5_Gbps_ = 'FDR (13.5 Gbps)'
    EDR__25_Gbps_ = 'EDR (25 Gbps)'
    HDR__50_Gbps_ = 'HDR (50 Gbps)'
    NDR__100_Gbps_ = 'NDR (100 Gbps)'
    XDR__250_Gbps_ = 'XDR (250 Gbps)'
    T1__1_544_Mbps_ = 'T1 (1.544 Mbps)'
    E1__2_048_Mbps_ = 'E1 (2.048 Mbps)'
    T3__45_Mbps_ = 'T3 (45 Mbps)'
    E3__34_Mbps_ = 'E3 (34 Mbps)'
    xDSL = 'xDSL'
    Cisco_StackWise = 'Cisco StackWise'
    Cisco_StackWise_Plus = 'Cisco StackWise Plus'
    Cisco_FlexStack = 'Cisco FlexStack'
    Cisco_FlexStack_Plus = 'Cisco FlexStack Plus'
    Cisco_StackWise_80 = 'Cisco StackWise-80'
    Cisco_StackWise_160 = 'Cisco StackWise-160'
    Cisco_StackWise_320 = 'Cisco StackWise-320'
    Cisco_StackWise_480 = 'Cisco StackWise-480'
    Juniper_VCP = 'Juniper VCP'
    Extreme_SummitStack = 'Extreme SummitStack'
    Extreme_SummitStack_128 = 'Extreme SummitStack-128'
    Extreme_SummitStack_256 = 'Extreme SummitStack-256'
    Extreme_SummitStack_512 = 'Extreme SummitStack-512'
    Other = 'Other'


class Value19(Enum):
    virtual = 'virtual'
    bridge = 'bridge'
    lag = 'lag'
    field_100base_tx = '100base-tx'
    field_1000base_t = '1000base-t'
    field_2_5gbase_t = '2.5gbase-t'
    field_5gbase_t = '5gbase-t'
    field_10gbase_t = '10gbase-t'
    field_10gbase_cx4 = '10gbase-cx4'
    field_1000base_x_gbic = '1000base-x-gbic'
    field_1000base_x_sfp = '1000base-x-sfp'
    field_10gbase_x_sfpp = '10gbase-x-sfpp'
    field_10gbase_x_xfp = '10gbase-x-xfp'
    field_10gbase_x_xenpak = '10gbase-x-xenpak'
    field_10gbase_x_x2 = '10gbase-x-x2'
    field_25gbase_x_sfp28 = '25gbase-x-sfp28'
    field_50gbase_x_sfp56 = '50gbase-x-sfp56'
    field_40gbase_x_qsfpp = '40gbase-x-qsfpp'
    field_50gbase_x_sfp28 = '50gbase-x-sfp28'
    field_100gbase_x_cfp = '100gbase-x-cfp'
    field_100gbase_x_cfp2 = '100gbase-x-cfp2'
    field_200gbase_x_cfp2 = '200gbase-x-cfp2'
    field_100gbase_x_cfp4 = '100gbase-x-cfp4'
    field_100gbase_x_cpak = '100gbase-x-cpak'
    field_100gbase_x_qsfp28 = '100gbase-x-qsfp28'
    field_200gbase_x_qsfp56 = '200gbase-x-qsfp56'
    field_400gbase_x_qsfpdd = '400gbase-x-qsfpdd'
    field_400gbase_x_osfp = '400gbase-x-osfp'
    ieee802_11a = 'ieee802.11a'
    ieee802_11g = 'ieee802.11g'
    ieee802_11n = 'ieee802.11n'
    ieee802_11ac = 'ieee802.11ac'
    ieee802_11ad = 'ieee802.11ad'
    ieee802_11ax = 'ieee802.11ax'
    ieee802_15_1 = 'ieee802.15.1'
    gsm = 'gsm'
    cdma = 'cdma'
    lte = 'lte'
    sonet_oc3 = 'sonet-oc3'
    sonet_oc12 = 'sonet-oc12'
    sonet_oc48 = 'sonet-oc48'
    sonet_oc192 = 'sonet-oc192'
    sonet_oc768 = 'sonet-oc768'
    sonet_oc1920 = 'sonet-oc1920'
    sonet_oc3840 = 'sonet-oc3840'
    field_1gfc_sfp = '1gfc-sfp'
    field_2gfc_sfp = '2gfc-sfp'
    field_4gfc_sfp = '4gfc-sfp'
    field_8gfc_sfpp = '8gfc-sfpp'
    field_16gfc_sfpp = '16gfc-sfpp'
    field_32gfc_sfp28 = '32gfc-sfp28'
    field_64gfc_qsfpp = '64gfc-qsfpp'
    field_128gfc_qsfp28 = '128gfc-qsfp28'
    infiniband_sdr = 'infiniband-sdr'
    infiniband_ddr = 'infiniband-ddr'
    infiniband_qdr = 'infiniband-qdr'
    infiniband_fdr10 = 'infiniband-fdr10'
    infiniband_fdr = 'infiniband-fdr'
    infiniband_edr = 'infiniband-edr'
    infiniband_hdr = 'infiniband-hdr'
    infiniband_ndr = 'infiniband-ndr'
    infiniband_xdr = 'infiniband-xdr'
    t1 = 't1'
    e1 = 'e1'
    t3 = 't3'
    e3 = 'e3'
    xdsl = 'xdsl'
    cisco_stackwise = 'cisco-stackwise'
    cisco_stackwise_plus = 'cisco-stackwise-plus'
    cisco_flexstack = 'cisco-flexstack'
    cisco_flexstack_plus = 'cisco-flexstack-plus'
    cisco_stackwise_80 = 'cisco-stackwise-80'
    cisco_stackwise_160 = 'cisco-stackwise-160'
    cisco_stackwise_320 = 'cisco-stackwise-320'
    cisco_stackwise_480 = 'cisco-stackwise-480'
    juniper_vcp = 'juniper-vcp'
    extreme_summitstack = 'extreme-summitstack'
    extreme_summitstack_128 = 'extreme-summitstack-128'
    extreme_summitstack_256 = 'extreme-summitstack-256'
    extreme_summitstack_512 = 'extreme-summitstack-512'
    other = 'other'


class Type16(BaseModel):
    label: Label19
    value: Value19


class Label20(Enum):
    Access = 'Access'
    Tagged = 'Tagged'
    Tagged__All_ = 'Tagged (All)'


class Value20(Enum):
    access = 'access'
    tagged = 'tagged'
    tagged_all = 'tagged-all'


class Mode(BaseModel):
    label: Label20
    value: Value20


class Label21(Enum):
    Access_point = 'Access point'
    Station = 'Station'


class Value21(Enum):
    ap = 'ap'
    station = 'station'


class RfRole(BaseModel):
    label: Label21
    value: Value21


class Label22(Enum):
    field_1__2412_MHz_ = '1 (2412 MHz)'
    field_2__2417_MHz_ = '2 (2417 MHz)'
    field_3__2422_MHz_ = '3 (2422 MHz)'
    field_4__2427_MHz_ = '4 (2427 MHz)'
    field_5__2432_MHz_ = '5 (2432 MHz)'
    field_6__2437_MHz_ = '6 (2437 MHz)'
    field_7__2442_MHz_ = '7 (2442 MHz)'
    field_8__2447_MHz_ = '8 (2447 MHz)'
    field_9__2452_MHz_ = '9 (2452 MHz)'
    field_10__2457_MHz_ = '10 (2457 MHz)'
    field_11__2462_MHz_ = '11 (2462 MHz)'
    field_12__2467_MHz_ = '12 (2467 MHz)'
    field_13__2472_MHz_ = '13 (2472 MHz)'
    field_32__5160_20_MHz_ = '32 (5160/20 MHz)'
    field_34__5170_40_MHz_ = '34 (5170/40 MHz)'
    field_36__5180_20_MHz_ = '36 (5180/20 MHz)'
    field_38__5190_40_MHz_ = '38 (5190/40 MHz)'
    field_40__5200_20_MHz_ = '40 (5200/20 MHz)'
    field_42__5210_80_MHz_ = '42 (5210/80 MHz)'
    field_44__5220_20_MHz_ = '44 (5220/20 MHz)'
    field_46__5230_40_MHz_ = '46 (5230/40 MHz)'
    field_48__5240_20_MHz_ = '48 (5240/20 MHz)'
    field_50__5250_160_MHz_ = '50 (5250/160 MHz)'
    field_52__5260_20_MHz_ = '52 (5260/20 MHz)'
    field_54__5270_40_MHz_ = '54 (5270/40 MHz)'
    field_56__5280_20_MHz_ = '56 (5280/20 MHz)'
    field_58__5290_80_MHz_ = '58 (5290/80 MHz)'
    field_60__5300_20_MHz_ = '60 (5300/20 MHz)'
    field_62__5310_40_MHz_ = '62 (5310/40 MHz)'
    field_64__5320_20_MHz_ = '64 (5320/20 MHz)'
    field_100__5500_20_MHz_ = '100 (5500/20 MHz)'
    field_102__5510_40_MHz_ = '102 (5510/40 MHz)'
    field_104__5520_20_MHz_ = '104 (5520/20 MHz)'
    field_106__5530_80_MHz_ = '106 (5530/80 MHz)'
    field_108__5540_20_MHz_ = '108 (5540/20 MHz)'
    field_110__5550_40_MHz_ = '110 (5550/40 MHz)'
    field_112__5560_20_MHz_ = '112 (5560/20 MHz)'
    field_114__5570_160_MHz_ = '114 (5570/160 MHz)'
    field_116__5580_20_MHz_ = '116 (5580/20 MHz)'
    field_118__5590_40_MHz_ = '118 (5590/40 MHz)'
    field_120__5600_20_MHz_ = '120 (5600/20 MHz)'
    field_122__5610_80_MHz_ = '122 (5610/80 MHz)'
    field_124__5620_20_MHz_ = '124 (5620/20 MHz)'
    field_126__5630_40_MHz_ = '126 (5630/40 MHz)'
    field_128__5640_20_MHz_ = '128 (5640/20 MHz)'
    field_132__5660_20_MHz_ = '132 (5660/20 MHz)'
    field_134__5670_40_MHz_ = '134 (5670/40 MHz)'
    field_136__5680_20_MHz_ = '136 (5680/20 MHz)'
    field_138__5690_80_MHz_ = '138 (5690/80 MHz)'
    field_140__5700_20_MHz_ = '140 (5700/20 MHz)'
    field_142__5710_40_MHz_ = '142 (5710/40 MHz)'
    field_144__5720_20_MHz_ = '144 (5720/20 MHz)'
    field_149__5745_20_MHz_ = '149 (5745/20 MHz)'
    field_151__5755_40_MHz_ = '151 (5755/40 MHz)'
    field_153__5765_20_MHz_ = '153 (5765/20 MHz)'
    field_155__5775_80_MHz_ = '155 (5775/80 MHz)'
    field_157__5785_20_MHz_ = '157 (5785/20 MHz)'
    field_159__5795_40_MHz_ = '159 (5795/40 MHz)'
    field_161__5805_20_MHz_ = '161 (5805/20 MHz)'
    field_163__5815_160_MHz_ = '163 (5815/160 MHz)'
    field_165__5825_20_MHz_ = '165 (5825/20 MHz)'
    field_167__5835_40_MHz_ = '167 (5835/40 MHz)'
    field_169__5845_20_MHz_ = '169 (5845/20 MHz)'
    field_171__5855_80_MHz_ = '171 (5855/80 MHz)'
    field_173__5865_20_MHz_ = '173 (5865/20 MHz)'
    field_175__5875_40_MHz_ = '175 (5875/40 MHz)'
    field_177__5885_20_MHz_ = '177 (5885/20 MHz)'
    field_1__5955_20_MHz_ = '1 (5955/20 MHz)'
    field_3__5965_40_MHz_ = '3 (5965/40 MHz)'
    field_5__5975_20_MHz_ = '5 (5975/20 MHz)'
    field_7__5985_80_MHz_ = '7 (5985/80 MHz)'
    field_9__5995_20_MHz_ = '9 (5995/20 MHz)'
    field_11__6005_40_MHz_ = '11 (6005/40 MHz)'
    field_13__6015_20_MHz_ = '13 (6015/20 MHz)'
    field_15__6025_160_MHz_ = '15 (6025/160 MHz)'
    field_17__6035_20_MHz_ = '17 (6035/20 MHz)'
    field_19__6045_40_MHz_ = '19 (6045/40 MHz)'
    field_21__6055_20_MHz_ = '21 (6055/20 MHz)'
    field_23__6065_80_MHz_ = '23 (6065/80 MHz)'
    field_25__6075_20_MHz_ = '25 (6075/20 MHz)'
    field_27__6085_40_MHz_ = '27 (6085/40 MHz)'
    field_29__6095_20_MHz_ = '29 (6095/20 MHz)'
    field_31__6105_320_MHz_ = '31 (6105/320 MHz)'
    field_33__6115_20_MHz_ = '33 (6115/20 MHz)'
    field_35__6125_40_MHz_ = '35 (6125/40 MHz)'
    field_37__6135_20_MHz_ = '37 (6135/20 MHz)'
    field_39__6145_80_MHz_ = '39 (6145/80 MHz)'
    field_41__6155_20_MHz_ = '41 (6155/20 MHz)'
    field_43__6165_40_MHz_ = '43 (6165/40 MHz)'
    field_45__6175_20_MHz_ = '45 (6175/20 MHz)'
    field_47__6185_160_MHz_ = '47 (6185/160 MHz)'
    field_49__6195_20_MHz_ = '49 (6195/20 MHz)'
    field_51__6205_40_MHz_ = '51 (6205/40 MHz)'
    field_53__6215_20_MHz_ = '53 (6215/20 MHz)'
    field_55__6225_80_MHz_ = '55 (6225/80 MHz)'
    field_57__6235_20_MHz_ = '57 (6235/20 MHz)'
    field_59__6245_40_MHz_ = '59 (6245/40 MHz)'
    field_61__6255_20_MHz_ = '61 (6255/20 MHz)'
    field_65__6275_20_MHz_ = '65 (6275/20 MHz)'
    field_67__6285_40_MHz_ = '67 (6285/40 MHz)'
    field_69__6295_20_MHz_ = '69 (6295/20 MHz)'
    field_71__6305_80_MHz_ = '71 (6305/80 MHz)'
    field_73__6315_20_MHz_ = '73 (6315/20 MHz)'
    field_75__6325_40_MHz_ = '75 (6325/40 MHz)'
    field_77__6335_20_MHz_ = '77 (6335/20 MHz)'
    field_79__6345_160_MHz_ = '79 (6345/160 MHz)'
    field_81__6355_20_MHz_ = '81 (6355/20 MHz)'
    field_83__6365_40_MHz_ = '83 (6365/40 MHz)'
    field_85__6375_20_MHz_ = '85 (6375/20 MHz)'
    field_87__6385_80_MHz_ = '87 (6385/80 MHz)'
    field_89__6395_20_MHz_ = '89 (6395/20 MHz)'
    field_91__6405_40_MHz_ = '91 (6405/40 MHz)'
    field_93__6415_20_MHz_ = '93 (6415/20 MHz)'
    field_95__6425_320_MHz_ = '95 (6425/320 MHz)'
    field_97__6435_20_MHz_ = '97 (6435/20 MHz)'
    field_99__6445_40_MHz_ = '99 (6445/40 MHz)'
    field_101__6455_20_MHz_ = '101 (6455/20 MHz)'
    field_103__6465_80_MHz_ = '103 (6465/80 MHz)'
    field_105__6475_20_MHz_ = '105 (6475/20 MHz)'
    field_107__6485_40_MHz_ = '107 (6485/40 MHz)'
    field_109__6495_20_MHz_ = '109 (6495/20 MHz)'
    field_111__6505_160_MHz_ = '111 (6505/160 MHz)'
    field_113__6515_20_MHz_ = '113 (6515/20 MHz)'
    field_115__6525_40_MHz_ = '115 (6525/40 MHz)'
    field_117__6535_20_MHz_ = '117 (6535/20 MHz)'
    field_119__6545_80_MHz_ = '119 (6545/80 MHz)'
    field_121__6555_20_MHz_ = '121 (6555/20 MHz)'
    field_123__6565_40_MHz_ = '123 (6565/40 MHz)'
    field_125__6575_20_MHz_ = '125 (6575/20 MHz)'
    field_129__6595_20_MHz_ = '129 (6595/20 MHz)'
    field_131__6605_40_MHz_ = '131 (6605/40 MHz)'
    field_133__6615_20_MHz_ = '133 (6615/20 MHz)'
    field_135__6625_80_MHz_ = '135 (6625/80 MHz)'
    field_137__6635_20_MHz_ = '137 (6635/20 MHz)'
    field_139__6645_40_MHz_ = '139 (6645/40 MHz)'
    field_141__6655_20_MHz_ = '141 (6655/20 MHz)'
    field_143__6665_160_MHz_ = '143 (6665/160 MHz)'
    field_145__6675_20_MHz_ = '145 (6675/20 MHz)'
    field_147__6685_40_MHz_ = '147 (6685/40 MHz)'
    field_149__6695_20_MHz_ = '149 (6695/20 MHz)'
    field_151__6705_80_MHz_ = '151 (6705/80 MHz)'
    field_153__6715_20_MHz_ = '153 (6715/20 MHz)'
    field_155__6725_40_MHz_ = '155 (6725/40 MHz)'
    field_157__6735_20_MHz_ = '157 (6735/20 MHz)'
    field_159__6745_320_MHz_ = '159 (6745/320 MHz)'
    field_161__6755_20_MHz_ = '161 (6755/20 MHz)'
    field_163__6765_40_MHz_ = '163 (6765/40 MHz)'
    field_165__6775_20_MHz_ = '165 (6775/20 MHz)'
    field_167__6785_80_MHz_ = '167 (6785/80 MHz)'
    field_169__6795_20_MHz_ = '169 (6795/20 MHz)'
    field_171__6805_40_MHz_ = '171 (6805/40 MHz)'
    field_173__6815_20_MHz_ = '173 (6815/20 MHz)'
    field_175__6825_160_MHz_ = '175 (6825/160 MHz)'
    field_177__6835_20_MHz_ = '177 (6835/20 MHz)'
    field_179__6845_40_MHz_ = '179 (6845/40 MHz)'
    field_181__6855_20_MHz_ = '181 (6855/20 MHz)'
    field_183__6865_80_MHz_ = '183 (6865/80 MHz)'
    field_185__6875_20_MHz_ = '185 (6875/20 MHz)'
    field_187__6885_40_MHz_ = '187 (6885/40 MHz)'
    field_189__6895_20_MHz_ = '189 (6895/20 MHz)'
    field_193__6915_20_MHz_ = '193 (6915/20 MHz)'
    field_195__6925_40_MHz_ = '195 (6925/40 MHz)'
    field_197__6935_20_MHz_ = '197 (6935/20 MHz)'
    field_199__6945_80_MHz_ = '199 (6945/80 MHz)'
    field_201__6955_20_MHz_ = '201 (6955/20 MHz)'
    field_203__6965_40_MHz_ = '203 (6965/40 MHz)'
    field_205__6975_20_MHz_ = '205 (6975/20 MHz)'
    field_207__6985_160_MHz_ = '207 (6985/160 MHz)'
    field_209__6995_20_MHz_ = '209 (6995/20 MHz)'
    field_211__7005_40_MHz_ = '211 (7005/40 MHz)'
    field_213__7015_20_MHz_ = '213 (7015/20 MHz)'
    field_215__7025_80_MHz_ = '215 (7025/80 MHz)'
    field_217__7035_20_MHz_ = '217 (7035/20 MHz)'
    field_219__7045_40_MHz_ = '219 (7045/40 MHz)'
    field_221__7055_20_MHz_ = '221 (7055/20 MHz)'
    field_225__7075_20_MHz_ = '225 (7075/20 MHz)'
    field_227__7085_40_MHz_ = '227 (7085/40 MHz)'
    field_229__7095_20_MHz_ = '229 (7095/20 MHz)'
    field_233__7115_20_MHz_ = '233 (7115/20 MHz)'
    field_1__58_32_2_16_GHz_ = '1 (58.32/2.16 GHz)'
    field_2__60_48_2_16_GHz_ = '2 (60.48/2.16 GHz)'
    field_3__62_64_2_16_GHz_ = '3 (62.64/2.16 GHz)'
    field_4__64_80_2_16_GHz_ = '4 (64.80/2.16 GHz)'
    field_5__66_96_2_16_GHz_ = '5 (66.96/2.16 GHz)'
    field_6__69_12_2_16_GHz_ = '6 (69.12/2.16 GHz)'
    field_9__59_40_4_32_GHz_ = '9 (59.40/4.32 GHz)'
    field_10__61_56_4_32_GHz_ = '10 (61.56/4.32 GHz)'
    field_11__63_72_4_32_GHz_ = '11 (63.72/4.32 GHz)'
    field_12__65_88_4_32_GHz_ = '12 (65.88/4.32 GHz)'
    field_13__68_04_4_32_GHz_ = '13 (68.04/4.32 GHz)'
    field_17__60_48_6_48_GHz_ = '17 (60.48/6.48 GHz)'
    field_18__62_64_6_48_GHz_ = '18 (62.64/6.48 GHz)'
    field_19__64_80_6_48_GHz_ = '19 (64.80/6.48 GHz)'
    field_20__66_96_6_48_GHz_ = '20 (66.96/6.48 GHz)'
    field_25__61_56_8_64_GHz_ = '25 (61.56/8.64 GHz)'
    field_26__63_72_8_64_GHz_ = '26 (63.72/8.64 GHz)'
    field_27__65_88_8_64_GHz_ = '27 (65.88/8.64 GHz)'


class Value22(Enum):
    field_2_4g_1_2412_22 = '2.4g-1-2412-22'
    field_2_4g_2_2417_22 = '2.4g-2-2417-22'
    field_2_4g_3_2422_22 = '2.4g-3-2422-22'
    field_2_4g_4_2427_22 = '2.4g-4-2427-22'
    field_2_4g_5_2432_22 = '2.4g-5-2432-22'
    field_2_4g_6_2437_22 = '2.4g-6-2437-22'
    field_2_4g_7_2442_22 = '2.4g-7-2442-22'
    field_2_4g_8_2447_22 = '2.4g-8-2447-22'
    field_2_4g_9_2452_22 = '2.4g-9-2452-22'
    field_2_4g_10_2457_22 = '2.4g-10-2457-22'
    field_2_4g_11_2462_22 = '2.4g-11-2462-22'
    field_2_4g_12_2467_22 = '2.4g-12-2467-22'
    field_2_4g_13_2472_22 = '2.4g-13-2472-22'
    field_5g_32_5160_20 = '5g-32-5160-20'
    field_5g_34_5170_40 = '5g-34-5170-40'
    field_5g_36_5180_20 = '5g-36-5180-20'
    field_5g_38_5190_40 = '5g-38-5190-40'
    field_5g_40_5200_20 = '5g-40-5200-20'
    field_5g_42_5210_80 = '5g-42-5210-80'
    field_5g_44_5220_20 = '5g-44-5220-20'
    field_5g_46_5230_40 = '5g-46-5230-40'
    field_5g_48_5240_20 = '5g-48-5240-20'
    field_5g_50_5250_160 = '5g-50-5250-160'
    field_5g_52_5260_20 = '5g-52-5260-20'
    field_5g_54_5270_40 = '5g-54-5270-40'
    field_5g_56_5280_20 = '5g-56-5280-20'
    field_5g_58_5290_80 = '5g-58-5290-80'
    field_5g_60_5300_20 = '5g-60-5300-20'
    field_5g_62_5310_40 = '5g-62-5310-40'
    field_5g_64_5320_20 = '5g-64-5320-20'
    field_5g_100_5500_20 = '5g-100-5500-20'
    field_5g_102_5510_40 = '5g-102-5510-40'
    field_5g_104_5520_20 = '5g-104-5520-20'
    field_5g_106_5530_80 = '5g-106-5530-80'
    field_5g_108_5540_20 = '5g-108-5540-20'
    field_5g_110_5550_40 = '5g-110-5550-40'
    field_5g_112_5560_20 = '5g-112-5560-20'
    field_5g_114_5570_160 = '5g-114-5570-160'
    field_5g_116_5580_20 = '5g-116-5580-20'
    field_5g_118_5590_40 = '5g-118-5590-40'
    field_5g_120_5600_20 = '5g-120-5600-20'
    field_5g_122_5610_80 = '5g-122-5610-80'
    field_5g_124_5620_20 = '5g-124-5620-20'
    field_5g_126_5630_40 = '5g-126-5630-40'
    field_5g_128_5640_20 = '5g-128-5640-20'
    field_5g_132_5660_20 = '5g-132-5660-20'
    field_5g_134_5670_40 = '5g-134-5670-40'
    field_5g_136_5680_20 = '5g-136-5680-20'
    field_5g_138_5690_80 = '5g-138-5690-80'
    field_5g_140_5700_20 = '5g-140-5700-20'
    field_5g_142_5710_40 = '5g-142-5710-40'
    field_5g_144_5720_20 = '5g-144-5720-20'
    field_5g_149_5745_20 = '5g-149-5745-20'
    field_5g_151_5755_40 = '5g-151-5755-40'
    field_5g_153_5765_20 = '5g-153-5765-20'
    field_5g_155_5775_80 = '5g-155-5775-80'
    field_5g_157_5785_20 = '5g-157-5785-20'
    field_5g_159_5795_40 = '5g-159-5795-40'
    field_5g_161_5805_20 = '5g-161-5805-20'
    field_5g_163_5815_160 = '5g-163-5815-160'
    field_5g_165_5825_20 = '5g-165-5825-20'
    field_5g_167_5835_40 = '5g-167-5835-40'
    field_5g_169_5845_20 = '5g-169-5845-20'
    field_5g_171_5855_80 = '5g-171-5855-80'
    field_5g_173_5865_20 = '5g-173-5865-20'
    field_5g_175_5875_40 = '5g-175-5875-40'
    field_5g_177_5885_20 = '5g-177-5885-20'
    field_6g_1_5955_20 = '6g-1-5955-20'
    field_6g_3_5965_40 = '6g-3-5965-40'
    field_6g_5_5975_20 = '6g-5-5975-20'
    field_6g_7_5985_80 = '6g-7-5985-80'
    field_6g_9_5995_20 = '6g-9-5995-20'
    field_6g_11_6005_40 = '6g-11-6005-40'
    field_6g_13_6015_20 = '6g-13-6015-20'
    field_6g_15_6025_160 = '6g-15-6025-160'
    field_6g_17_6035_20 = '6g-17-6035-20'
    field_6g_19_6045_40 = '6g-19-6045-40'
    field_6g_21_6055_20 = '6g-21-6055-20'
    field_6g_23_6065_80 = '6g-23-6065-80'
    field_6g_25_6075_20 = '6g-25-6075-20'
    field_6g_27_6085_40 = '6g-27-6085-40'
    field_6g_29_6095_20 = '6g-29-6095-20'
    field_6g_31_6105_320 = '6g-31-6105-320'
    field_6g_33_6115_20 = '6g-33-6115-20'
    field_6g_35_6125_40 = '6g-35-6125-40'
    field_6g_37_6135_20 = '6g-37-6135-20'
    field_6g_39_6145_80 = '6g-39-6145-80'
    field_6g_41_6155_20 = '6g-41-6155-20'
    field_6g_43_6165_40 = '6g-43-6165-40'
    field_6g_45_6175_20 = '6g-45-6175-20'
    field_6g_47_6185_160 = '6g-47-6185-160'
    field_6g_49_6195_20 = '6g-49-6195-20'
    field_6g_51_6205_40 = '6g-51-6205-40'
    field_6g_53_6215_20 = '6g-53-6215-20'
    field_6g_55_6225_80 = '6g-55-6225-80'
    field_6g_57_6235_20 = '6g-57-6235-20'
    field_6g_59_6245_40 = '6g-59-6245-40'
    field_6g_61_6255_20 = '6g-61-6255-20'
    field_6g_65_6275_20 = '6g-65-6275-20'
    field_6g_67_6285_40 = '6g-67-6285-40'
    field_6g_69_6295_20 = '6g-69-6295-20'
    field_6g_71_6305_80 = '6g-71-6305-80'
    field_6g_73_6315_20 = '6g-73-6315-20'
    field_6g_75_6325_40 = '6g-75-6325-40'
    field_6g_77_6335_20 = '6g-77-6335-20'
    field_6g_79_6345_160 = '6g-79-6345-160'
    field_6g_81_6355_20 = '6g-81-6355-20'
    field_6g_83_6365_40 = '6g-83-6365-40'
    field_6g_85_6375_20 = '6g-85-6375-20'
    field_6g_87_6385_80 = '6g-87-6385-80'
    field_6g_89_6395_20 = '6g-89-6395-20'
    field_6g_91_6405_40 = '6g-91-6405-40'
    field_6g_93_6415_20 = '6g-93-6415-20'
    field_6g_95_6425_320 = '6g-95-6425-320'
    field_6g_97_6435_20 = '6g-97-6435-20'
    field_6g_99_6445_40 = '6g-99-6445-40'
    field_6g_101_6455_20 = '6g-101-6455-20'
    field_6g_103_6465_80 = '6g-103-6465-80'
    field_6g_105_6475_20 = '6g-105-6475-20'
    field_6g_107_6485_40 = '6g-107-6485-40'
    field_6g_109_6495_20 = '6g-109-6495-20'
    field_6g_111_6505_160 = '6g-111-6505-160'
    field_6g_113_6515_20 = '6g-113-6515-20'
    field_6g_115_6525_40 = '6g-115-6525-40'
    field_6g_117_6535_20 = '6g-117-6535-20'
    field_6g_119_6545_80 = '6g-119-6545-80'
    field_6g_121_6555_20 = '6g-121-6555-20'
    field_6g_123_6565_40 = '6g-123-6565-40'
    field_6g_125_6575_20 = '6g-125-6575-20'
    field_6g_129_6595_20 = '6g-129-6595-20'
    field_6g_131_6605_40 = '6g-131-6605-40'
    field_6g_133_6615_20 = '6g-133-6615-20'
    field_6g_135_6625_80 = '6g-135-6625-80'
    field_6g_137_6635_20 = '6g-137-6635-20'
    field_6g_139_6645_40 = '6g-139-6645-40'
    field_6g_141_6655_20 = '6g-141-6655-20'
    field_6g_143_6665_160 = '6g-143-6665-160'
    field_6g_145_6675_20 = '6g-145-6675-20'
    field_6g_147_6685_40 = '6g-147-6685-40'
    field_6g_149_6695_20 = '6g-149-6695-20'
    field_6g_151_6705_80 = '6g-151-6705-80'
    field_6g_153_6715_20 = '6g-153-6715-20'
    field_6g_155_6725_40 = '6g-155-6725-40'
    field_6g_157_6735_20 = '6g-157-6735-20'
    field_6g_159_6745_320 = '6g-159-6745-320'
    field_6g_161_6755_20 = '6g-161-6755-20'
    field_6g_163_6765_40 = '6g-163-6765-40'
    field_6g_165_6775_20 = '6g-165-6775-20'
    field_6g_167_6785_80 = '6g-167-6785-80'
    field_6g_169_6795_20 = '6g-169-6795-20'
    field_6g_171_6805_40 = '6g-171-6805-40'
    field_6g_173_6815_20 = '6g-173-6815-20'
    field_6g_175_6825_160 = '6g-175-6825-160'
    field_6g_177_6835_20 = '6g-177-6835-20'
    field_6g_179_6845_40 = '6g-179-6845-40'
    field_6g_181_6855_20 = '6g-181-6855-20'
    field_6g_183_6865_80 = '6g-183-6865-80'
    field_6g_185_6875_20 = '6g-185-6875-20'
    field_6g_187_6885_40 = '6g-187-6885-40'
    field_6g_189_6895_20 = '6g-189-6895-20'
    field_6g_193_6915_20 = '6g-193-6915-20'
    field_6g_195_6925_40 = '6g-195-6925-40'
    field_6g_197_6935_20 = '6g-197-6935-20'
    field_6g_199_6945_80 = '6g-199-6945-80'
    field_6g_201_6955_20 = '6g-201-6955-20'
    field_6g_203_6965_40 = '6g-203-6965-40'
    field_6g_205_6975_20 = '6g-205-6975-20'
    field_6g_207_6985_160 = '6g-207-6985-160'
    field_6g_209_6995_20 = '6g-209-6995-20'
    field_6g_211_7005_40 = '6g-211-7005-40'
    field_6g_213_7015_20 = '6g-213-7015-20'
    field_6g_215_7025_80 = '6g-215-7025-80'
    field_6g_217_7035_20 = '6g-217-7035-20'
    field_6g_219_7045_40 = '6g-219-7045-40'
    field_6g_221_7055_20 = '6g-221-7055-20'
    field_6g_225_7075_20 = '6g-225-7075-20'
    field_6g_227_7085_40 = '6g-227-7085-40'
    field_6g_229_7095_20 = '6g-229-7095-20'
    field_6g_233_7115_20 = '6g-233-7115-20'
    field_60g_1_58320_2160 = '60g-1-58320-2160'
    field_60g_2_60480_2160 = '60g-2-60480-2160'
    field_60g_3_62640_2160 = '60g-3-62640-2160'
    field_60g_4_64800_2160 = '60g-4-64800-2160'
    field_60g_5_66960_2160 = '60g-5-66960-2160'
    field_60g_6_69120_2160 = '60g-6-69120-2160'
    field_60g_9_59400_4320 = '60g-9-59400-4320'
    field_60g_10_61560_4320 = '60g-10-61560-4320'
    field_60g_11_63720_4320 = '60g-11-63720-4320'
    field_60g_12_65880_4320 = '60g-12-65880-4320'
    field_60g_13_68040_4320 = '60g-13-68040-4320'
    field_60g_17_60480_6480 = '60g-17-60480-6480'
    field_60g_18_62640_6480 = '60g-18-62640-6480'
    field_60g_19_64800_6480 = '60g-19-64800-6480'
    field_60g_20_66960_6480 = '60g-20-66960-6480'
    field_60g_25_61560_6480 = '60g-25-61560-6480'
    field_60g_26_63720_6480 = '60g-26-63720-6480'
    field_60g_27_65880_6480 = '60g-27-65880-6480'


class RfChannel(BaseModel):
    label: Label22
    value: Value22


class Interface(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type16 = Field(..., title='Type')
    enabled: Optional[bool] = Field(None, title='Enabled')
    parent: Optional[NestedInterface] = None
    bridge: Optional[NestedInterface] = None
    lag: Optional[NestedInterface] = None
    mtu: Optional[conint(ge=1, le=65536)] = Field(None, title='MTU')
    mac_address: Optional[str] = Field(None, title='MAC Address')
    wwn: Optional[str] = Field(None, description='64-bit World Wide Name', title='WWN')
    mgmt_only: Optional[bool] = Field(
        None,
        description='This interface is used only for out-of-band management',
        title='Management only',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mode: Optional[Mode] = Field(None, title='Mode')
    rf_role: Optional[RfRole] = Field(None, title='Rf role')
    rf_channel: Optional[RfChannel] = Field(None, title='Rf channel')
    rf_channel_frequency: Optional[Decimal] = Field(
        None, title='Channel frequency (MHz)'
    )
    rf_channel_width: Optional[Decimal] = Field(None, title='Channel width (MHz)')
    tx_power: Optional[conint(ge=0, le=127)] = Field(None, title='Transmit power (dBm)')
    untagged_vlan: Optional[NestedVLAN] = None
    tagged_vlans: Optional[List[NestedVLAN]] = None
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    wireless_link: Optional[NestedWirelessLink] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    wireless_lans: Optional[List[NestedWirelessLAN]] = None
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    count_ipaddresses: Optional[int] = Field(None, title='Count ipaddresses')
    count_fhrp_groups: Optional[int] = Field(None, title='Count fhrp groups')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Type17(Enum):
    virtual = 'virtual'
    bridge = 'bridge'
    lag = 'lag'
    field_100base_tx = '100base-tx'
    field_1000base_t = '1000base-t'
    field_2_5gbase_t = '2.5gbase-t'
    field_5gbase_t = '5gbase-t'
    field_10gbase_t = '10gbase-t'
    field_10gbase_cx4 = '10gbase-cx4'
    field_1000base_x_gbic = '1000base-x-gbic'
    field_1000base_x_sfp = '1000base-x-sfp'
    field_10gbase_x_sfpp = '10gbase-x-sfpp'
    field_10gbase_x_xfp = '10gbase-x-xfp'
    field_10gbase_x_xenpak = '10gbase-x-xenpak'
    field_10gbase_x_x2 = '10gbase-x-x2'
    field_25gbase_x_sfp28 = '25gbase-x-sfp28'
    field_50gbase_x_sfp56 = '50gbase-x-sfp56'
    field_40gbase_x_qsfpp = '40gbase-x-qsfpp'
    field_50gbase_x_sfp28 = '50gbase-x-sfp28'
    field_100gbase_x_cfp = '100gbase-x-cfp'
    field_100gbase_x_cfp2 = '100gbase-x-cfp2'
    field_200gbase_x_cfp2 = '200gbase-x-cfp2'
    field_100gbase_x_cfp4 = '100gbase-x-cfp4'
    field_100gbase_x_cpak = '100gbase-x-cpak'
    field_100gbase_x_qsfp28 = '100gbase-x-qsfp28'
    field_200gbase_x_qsfp56 = '200gbase-x-qsfp56'
    field_400gbase_x_qsfpdd = '400gbase-x-qsfpdd'
    field_400gbase_x_osfp = '400gbase-x-osfp'
    ieee802_11a = 'ieee802.11a'
    ieee802_11g = 'ieee802.11g'
    ieee802_11n = 'ieee802.11n'
    ieee802_11ac = 'ieee802.11ac'
    ieee802_11ad = 'ieee802.11ad'
    ieee802_11ax = 'ieee802.11ax'
    ieee802_15_1 = 'ieee802.15.1'
    gsm = 'gsm'
    cdma = 'cdma'
    lte = 'lte'
    sonet_oc3 = 'sonet-oc3'
    sonet_oc12 = 'sonet-oc12'
    sonet_oc48 = 'sonet-oc48'
    sonet_oc192 = 'sonet-oc192'
    sonet_oc768 = 'sonet-oc768'
    sonet_oc1920 = 'sonet-oc1920'
    sonet_oc3840 = 'sonet-oc3840'
    field_1gfc_sfp = '1gfc-sfp'
    field_2gfc_sfp = '2gfc-sfp'
    field_4gfc_sfp = '4gfc-sfp'
    field_8gfc_sfpp = '8gfc-sfpp'
    field_16gfc_sfpp = '16gfc-sfpp'
    field_32gfc_sfp28 = '32gfc-sfp28'
    field_64gfc_qsfpp = '64gfc-qsfpp'
    field_128gfc_qsfp28 = '128gfc-qsfp28'
    infiniband_sdr = 'infiniband-sdr'
    infiniband_ddr = 'infiniband-ddr'
    infiniband_qdr = 'infiniband-qdr'
    infiniband_fdr10 = 'infiniband-fdr10'
    infiniband_fdr = 'infiniband-fdr'
    infiniband_edr = 'infiniband-edr'
    infiniband_hdr = 'infiniband-hdr'
    infiniband_ndr = 'infiniband-ndr'
    infiniband_xdr = 'infiniband-xdr'
    t1 = 't1'
    e1 = 'e1'
    t3 = 't3'
    e3 = 'e3'
    xdsl = 'xdsl'
    cisco_stackwise = 'cisco-stackwise'
    cisco_stackwise_plus = 'cisco-stackwise-plus'
    cisco_flexstack = 'cisco-flexstack'
    cisco_flexstack_plus = 'cisco-flexstack-plus'
    cisco_stackwise_80 = 'cisco-stackwise-80'
    cisco_stackwise_160 = 'cisco-stackwise-160'
    cisco_stackwise_320 = 'cisco-stackwise-320'
    cisco_stackwise_480 = 'cisco-stackwise-480'
    juniper_vcp = 'juniper-vcp'
    extreme_summitstack = 'extreme-summitstack'
    extreme_summitstack_128 = 'extreme-summitstack-128'
    extreme_summitstack_256 = 'extreme-summitstack-256'
    extreme_summitstack_512 = 'extreme-summitstack-512'
    other = 'other'


class Mode1(Enum):
    access = 'access'
    tagged = 'tagged'
    tagged_all = 'tagged-all'


class RfRole1(Enum):
    ap = 'ap'
    station = 'station'


class RfChannel1(Enum):
    field_2_4g_1_2412_22 = '2.4g-1-2412-22'
    field_2_4g_2_2417_22 = '2.4g-2-2417-22'
    field_2_4g_3_2422_22 = '2.4g-3-2422-22'
    field_2_4g_4_2427_22 = '2.4g-4-2427-22'
    field_2_4g_5_2432_22 = '2.4g-5-2432-22'
    field_2_4g_6_2437_22 = '2.4g-6-2437-22'
    field_2_4g_7_2442_22 = '2.4g-7-2442-22'
    field_2_4g_8_2447_22 = '2.4g-8-2447-22'
    field_2_4g_9_2452_22 = '2.4g-9-2452-22'
    field_2_4g_10_2457_22 = '2.4g-10-2457-22'
    field_2_4g_11_2462_22 = '2.4g-11-2462-22'
    field_2_4g_12_2467_22 = '2.4g-12-2467-22'
    field_2_4g_13_2472_22 = '2.4g-13-2472-22'
    field_5g_32_5160_20 = '5g-32-5160-20'
    field_5g_34_5170_40 = '5g-34-5170-40'
    field_5g_36_5180_20 = '5g-36-5180-20'
    field_5g_38_5190_40 = '5g-38-5190-40'
    field_5g_40_5200_20 = '5g-40-5200-20'
    field_5g_42_5210_80 = '5g-42-5210-80'
    field_5g_44_5220_20 = '5g-44-5220-20'
    field_5g_46_5230_40 = '5g-46-5230-40'
    field_5g_48_5240_20 = '5g-48-5240-20'
    field_5g_50_5250_160 = '5g-50-5250-160'
    field_5g_52_5260_20 = '5g-52-5260-20'
    field_5g_54_5270_40 = '5g-54-5270-40'
    field_5g_56_5280_20 = '5g-56-5280-20'
    field_5g_58_5290_80 = '5g-58-5290-80'
    field_5g_60_5300_20 = '5g-60-5300-20'
    field_5g_62_5310_40 = '5g-62-5310-40'
    field_5g_64_5320_20 = '5g-64-5320-20'
    field_5g_100_5500_20 = '5g-100-5500-20'
    field_5g_102_5510_40 = '5g-102-5510-40'
    field_5g_104_5520_20 = '5g-104-5520-20'
    field_5g_106_5530_80 = '5g-106-5530-80'
    field_5g_108_5540_20 = '5g-108-5540-20'
    field_5g_110_5550_40 = '5g-110-5550-40'
    field_5g_112_5560_20 = '5g-112-5560-20'
    field_5g_114_5570_160 = '5g-114-5570-160'
    field_5g_116_5580_20 = '5g-116-5580-20'
    field_5g_118_5590_40 = '5g-118-5590-40'
    field_5g_120_5600_20 = '5g-120-5600-20'
    field_5g_122_5610_80 = '5g-122-5610-80'
    field_5g_124_5620_20 = '5g-124-5620-20'
    field_5g_126_5630_40 = '5g-126-5630-40'
    field_5g_128_5640_20 = '5g-128-5640-20'
    field_5g_132_5660_20 = '5g-132-5660-20'
    field_5g_134_5670_40 = '5g-134-5670-40'
    field_5g_136_5680_20 = '5g-136-5680-20'
    field_5g_138_5690_80 = '5g-138-5690-80'
    field_5g_140_5700_20 = '5g-140-5700-20'
    field_5g_142_5710_40 = '5g-142-5710-40'
    field_5g_144_5720_20 = '5g-144-5720-20'
    field_5g_149_5745_20 = '5g-149-5745-20'
    field_5g_151_5755_40 = '5g-151-5755-40'
    field_5g_153_5765_20 = '5g-153-5765-20'
    field_5g_155_5775_80 = '5g-155-5775-80'
    field_5g_157_5785_20 = '5g-157-5785-20'
    field_5g_159_5795_40 = '5g-159-5795-40'
    field_5g_161_5805_20 = '5g-161-5805-20'
    field_5g_163_5815_160 = '5g-163-5815-160'
    field_5g_165_5825_20 = '5g-165-5825-20'
    field_5g_167_5835_40 = '5g-167-5835-40'
    field_5g_169_5845_20 = '5g-169-5845-20'
    field_5g_171_5855_80 = '5g-171-5855-80'
    field_5g_173_5865_20 = '5g-173-5865-20'
    field_5g_175_5875_40 = '5g-175-5875-40'
    field_5g_177_5885_20 = '5g-177-5885-20'
    field_6g_1_5955_20 = '6g-1-5955-20'
    field_6g_3_5965_40 = '6g-3-5965-40'
    field_6g_5_5975_20 = '6g-5-5975-20'
    field_6g_7_5985_80 = '6g-7-5985-80'
    field_6g_9_5995_20 = '6g-9-5995-20'
    field_6g_11_6005_40 = '6g-11-6005-40'
    field_6g_13_6015_20 = '6g-13-6015-20'
    field_6g_15_6025_160 = '6g-15-6025-160'
    field_6g_17_6035_20 = '6g-17-6035-20'
    field_6g_19_6045_40 = '6g-19-6045-40'
    field_6g_21_6055_20 = '6g-21-6055-20'
    field_6g_23_6065_80 = '6g-23-6065-80'
    field_6g_25_6075_20 = '6g-25-6075-20'
    field_6g_27_6085_40 = '6g-27-6085-40'
    field_6g_29_6095_20 = '6g-29-6095-20'
    field_6g_31_6105_320 = '6g-31-6105-320'
    field_6g_33_6115_20 = '6g-33-6115-20'
    field_6g_35_6125_40 = '6g-35-6125-40'
    field_6g_37_6135_20 = '6g-37-6135-20'
    field_6g_39_6145_80 = '6g-39-6145-80'
    field_6g_41_6155_20 = '6g-41-6155-20'
    field_6g_43_6165_40 = '6g-43-6165-40'
    field_6g_45_6175_20 = '6g-45-6175-20'
    field_6g_47_6185_160 = '6g-47-6185-160'
    field_6g_49_6195_20 = '6g-49-6195-20'
    field_6g_51_6205_40 = '6g-51-6205-40'
    field_6g_53_6215_20 = '6g-53-6215-20'
    field_6g_55_6225_80 = '6g-55-6225-80'
    field_6g_57_6235_20 = '6g-57-6235-20'
    field_6g_59_6245_40 = '6g-59-6245-40'
    field_6g_61_6255_20 = '6g-61-6255-20'
    field_6g_65_6275_20 = '6g-65-6275-20'
    field_6g_67_6285_40 = '6g-67-6285-40'
    field_6g_69_6295_20 = '6g-69-6295-20'
    field_6g_71_6305_80 = '6g-71-6305-80'
    field_6g_73_6315_20 = '6g-73-6315-20'
    field_6g_75_6325_40 = '6g-75-6325-40'
    field_6g_77_6335_20 = '6g-77-6335-20'
    field_6g_79_6345_160 = '6g-79-6345-160'
    field_6g_81_6355_20 = '6g-81-6355-20'
    field_6g_83_6365_40 = '6g-83-6365-40'
    field_6g_85_6375_20 = '6g-85-6375-20'
    field_6g_87_6385_80 = '6g-87-6385-80'
    field_6g_89_6395_20 = '6g-89-6395-20'
    field_6g_91_6405_40 = '6g-91-6405-40'
    field_6g_93_6415_20 = '6g-93-6415-20'
    field_6g_95_6425_320 = '6g-95-6425-320'
    field_6g_97_6435_20 = '6g-97-6435-20'
    field_6g_99_6445_40 = '6g-99-6445-40'
    field_6g_101_6455_20 = '6g-101-6455-20'
    field_6g_103_6465_80 = '6g-103-6465-80'
    field_6g_105_6475_20 = '6g-105-6475-20'
    field_6g_107_6485_40 = '6g-107-6485-40'
    field_6g_109_6495_20 = '6g-109-6495-20'
    field_6g_111_6505_160 = '6g-111-6505-160'
    field_6g_113_6515_20 = '6g-113-6515-20'
    field_6g_115_6525_40 = '6g-115-6525-40'
    field_6g_117_6535_20 = '6g-117-6535-20'
    field_6g_119_6545_80 = '6g-119-6545-80'
    field_6g_121_6555_20 = '6g-121-6555-20'
    field_6g_123_6565_40 = '6g-123-6565-40'
    field_6g_125_6575_20 = '6g-125-6575-20'
    field_6g_129_6595_20 = '6g-129-6595-20'
    field_6g_131_6605_40 = '6g-131-6605-40'
    field_6g_133_6615_20 = '6g-133-6615-20'
    field_6g_135_6625_80 = '6g-135-6625-80'
    field_6g_137_6635_20 = '6g-137-6635-20'
    field_6g_139_6645_40 = '6g-139-6645-40'
    field_6g_141_6655_20 = '6g-141-6655-20'
    field_6g_143_6665_160 = '6g-143-6665-160'
    field_6g_145_6675_20 = '6g-145-6675-20'
    field_6g_147_6685_40 = '6g-147-6685-40'
    field_6g_149_6695_20 = '6g-149-6695-20'
    field_6g_151_6705_80 = '6g-151-6705-80'
    field_6g_153_6715_20 = '6g-153-6715-20'
    field_6g_155_6725_40 = '6g-155-6725-40'
    field_6g_157_6735_20 = '6g-157-6735-20'
    field_6g_159_6745_320 = '6g-159-6745-320'
    field_6g_161_6755_20 = '6g-161-6755-20'
    field_6g_163_6765_40 = '6g-163-6765-40'
    field_6g_165_6775_20 = '6g-165-6775-20'
    field_6g_167_6785_80 = '6g-167-6785-80'
    field_6g_169_6795_20 = '6g-169-6795-20'
    field_6g_171_6805_40 = '6g-171-6805-40'
    field_6g_173_6815_20 = '6g-173-6815-20'
    field_6g_175_6825_160 = '6g-175-6825-160'
    field_6g_177_6835_20 = '6g-177-6835-20'
    field_6g_179_6845_40 = '6g-179-6845-40'
    field_6g_181_6855_20 = '6g-181-6855-20'
    field_6g_183_6865_80 = '6g-183-6865-80'
    field_6g_185_6875_20 = '6g-185-6875-20'
    field_6g_187_6885_40 = '6g-187-6885-40'
    field_6g_189_6895_20 = '6g-189-6895-20'
    field_6g_193_6915_20 = '6g-193-6915-20'
    field_6g_195_6925_40 = '6g-195-6925-40'
    field_6g_197_6935_20 = '6g-197-6935-20'
    field_6g_199_6945_80 = '6g-199-6945-80'
    field_6g_201_6955_20 = '6g-201-6955-20'
    field_6g_203_6965_40 = '6g-203-6965-40'
    field_6g_205_6975_20 = '6g-205-6975-20'
    field_6g_207_6985_160 = '6g-207-6985-160'
    field_6g_209_6995_20 = '6g-209-6995-20'
    field_6g_211_7005_40 = '6g-211-7005-40'
    field_6g_213_7015_20 = '6g-213-7015-20'
    field_6g_215_7025_80 = '6g-215-7025-80'
    field_6g_217_7035_20 = '6g-217-7035-20'
    field_6g_219_7045_40 = '6g-219-7045-40'
    field_6g_221_7055_20 = '6g-221-7055-20'
    field_6g_225_7075_20 = '6g-225-7075-20'
    field_6g_227_7085_40 = '6g-227-7085-40'
    field_6g_229_7095_20 = '6g-229-7095-20'
    field_6g_233_7115_20 = '6g-233-7115-20'
    field_60g_1_58320_2160 = '60g-1-58320-2160'
    field_60g_2_60480_2160 = '60g-2-60480-2160'
    field_60g_3_62640_2160 = '60g-3-62640-2160'
    field_60g_4_64800_2160 = '60g-4-64800-2160'
    field_60g_5_66960_2160 = '60g-5-66960-2160'
    field_60g_6_69120_2160 = '60g-6-69120-2160'
    field_60g_9_59400_4320 = '60g-9-59400-4320'
    field_60g_10_61560_4320 = '60g-10-61560-4320'
    field_60g_11_63720_4320 = '60g-11-63720-4320'
    field_60g_12_65880_4320 = '60g-12-65880-4320'
    field_60g_13_68040_4320 = '60g-13-68040-4320'
    field_60g_17_60480_6480 = '60g-17-60480-6480'
    field_60g_18_62640_6480 = '60g-18-62640-6480'
    field_60g_19_64800_6480 = '60g-19-64800-6480'
    field_60g_20_66960_6480 = '60g-20-66960-6480'
    field_60g_25_61560_6480 = '60g-25-61560-6480'
    field_60g_26_63720_6480 = '60g-26-63720-6480'
    field_60g_27_65880_6480 = '60g-27-65880-6480'


class WritableInterface(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type17 = Field(..., title='Type')
    enabled: Optional[bool] = Field(None, title='Enabled')
    parent: Optional[int] = Field(None, title='Parent interface')
    bridge: Optional[int] = Field(None, title='Bridge interface')
    lag: Optional[int] = Field(None, title='Parent LAG')
    mtu: Optional[conint(ge=1, le=65536)] = Field(None, title='MTU')
    mac_address: Optional[str] = Field(None, title='MAC Address')
    wwn: Optional[str] = Field(None, description='64-bit World Wide Name', title='WWN')
    mgmt_only: Optional[bool] = Field(
        None,
        description='This interface is used only for out-of-band management',
        title='Management only',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mode: Optional[Mode1] = Field(None, title='Mode')
    rf_role: Optional[RfRole1] = Field(None, title='Wireless role')
    rf_channel: Optional[RfChannel1] = Field(None, title='Wireless channel')
    rf_channel_frequency: Optional[Decimal] = Field(
        None, title='Channel frequency (MHz)'
    )
    rf_channel_width: Optional[Decimal] = Field(None, title='Channel width (MHz)')
    tx_power: Optional[conint(ge=0, le=127)] = Field(None, title='Transmit power (dBm)')
    untagged_vlan: Optional[int] = Field(None, title='Untagged VLAN')
    tagged_vlans: Optional[List[int]] = None
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    wireless_link: Optional[int] = Field(None, title='Wireless link')
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    wireless_lans: Optional[List[int]] = None
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    count_ipaddresses: Optional[int] = Field(None, title='Count ipaddresses')
    count_fhrp_groups: Optional[int] = Field(None, title='Count fhrp groups')
    _occupied: Optional[bool] = Field(None, title='occupied')


class InventoryItem(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    parent: Optional[int] = Field(None, title='Parent')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    manufacturer: Optional[NestedManufacturer] = None
    part_id: Optional[constr(max_length=50)] = Field(
        None, description='Manufacturer-assigned part identifier', title='Part ID'
    )
    serial: Optional[constr(max_length=50)] = Field(None, title='Serial number')
    asset_tag: Optional[constr(max_length=50)] = Field(
        None, description='A unique tag used to identify this item', title='Asset tag'
    )
    discovered: Optional[bool] = Field(
        None, description='This item was automatically discovered', title='Discovered'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _depth: Optional[int] = Field(None, title='depth')


class WritableInventoryItem(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    parent: Optional[int] = Field(None, title='Parent')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    manufacturer: Optional[int] = Field(None, title='Manufacturer')
    part_id: Optional[constr(max_length=50)] = Field(
        None, description='Manufacturer-assigned part identifier', title='Part ID'
    )
    serial: Optional[constr(max_length=50)] = Field(None, title='Serial number')
    asset_tag: Optional[constr(max_length=50)] = Field(
        None, description='A unique tag used to identify this item', title='Asset tag'
    )
    discovered: Optional[bool] = Field(
        None, description='This item was automatically discovered', title='Discovered'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _depth: Optional[int] = Field(None, title='depth')


class Location(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    site: NestedSite
    parent: Optional[NestedLocation] = None
    tenant: Optional[NestedTenant] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    rack_count: Optional[int] = Field(None, title='Rack count')
    device_count: Optional[int] = Field(None, title='Device count')
    _depth: Optional[int] = Field(None, title='depth')


class WritableLocation(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    site: int = Field(..., title='Site')
    parent: Optional[int] = Field(None, title='Parent')
    tenant: Optional[int] = Field(None, title='Tenant')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    rack_count: Optional[int] = Field(None, title='Rack count')
    device_count: Optional[int] = Field(None, title='Device count')
    _depth: Optional[int] = Field(None, title='depth')


class Manufacturer(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    devicetype_count: Optional[int] = Field(None, title='Devicetype count')
    inventoryitem_count: Optional[int] = Field(None, title='Inventoryitem count')
    platform_count: Optional[int] = Field(None, title='Platform count')


class Platform(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    manufacturer: Optional[NestedManufacturer] = None
    napalm_driver: Optional[constr(max_length=50)] = Field(
        None,
        description='The name of the NAPALM driver to use when interacting with devices',
        title='NAPALM driver',
    )
    napalm_args: Optional[str] = Field(
        None,
        description='Additional arguments to pass when initiating the NAPALM driver (JSON format)',
        title='NAPALM arguments',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')


class WritablePlatform(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    manufacturer: Optional[int] = Field(
        None,
        description='Optionally limit this platform to devices of a certain manufacturer',
        title='Manufacturer',
    )
    napalm_driver: Optional[constr(max_length=50)] = Field(
        None,
        description='The name of the NAPALM driver to use when interacting with devices',
        title='NAPALM driver',
    )
    napalm_args: Optional[str] = Field(
        None,
        description='Additional arguments to pass when initiating the NAPALM driver (JSON format)',
        title='NAPALM arguments',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')


class NestedPowerPanel(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    powerfeed_count: Optional[int] = Field(None, title='Powerfeed count')


class Label23(Enum):
    Offline = 'Offline'
    Active = 'Active'
    Planned = 'Planned'
    Failed = 'Failed'


class Value23(Enum):
    offline = 'offline'
    active = 'active'
    planned = 'planned'
    failed = 'failed'


class Status7(BaseModel):
    label: Label23
    value: Value23


class Label24(Enum):
    Primary = 'Primary'
    Redundant = 'Redundant'


class Value24(Enum):
    primary = 'primary'
    redundant = 'redundant'


class Type18(BaseModel):
    label: Label24
    value: Value24


class Label25(Enum):
    AC = 'AC'
    DC = 'DC'


class Value25(Enum):
    ac = 'ac'
    dc = 'dc'


class Supply(BaseModel):
    label: Label25
    value: Value25


class Label26(Enum):
    Single_phase = 'Single phase'
    Three_phase = 'Three-phase'


class Value26(Enum):
    single_phase = 'single-phase'
    three_phase = 'three-phase'


class Phase(BaseModel):
    label: Label26
    value: Value26


class PowerFeed(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    power_panel: NestedPowerPanel
    rack: Optional[NestedRack] = None
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    status: Optional[Status7] = Field(
        {'value': 'active', 'label': 'Active'}, title='Status'
    )
    type: Optional[Type18] = Field(
        {'value': 'primary', 'label': 'Primary'}, title='Type'
    )
    supply: Optional[Supply] = Field({'value': 'ac', 'label': 'AC'}, title='Supply')
    phase: Optional[Phase] = Field(
        {'value': 'single-phase', 'label': 'Single phase'}, title='Phase'
    )
    voltage: Optional[conint(ge=-32768, le=32767)] = Field(None, title='Voltage')
    amperage: Optional[conint(ge=1, le=32767)] = Field(None, title='Amperage')
    max_utilization: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='Maximum permissible draw (percentage)',
        title='Max utilization',
    )
    comments: Optional[str] = Field(None, title='Comments')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Status8(Enum):
    offline = 'offline'
    active = 'active'
    planned = 'planned'
    failed = 'failed'


class Type19(Enum):
    primary = 'primary'
    redundant = 'redundant'


class Supply1(Enum):
    ac = 'ac'
    dc = 'dc'


class Phase1(Enum):
    single_phase = 'single-phase'
    three_phase = 'three-phase'


class WritablePowerFeed(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    power_panel: int = Field(..., title='Power panel')
    rack: Optional[int] = Field(None, title='Rack')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    status: Optional[Status8] = Field(None, title='Status')
    type: Optional[Type19] = Field(None, title='Type')
    supply: Optional[Supply1] = Field(None, title='Supply')
    phase: Optional[Phase1] = Field(None, title='Phase')
    voltage: Optional[conint(ge=-32768, le=32767)] = Field(None, title='Voltage')
    amperage: Optional[conint(ge=1, le=32767)] = Field(None, title='Amperage')
    max_utilization: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='Maximum permissible draw (percentage)',
        title='Max utilization',
    )
    comments: Optional[str] = Field(None, title='Comments')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class NestedPowerPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')


class Label27(Enum):
    C5 = 'C5'
    C7 = 'C7'
    C13 = 'C13'
    C15 = 'C15'
    C19 = 'C19'
    C21 = 'C21'
    P_N_E_4H = 'P+N+E 4H'
    P_N_E_6H = 'P+N+E 6H'
    P_N_E_9H = 'P+N+E 9H'
    field_2P_E_4H = '2P+E 4H'
    field_2P_E_6H = '2P+E 6H'
    field_2P_E_9H = '2P+E 9H'
    field_3P_E_4H = '3P+E 4H'
    field_3P_E_6H = '3P+E 6H'
    field_3P_E_9H = '3P+E 9H'
    field_3P_N_E_4H = '3P+N+E 4H'
    field_3P_N_E_6H = '3P+N+E 6H'
    field_3P_N_E_9H = '3P+N+E 9H'
    NEMA_1_15R = 'NEMA 1-15R'
    NEMA_5_15R = 'NEMA 5-15R'
    NEMA_5_20R = 'NEMA 5-20R'
    NEMA_5_30R = 'NEMA 5-30R'
    NEMA_5_50R = 'NEMA 5-50R'
    NEMA_6_15R = 'NEMA 6-15R'
    NEMA_6_20R = 'NEMA 6-20R'
    NEMA_6_30R = 'NEMA 6-30R'
    NEMA_6_50R = 'NEMA 6-50R'
    NEMA_10_30R = 'NEMA 10-30R'
    NEMA_10_50R = 'NEMA 10-50R'
    NEMA_14_20R = 'NEMA 14-20R'
    NEMA_14_30R = 'NEMA 14-30R'
    NEMA_14_50R = 'NEMA 14-50R'
    NEMA_14_60R = 'NEMA 14-60R'
    NEMA_15_15R = 'NEMA 15-15R'
    NEMA_15_20R = 'NEMA 15-20R'
    NEMA_15_30R = 'NEMA 15-30R'
    NEMA_15_50R = 'NEMA 15-50R'
    NEMA_15_60R = 'NEMA 15-60R'
    NEMA_L1_15R = 'NEMA L1-15R'
    NEMA_L5_15R = 'NEMA L5-15R'
    NEMA_L5_20R = 'NEMA L5-20R'
    NEMA_L5_30R = 'NEMA L5-30R'
    NEMA_L5_50R = 'NEMA L5-50R'
    NEMA_L6_15R = 'NEMA L6-15R'
    NEMA_L6_20R = 'NEMA L6-20R'
    NEMA_L6_30R = 'NEMA L6-30R'
    NEMA_L6_50R = 'NEMA L6-50R'
    NEMA_L10_30R = 'NEMA L10-30R'
    NEMA_L14_20R = 'NEMA L14-20R'
    NEMA_L14_30R = 'NEMA L14-30R'
    NEMA_L14_50R = 'NEMA L14-50R'
    NEMA_L14_60R = 'NEMA L14-60R'
    NEMA_L15_20R = 'NEMA L15-20R'
    NEMA_L15_30R = 'NEMA L15-30R'
    NEMA_L15_50R = 'NEMA L15-50R'
    NEMA_L15_60R = 'NEMA L15-60R'
    NEMA_L21_20R = 'NEMA L21-20R'
    NEMA_L21_30R = 'NEMA L21-30R'
    NEMA_L22_30R = 'NEMA L22-30R'
    CS6360C = 'CS6360C'
    CS6364C = 'CS6364C'
    CS8164C = 'CS8164C'
    CS8264C = 'CS8264C'
    CS8364C = 'CS8364C'
    CS8464C = 'CS8464C'
    ITA_Type_E__CEE_7_5_ = 'ITA Type E (CEE 7/5)'
    ITA_Type_F__CEE_7_3_ = 'ITA Type F (CEE 7/3)'
    ITA_Type_G__BS_1363_ = 'ITA Type G (BS 1363)'
    ITA_Type_H = 'ITA Type H'
    ITA_Type_I = 'ITA Type I'
    ITA_Type_J = 'ITA Type J'
    ITA_Type_K = 'ITA Type K'
    ITA_Type_L__CEI_23_50_ = 'ITA Type L (CEI 23-50)'
    ITA_Type_M__BS_546_ = 'ITA Type M (BS 546)'
    ITA_Type_N = 'ITA Type N'
    ITA_Type_O = 'ITA Type O'
    ITA_Multistandard = 'ITA Multistandard'
    USB_Type_A = 'USB Type A'
    USB_Micro_B = 'USB Micro B'
    USB_Type_C = 'USB Type C'
    DC_Terminal = 'DC Terminal'
    HDOT_Cx = 'HDOT Cx'
    Saf_D_Grid = 'Saf-D-Grid'
    Hardwired = 'Hardwired'


class Value27(Enum):
    iec_60320_c5 = 'iec-60320-c5'
    iec_60320_c7 = 'iec-60320-c7'
    iec_60320_c13 = 'iec-60320-c13'
    iec_60320_c15 = 'iec-60320-c15'
    iec_60320_c19 = 'iec-60320-c19'
    iec_60320_c21 = 'iec-60320-c21'
    iec_60309_p_n_e_4h = 'iec-60309-p-n-e-4h'
    iec_60309_p_n_e_6h = 'iec-60309-p-n-e-6h'
    iec_60309_p_n_e_9h = 'iec-60309-p-n-e-9h'
    iec_60309_2p_e_4h = 'iec-60309-2p-e-4h'
    iec_60309_2p_e_6h = 'iec-60309-2p-e-6h'
    iec_60309_2p_e_9h = 'iec-60309-2p-e-9h'
    iec_60309_3p_e_4h = 'iec-60309-3p-e-4h'
    iec_60309_3p_e_6h = 'iec-60309-3p-e-6h'
    iec_60309_3p_e_9h = 'iec-60309-3p-e-9h'
    iec_60309_3p_n_e_4h = 'iec-60309-3p-n-e-4h'
    iec_60309_3p_n_e_6h = 'iec-60309-3p-n-e-6h'
    iec_60309_3p_n_e_9h = 'iec-60309-3p-n-e-9h'
    nema_1_15r = 'nema-1-15r'
    nema_5_15r = 'nema-5-15r'
    nema_5_20r = 'nema-5-20r'
    nema_5_30r = 'nema-5-30r'
    nema_5_50r = 'nema-5-50r'
    nema_6_15r = 'nema-6-15r'
    nema_6_20r = 'nema-6-20r'
    nema_6_30r = 'nema-6-30r'
    nema_6_50r = 'nema-6-50r'
    nema_10_30r = 'nema-10-30r'
    nema_10_50r = 'nema-10-50r'
    nema_14_20r = 'nema-14-20r'
    nema_14_30r = 'nema-14-30r'
    nema_14_50r = 'nema-14-50r'
    nema_14_60r = 'nema-14-60r'
    nema_15_15r = 'nema-15-15r'
    nema_15_20r = 'nema-15-20r'
    nema_15_30r = 'nema-15-30r'
    nema_15_50r = 'nema-15-50r'
    nema_15_60r = 'nema-15-60r'
    nema_l1_15r = 'nema-l1-15r'
    nema_l5_15r = 'nema-l5-15r'
    nema_l5_20r = 'nema-l5-20r'
    nema_l5_30r = 'nema-l5-30r'
    nema_l5_50r = 'nema-l5-50r'
    nema_l6_15r = 'nema-l6-15r'
    nema_l6_20r = 'nema-l6-20r'
    nema_l6_30r = 'nema-l6-30r'
    nema_l6_50r = 'nema-l6-50r'
    nema_l10_30r = 'nema-l10-30r'
    nema_l14_20r = 'nema-l14-20r'
    nema_l14_30r = 'nema-l14-30r'
    nema_l14_50r = 'nema-l14-50r'
    nema_l14_60r = 'nema-l14-60r'
    nema_l15_20r = 'nema-l15-20r'
    nema_l15_30r = 'nema-l15-30r'
    nema_l15_50r = 'nema-l15-50r'
    nema_l15_60r = 'nema-l15-60r'
    nema_l21_20r = 'nema-l21-20r'
    nema_l21_30r = 'nema-l21-30r'
    nema_l22_30r = 'nema-l22-30r'
    CS6360C = 'CS6360C'
    CS6364C = 'CS6364C'
    CS8164C = 'CS8164C'
    CS8264C = 'CS8264C'
    CS8364C = 'CS8364C'
    CS8464C = 'CS8464C'
    ita_e = 'ita-e'
    ita_f = 'ita-f'
    ita_g = 'ita-g'
    ita_h = 'ita-h'
    ita_i = 'ita-i'
    ita_j = 'ita-j'
    ita_k = 'ita-k'
    ita_l = 'ita-l'
    ita_m = 'ita-m'
    ita_n = 'ita-n'
    ita_o = 'ita-o'
    ita_multistandard = 'ita-multistandard'
    usb_a = 'usb-a'
    usb_micro_b = 'usb-micro-b'
    usb_c = 'usb-c'
    dc_terminal = 'dc-terminal'
    hdot_cx = 'hdot-cx'
    saf_d_grid = 'saf-d-grid'
    hardwired = 'hardwired'


class Type20(BaseModel):
    label: Label27
    value: Value27


class Label28(Enum):
    A = 'A'
    B = 'B'
    C = 'C'


class Value28(Enum):
    A = 'A'
    B = 'B'
    C = 'C'


class FeedLeg(BaseModel):
    label: Label28
    value: Value28


class PowerOutletTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: NestedDeviceType
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type20] = Field(None, title='Type')
    power_port: Optional[NestedPowerPortTemplate] = None
    feed_leg: Optional[FeedLeg] = Field(None, title='Feed leg')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type21(Enum):
    iec_60320_c5 = 'iec-60320-c5'
    iec_60320_c7 = 'iec-60320-c7'
    iec_60320_c13 = 'iec-60320-c13'
    iec_60320_c15 = 'iec-60320-c15'
    iec_60320_c19 = 'iec-60320-c19'
    iec_60320_c21 = 'iec-60320-c21'
    iec_60309_p_n_e_4h = 'iec-60309-p-n-e-4h'
    iec_60309_p_n_e_6h = 'iec-60309-p-n-e-6h'
    iec_60309_p_n_e_9h = 'iec-60309-p-n-e-9h'
    iec_60309_2p_e_4h = 'iec-60309-2p-e-4h'
    iec_60309_2p_e_6h = 'iec-60309-2p-e-6h'
    iec_60309_2p_e_9h = 'iec-60309-2p-e-9h'
    iec_60309_3p_e_4h = 'iec-60309-3p-e-4h'
    iec_60309_3p_e_6h = 'iec-60309-3p-e-6h'
    iec_60309_3p_e_9h = 'iec-60309-3p-e-9h'
    iec_60309_3p_n_e_4h = 'iec-60309-3p-n-e-4h'
    iec_60309_3p_n_e_6h = 'iec-60309-3p-n-e-6h'
    iec_60309_3p_n_e_9h = 'iec-60309-3p-n-e-9h'
    nema_1_15r = 'nema-1-15r'
    nema_5_15r = 'nema-5-15r'
    nema_5_20r = 'nema-5-20r'
    nema_5_30r = 'nema-5-30r'
    nema_5_50r = 'nema-5-50r'
    nema_6_15r = 'nema-6-15r'
    nema_6_20r = 'nema-6-20r'
    nema_6_30r = 'nema-6-30r'
    nema_6_50r = 'nema-6-50r'
    nema_10_30r = 'nema-10-30r'
    nema_10_50r = 'nema-10-50r'
    nema_14_20r = 'nema-14-20r'
    nema_14_30r = 'nema-14-30r'
    nema_14_50r = 'nema-14-50r'
    nema_14_60r = 'nema-14-60r'
    nema_15_15r = 'nema-15-15r'
    nema_15_20r = 'nema-15-20r'
    nema_15_30r = 'nema-15-30r'
    nema_15_50r = 'nema-15-50r'
    nema_15_60r = 'nema-15-60r'
    nema_l1_15r = 'nema-l1-15r'
    nema_l5_15r = 'nema-l5-15r'
    nema_l5_20r = 'nema-l5-20r'
    nema_l5_30r = 'nema-l5-30r'
    nema_l5_50r = 'nema-l5-50r'
    nema_l6_15r = 'nema-l6-15r'
    nema_l6_20r = 'nema-l6-20r'
    nema_l6_30r = 'nema-l6-30r'
    nema_l6_50r = 'nema-l6-50r'
    nema_l10_30r = 'nema-l10-30r'
    nema_l14_20r = 'nema-l14-20r'
    nema_l14_30r = 'nema-l14-30r'
    nema_l14_50r = 'nema-l14-50r'
    nema_l14_60r = 'nema-l14-60r'
    nema_l15_20r = 'nema-l15-20r'
    nema_l15_30r = 'nema-l15-30r'
    nema_l15_50r = 'nema-l15-50r'
    nema_l15_60r = 'nema-l15-60r'
    nema_l21_20r = 'nema-l21-20r'
    nema_l21_30r = 'nema-l21-30r'
    nema_l22_30r = 'nema-l22-30r'
    CS6360C = 'CS6360C'
    CS6364C = 'CS6364C'
    CS8164C = 'CS8164C'
    CS8264C = 'CS8264C'
    CS8364C = 'CS8364C'
    CS8464C = 'CS8464C'
    ita_e = 'ita-e'
    ita_f = 'ita-f'
    ita_g = 'ita-g'
    ita_h = 'ita-h'
    ita_i = 'ita-i'
    ita_j = 'ita-j'
    ita_k = 'ita-k'
    ita_l = 'ita-l'
    ita_m = 'ita-m'
    ita_n = 'ita-n'
    ita_o = 'ita-o'
    ita_multistandard = 'ita-multistandard'
    usb_a = 'usb-a'
    usb_micro_b = 'usb-micro-b'
    usb_c = 'usb-c'
    dc_terminal = 'dc-terminal'
    hdot_cx = 'hdot-cx'
    saf_d_grid = 'saf-d-grid'
    hardwired = 'hardwired'


class FeedLeg1(Enum):
    A = 'A'
    B = 'B'
    C = 'C'


class WritablePowerOutletTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: int = Field(..., title='Device type')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type21] = Field(None, title='Type')
    power_port: Optional[int] = Field(None, title='Power port')
    feed_leg: Optional[FeedLeg1] = Field(
        None, description='Phase (for three-phase feeds)', title='Feed leg'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedPowerPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: Optional[NestedDevice] = None
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    cable: Optional[int] = Field(None, title='Cable')
    _occupied: Optional[str] = Field(None, title='occupied')


class Label29(Enum):
    C5 = 'C5'
    C7 = 'C7'
    C13 = 'C13'
    C15 = 'C15'
    C19 = 'C19'
    C21 = 'C21'
    P_N_E_4H = 'P+N+E 4H'
    P_N_E_6H = 'P+N+E 6H'
    P_N_E_9H = 'P+N+E 9H'
    field_2P_E_4H = '2P+E 4H'
    field_2P_E_6H = '2P+E 6H'
    field_2P_E_9H = '2P+E 9H'
    field_3P_E_4H = '3P+E 4H'
    field_3P_E_6H = '3P+E 6H'
    field_3P_E_9H = '3P+E 9H'
    field_3P_N_E_4H = '3P+N+E 4H'
    field_3P_N_E_6H = '3P+N+E 6H'
    field_3P_N_E_9H = '3P+N+E 9H'
    NEMA_1_15R = 'NEMA 1-15R'
    NEMA_5_15R = 'NEMA 5-15R'
    NEMA_5_20R = 'NEMA 5-20R'
    NEMA_5_30R = 'NEMA 5-30R'
    NEMA_5_50R = 'NEMA 5-50R'
    NEMA_6_15R = 'NEMA 6-15R'
    NEMA_6_20R = 'NEMA 6-20R'
    NEMA_6_30R = 'NEMA 6-30R'
    NEMA_6_50R = 'NEMA 6-50R'
    NEMA_10_30R = 'NEMA 10-30R'
    NEMA_10_50R = 'NEMA 10-50R'
    NEMA_14_20R = 'NEMA 14-20R'
    NEMA_14_30R = 'NEMA 14-30R'
    NEMA_14_50R = 'NEMA 14-50R'
    NEMA_14_60R = 'NEMA 14-60R'
    NEMA_15_15R = 'NEMA 15-15R'
    NEMA_15_20R = 'NEMA 15-20R'
    NEMA_15_30R = 'NEMA 15-30R'
    NEMA_15_50R = 'NEMA 15-50R'
    NEMA_15_60R = 'NEMA 15-60R'
    NEMA_L1_15R = 'NEMA L1-15R'
    NEMA_L5_15R = 'NEMA L5-15R'
    NEMA_L5_20R = 'NEMA L5-20R'
    NEMA_L5_30R = 'NEMA L5-30R'
    NEMA_L5_50R = 'NEMA L5-50R'
    NEMA_L6_15R = 'NEMA L6-15R'
    NEMA_L6_20R = 'NEMA L6-20R'
    NEMA_L6_30R = 'NEMA L6-30R'
    NEMA_L6_50R = 'NEMA L6-50R'
    NEMA_L10_30R = 'NEMA L10-30R'
    NEMA_L14_20R = 'NEMA L14-20R'
    NEMA_L14_30R = 'NEMA L14-30R'
    NEMA_L14_50R = 'NEMA L14-50R'
    NEMA_L14_60R = 'NEMA L14-60R'
    NEMA_L15_20R = 'NEMA L15-20R'
    NEMA_L15_30R = 'NEMA L15-30R'
    NEMA_L15_50R = 'NEMA L15-50R'
    NEMA_L15_60R = 'NEMA L15-60R'
    NEMA_L21_20R = 'NEMA L21-20R'
    NEMA_L21_30R = 'NEMA L21-30R'
    NEMA_L22_30R = 'NEMA L22-30R'
    CS6360C = 'CS6360C'
    CS6364C = 'CS6364C'
    CS8164C = 'CS8164C'
    CS8264C = 'CS8264C'
    CS8364C = 'CS8364C'
    CS8464C = 'CS8464C'
    ITA_Type_E__CEE_7_5_ = 'ITA Type E (CEE 7/5)'
    ITA_Type_F__CEE_7_3_ = 'ITA Type F (CEE 7/3)'
    ITA_Type_G__BS_1363_ = 'ITA Type G (BS 1363)'
    ITA_Type_H = 'ITA Type H'
    ITA_Type_I = 'ITA Type I'
    ITA_Type_J = 'ITA Type J'
    ITA_Type_K = 'ITA Type K'
    ITA_Type_L__CEI_23_50_ = 'ITA Type L (CEI 23-50)'
    ITA_Type_M__BS_546_ = 'ITA Type M (BS 546)'
    ITA_Type_N = 'ITA Type N'
    ITA_Type_O = 'ITA Type O'
    ITA_Multistandard = 'ITA Multistandard'
    USB_Type_A = 'USB Type A'
    USB_Micro_B = 'USB Micro B'
    USB_Type_C = 'USB Type C'
    DC_Terminal = 'DC Terminal'
    HDOT_Cx = 'HDOT Cx'
    Saf_D_Grid = 'Saf-D-Grid'
    Hardwired = 'Hardwired'


class Value29(Enum):
    iec_60320_c5 = 'iec-60320-c5'
    iec_60320_c7 = 'iec-60320-c7'
    iec_60320_c13 = 'iec-60320-c13'
    iec_60320_c15 = 'iec-60320-c15'
    iec_60320_c19 = 'iec-60320-c19'
    iec_60320_c21 = 'iec-60320-c21'
    iec_60309_p_n_e_4h = 'iec-60309-p-n-e-4h'
    iec_60309_p_n_e_6h = 'iec-60309-p-n-e-6h'
    iec_60309_p_n_e_9h = 'iec-60309-p-n-e-9h'
    iec_60309_2p_e_4h = 'iec-60309-2p-e-4h'
    iec_60309_2p_e_6h = 'iec-60309-2p-e-6h'
    iec_60309_2p_e_9h = 'iec-60309-2p-e-9h'
    iec_60309_3p_e_4h = 'iec-60309-3p-e-4h'
    iec_60309_3p_e_6h = 'iec-60309-3p-e-6h'
    iec_60309_3p_e_9h = 'iec-60309-3p-e-9h'
    iec_60309_3p_n_e_4h = 'iec-60309-3p-n-e-4h'
    iec_60309_3p_n_e_6h = 'iec-60309-3p-n-e-6h'
    iec_60309_3p_n_e_9h = 'iec-60309-3p-n-e-9h'
    nema_1_15r = 'nema-1-15r'
    nema_5_15r = 'nema-5-15r'
    nema_5_20r = 'nema-5-20r'
    nema_5_30r = 'nema-5-30r'
    nema_5_50r = 'nema-5-50r'
    nema_6_15r = 'nema-6-15r'
    nema_6_20r = 'nema-6-20r'
    nema_6_30r = 'nema-6-30r'
    nema_6_50r = 'nema-6-50r'
    nema_10_30r = 'nema-10-30r'
    nema_10_50r = 'nema-10-50r'
    nema_14_20r = 'nema-14-20r'
    nema_14_30r = 'nema-14-30r'
    nema_14_50r = 'nema-14-50r'
    nema_14_60r = 'nema-14-60r'
    nema_15_15r = 'nema-15-15r'
    nema_15_20r = 'nema-15-20r'
    nema_15_30r = 'nema-15-30r'
    nema_15_50r = 'nema-15-50r'
    nema_15_60r = 'nema-15-60r'
    nema_l1_15r = 'nema-l1-15r'
    nema_l5_15r = 'nema-l5-15r'
    nema_l5_20r = 'nema-l5-20r'
    nema_l5_30r = 'nema-l5-30r'
    nema_l5_50r = 'nema-l5-50r'
    nema_l6_15r = 'nema-l6-15r'
    nema_l6_20r = 'nema-l6-20r'
    nema_l6_30r = 'nema-l6-30r'
    nema_l6_50r = 'nema-l6-50r'
    nema_l10_30r = 'nema-l10-30r'
    nema_l14_20r = 'nema-l14-20r'
    nema_l14_30r = 'nema-l14-30r'
    nema_l14_50r = 'nema-l14-50r'
    nema_l14_60r = 'nema-l14-60r'
    nema_l15_20r = 'nema-l15-20r'
    nema_l15_30r = 'nema-l15-30r'
    nema_l15_50r = 'nema-l15-50r'
    nema_l15_60r = 'nema-l15-60r'
    nema_l21_20r = 'nema-l21-20r'
    nema_l21_30r = 'nema-l21-30r'
    nema_l22_30r = 'nema-l22-30r'
    CS6360C = 'CS6360C'
    CS6364C = 'CS6364C'
    CS8164C = 'CS8164C'
    CS8264C = 'CS8264C'
    CS8364C = 'CS8364C'
    CS8464C = 'CS8464C'
    ita_e = 'ita-e'
    ita_f = 'ita-f'
    ita_g = 'ita-g'
    ita_h = 'ita-h'
    ita_i = 'ita-i'
    ita_j = 'ita-j'
    ita_k = 'ita-k'
    ita_l = 'ita-l'
    ita_m = 'ita-m'
    ita_n = 'ita-n'
    ita_o = 'ita-o'
    ita_multistandard = 'ita-multistandard'
    usb_a = 'usb-a'
    usb_micro_b = 'usb-micro-b'
    usb_c = 'usb-c'
    dc_terminal = 'dc-terminal'
    hdot_cx = 'hdot-cx'
    saf_d_grid = 'saf-d-grid'
    hardwired = 'hardwired'


class Type22(BaseModel):
    label: Label29
    value: Value29


class Label30(Enum):
    A = 'A'
    B = 'B'
    C = 'C'


class Value30(Enum):
    A = 'A'
    B = 'B'
    C = 'C'


class FeedLeg2(BaseModel):
    label: Label30
    value: Value30


class PowerOutlet(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type22] = Field(None, title='Type')
    power_port: Optional[NestedPowerPort] = None
    feed_leg: Optional[FeedLeg2] = Field(None, title='Feed leg')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Type23(Enum):
    iec_60320_c5 = 'iec-60320-c5'
    iec_60320_c7 = 'iec-60320-c7'
    iec_60320_c13 = 'iec-60320-c13'
    iec_60320_c15 = 'iec-60320-c15'
    iec_60320_c19 = 'iec-60320-c19'
    iec_60320_c21 = 'iec-60320-c21'
    iec_60309_p_n_e_4h = 'iec-60309-p-n-e-4h'
    iec_60309_p_n_e_6h = 'iec-60309-p-n-e-6h'
    iec_60309_p_n_e_9h = 'iec-60309-p-n-e-9h'
    iec_60309_2p_e_4h = 'iec-60309-2p-e-4h'
    iec_60309_2p_e_6h = 'iec-60309-2p-e-6h'
    iec_60309_2p_e_9h = 'iec-60309-2p-e-9h'
    iec_60309_3p_e_4h = 'iec-60309-3p-e-4h'
    iec_60309_3p_e_6h = 'iec-60309-3p-e-6h'
    iec_60309_3p_e_9h = 'iec-60309-3p-e-9h'
    iec_60309_3p_n_e_4h = 'iec-60309-3p-n-e-4h'
    iec_60309_3p_n_e_6h = 'iec-60309-3p-n-e-6h'
    iec_60309_3p_n_e_9h = 'iec-60309-3p-n-e-9h'
    nema_1_15r = 'nema-1-15r'
    nema_5_15r = 'nema-5-15r'
    nema_5_20r = 'nema-5-20r'
    nema_5_30r = 'nema-5-30r'
    nema_5_50r = 'nema-5-50r'
    nema_6_15r = 'nema-6-15r'
    nema_6_20r = 'nema-6-20r'
    nema_6_30r = 'nema-6-30r'
    nema_6_50r = 'nema-6-50r'
    nema_10_30r = 'nema-10-30r'
    nema_10_50r = 'nema-10-50r'
    nema_14_20r = 'nema-14-20r'
    nema_14_30r = 'nema-14-30r'
    nema_14_50r = 'nema-14-50r'
    nema_14_60r = 'nema-14-60r'
    nema_15_15r = 'nema-15-15r'
    nema_15_20r = 'nema-15-20r'
    nema_15_30r = 'nema-15-30r'
    nema_15_50r = 'nema-15-50r'
    nema_15_60r = 'nema-15-60r'
    nema_l1_15r = 'nema-l1-15r'
    nema_l5_15r = 'nema-l5-15r'
    nema_l5_20r = 'nema-l5-20r'
    nema_l5_30r = 'nema-l5-30r'
    nema_l5_50r = 'nema-l5-50r'
    nema_l6_15r = 'nema-l6-15r'
    nema_l6_20r = 'nema-l6-20r'
    nema_l6_30r = 'nema-l6-30r'
    nema_l6_50r = 'nema-l6-50r'
    nema_l10_30r = 'nema-l10-30r'
    nema_l14_20r = 'nema-l14-20r'
    nema_l14_30r = 'nema-l14-30r'
    nema_l14_50r = 'nema-l14-50r'
    nema_l14_60r = 'nema-l14-60r'
    nema_l15_20r = 'nema-l15-20r'
    nema_l15_30r = 'nema-l15-30r'
    nema_l15_50r = 'nema-l15-50r'
    nema_l15_60r = 'nema-l15-60r'
    nema_l21_20r = 'nema-l21-20r'
    nema_l21_30r = 'nema-l21-30r'
    nema_l22_30r = 'nema-l22-30r'
    CS6360C = 'CS6360C'
    CS6364C = 'CS6364C'
    CS8164C = 'CS8164C'
    CS8264C = 'CS8264C'
    CS8364C = 'CS8364C'
    CS8464C = 'CS8464C'
    ita_e = 'ita-e'
    ita_f = 'ita-f'
    ita_g = 'ita-g'
    ita_h = 'ita-h'
    ita_i = 'ita-i'
    ita_j = 'ita-j'
    ita_k = 'ita-k'
    ita_l = 'ita-l'
    ita_m = 'ita-m'
    ita_n = 'ita-n'
    ita_o = 'ita-o'
    ita_multistandard = 'ita-multistandard'
    usb_a = 'usb-a'
    usb_micro_b = 'usb-micro-b'
    usb_c = 'usb-c'
    dc_terminal = 'dc-terminal'
    hdot_cx = 'hdot-cx'
    saf_d_grid = 'saf-d-grid'
    hardwired = 'hardwired'


class FeedLeg3(Enum):
    A = 'A'
    B = 'B'
    C = 'C'


class WritablePowerOutlet(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type23] = Field(None, description='Physical port type', title='Type')
    power_port: Optional[int] = Field(None, title='Power port')
    feed_leg: Optional[FeedLeg3] = Field(
        None, description='Phase (for three-phase feeds)', title='Feed leg'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class PowerPanel(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    site: NestedSite
    location: Optional[NestedLocation] = None
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    powerfeed_count: Optional[int] = Field(None, title='Powerfeed count')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritablePowerPanel(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    site: int = Field(..., title='Site')
    location: Optional[int] = Field(None, title='Location')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    powerfeed_count: Optional[int] = Field(None, title='Powerfeed count')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Label31(Enum):
    C6 = 'C6'
    C8 = 'C8'
    C14 = 'C14'
    C16 = 'C16'
    C20 = 'C20'
    C22 = 'C22'
    P_N_E_4H = 'P+N+E 4H'
    P_N_E_6H = 'P+N+E 6H'
    P_N_E_9H = 'P+N+E 9H'
    field_2P_E_4H = '2P+E 4H'
    field_2P_E_6H = '2P+E 6H'
    field_2P_E_9H = '2P+E 9H'
    field_3P_E_4H = '3P+E 4H'
    field_3P_E_6H = '3P+E 6H'
    field_3P_E_9H = '3P+E 9H'
    field_3P_N_E_4H = '3P+N+E 4H'
    field_3P_N_E_6H = '3P+N+E 6H'
    field_3P_N_E_9H = '3P+N+E 9H'
    NEMA_1_15P = 'NEMA 1-15P'
    NEMA_5_15P = 'NEMA 5-15P'
    NEMA_5_20P = 'NEMA 5-20P'
    NEMA_5_30P = 'NEMA 5-30P'
    NEMA_5_50P = 'NEMA 5-50P'
    NEMA_6_15P = 'NEMA 6-15P'
    NEMA_6_20P = 'NEMA 6-20P'
    NEMA_6_30P = 'NEMA 6-30P'
    NEMA_6_50P = 'NEMA 6-50P'
    NEMA_10_30P = 'NEMA 10-30P'
    NEMA_10_50P = 'NEMA 10-50P'
    NEMA_14_20P = 'NEMA 14-20P'
    NEMA_14_30P = 'NEMA 14-30P'
    NEMA_14_50P = 'NEMA 14-50P'
    NEMA_14_60P = 'NEMA 14-60P'
    NEMA_15_15P = 'NEMA 15-15P'
    NEMA_15_20P = 'NEMA 15-20P'
    NEMA_15_30P = 'NEMA 15-30P'
    NEMA_15_50P = 'NEMA 15-50P'
    NEMA_15_60P = 'NEMA 15-60P'
    NEMA_L1_15P = 'NEMA L1-15P'
    NEMA_L5_15P = 'NEMA L5-15P'
    NEMA_L5_20P = 'NEMA L5-20P'
    NEMA_L5_30P = 'NEMA L5-30P'
    NEMA_L5_50P = 'NEMA L5-50P'
    NEMA_L6_15P = 'NEMA L6-15P'
    NEMA_L6_20P = 'NEMA L6-20P'
    NEMA_L6_30P = 'NEMA L6-30P'
    NEMA_L6_50P = 'NEMA L6-50P'
    NEMA_L10_30P = 'NEMA L10-30P'
    NEMA_L14_20P = 'NEMA L14-20P'
    NEMA_L14_30P = 'NEMA L14-30P'
    NEMA_L14_50P = 'NEMA L14-50P'
    NEMA_L14_60P = 'NEMA L14-60P'
    NEMA_L15_20P = 'NEMA L15-20P'
    NEMA_L15_30P = 'NEMA L15-30P'
    NEMA_L15_50P = 'NEMA L15-50P'
    NEMA_L15_60P = 'NEMA L15-60P'
    NEMA_L21_20P = 'NEMA L21-20P'
    NEMA_L21_30P = 'NEMA L21-30P'
    NEMA_L22_30P = 'NEMA L22-30P'
    CS6361C = 'CS6361C'
    CS6365C = 'CS6365C'
    CS8165C = 'CS8165C'
    CS8265C = 'CS8265C'
    CS8365C = 'CS8365C'
    CS8465C = 'CS8465C'
    ITA_Type_C__CEE_7_16_ = 'ITA Type C (CEE 7/16)'
    ITA_Type_E__CEE_7_6_ = 'ITA Type E (CEE 7/6)'
    ITA_Type_F__CEE_7_4_ = 'ITA Type F (CEE 7/4)'
    ITA_Type_E_F__CEE_7_7_ = 'ITA Type E/F (CEE 7/7)'
    ITA_Type_G__BS_1363_ = 'ITA Type G (BS 1363)'
    ITA_Type_H = 'ITA Type H'
    ITA_Type_I = 'ITA Type I'
    ITA_Type_J = 'ITA Type J'
    ITA_Type_K = 'ITA Type K'
    ITA_Type_L__CEI_23_50_ = 'ITA Type L (CEI 23-50)'
    ITA_Type_M__BS_546_ = 'ITA Type M (BS 546)'
    ITA_Type_N = 'ITA Type N'
    ITA_Type_O = 'ITA Type O'
    USB_Type_A = 'USB Type A'
    USB_Type_B = 'USB Type B'
    USB_Type_C = 'USB Type C'
    USB_Mini_A = 'USB Mini A'
    USB_Mini_B = 'USB Mini B'
    USB_Micro_A = 'USB Micro A'
    USB_Micro_B = 'USB Micro B'
    USB_Micro_AB = 'USB Micro AB'
    USB_3_0_Type_B = 'USB 3.0 Type B'
    USB_3_0_Micro_B = 'USB 3.0 Micro B'
    DC_Terminal = 'DC Terminal'
    Saf_D_Grid = 'Saf-D-Grid'
    Hardwired = 'Hardwired'


class Value31(Enum):
    iec_60320_c6 = 'iec-60320-c6'
    iec_60320_c8 = 'iec-60320-c8'
    iec_60320_c14 = 'iec-60320-c14'
    iec_60320_c16 = 'iec-60320-c16'
    iec_60320_c20 = 'iec-60320-c20'
    iec_60320_c22 = 'iec-60320-c22'
    iec_60309_p_n_e_4h = 'iec-60309-p-n-e-4h'
    iec_60309_p_n_e_6h = 'iec-60309-p-n-e-6h'
    iec_60309_p_n_e_9h = 'iec-60309-p-n-e-9h'
    iec_60309_2p_e_4h = 'iec-60309-2p-e-4h'
    iec_60309_2p_e_6h = 'iec-60309-2p-e-6h'
    iec_60309_2p_e_9h = 'iec-60309-2p-e-9h'
    iec_60309_3p_e_4h = 'iec-60309-3p-e-4h'
    iec_60309_3p_e_6h = 'iec-60309-3p-e-6h'
    iec_60309_3p_e_9h = 'iec-60309-3p-e-9h'
    iec_60309_3p_n_e_4h = 'iec-60309-3p-n-e-4h'
    iec_60309_3p_n_e_6h = 'iec-60309-3p-n-e-6h'
    iec_60309_3p_n_e_9h = 'iec-60309-3p-n-e-9h'
    nema_1_15p = 'nema-1-15p'
    nema_5_15p = 'nema-5-15p'
    nema_5_20p = 'nema-5-20p'
    nema_5_30p = 'nema-5-30p'
    nema_5_50p = 'nema-5-50p'
    nema_6_15p = 'nema-6-15p'
    nema_6_20p = 'nema-6-20p'
    nema_6_30p = 'nema-6-30p'
    nema_6_50p = 'nema-6-50p'
    nema_10_30p = 'nema-10-30p'
    nema_10_50p = 'nema-10-50p'
    nema_14_20p = 'nema-14-20p'
    nema_14_30p = 'nema-14-30p'
    nema_14_50p = 'nema-14-50p'
    nema_14_60p = 'nema-14-60p'
    nema_15_15p = 'nema-15-15p'
    nema_15_20p = 'nema-15-20p'
    nema_15_30p = 'nema-15-30p'
    nema_15_50p = 'nema-15-50p'
    nema_15_60p = 'nema-15-60p'
    nema_l1_15p = 'nema-l1-15p'
    nema_l5_15p = 'nema-l5-15p'
    nema_l5_20p = 'nema-l5-20p'
    nema_l5_30p = 'nema-l5-30p'
    nema_l5_50p = 'nema-l5-50p'
    nema_l6_15p = 'nema-l6-15p'
    nema_l6_20p = 'nema-l6-20p'
    nema_l6_30p = 'nema-l6-30p'
    nema_l6_50p = 'nema-l6-50p'
    nema_l10_30p = 'nema-l10-30p'
    nema_l14_20p = 'nema-l14-20p'
    nema_l14_30p = 'nema-l14-30p'
    nema_l14_50p = 'nema-l14-50p'
    nema_l14_60p = 'nema-l14-60p'
    nema_l15_20p = 'nema-l15-20p'
    nema_l15_30p = 'nema-l15-30p'
    nema_l15_50p = 'nema-l15-50p'
    nema_l15_60p = 'nema-l15-60p'
    nema_l21_20p = 'nema-l21-20p'
    nema_l21_30p = 'nema-l21-30p'
    nema_l22_30p = 'nema-l22-30p'
    cs6361c = 'cs6361c'
    cs6365c = 'cs6365c'
    cs8165c = 'cs8165c'
    cs8265c = 'cs8265c'
    cs8365c = 'cs8365c'
    cs8465c = 'cs8465c'
    ita_c = 'ita-c'
    ita_e = 'ita-e'
    ita_f = 'ita-f'
    ita_ef = 'ita-ef'
    ita_g = 'ita-g'
    ita_h = 'ita-h'
    ita_i = 'ita-i'
    ita_j = 'ita-j'
    ita_k = 'ita-k'
    ita_l = 'ita-l'
    ita_m = 'ita-m'
    ita_n = 'ita-n'
    ita_o = 'ita-o'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    usb_3_b = 'usb-3-b'
    usb_3_micro_b = 'usb-3-micro-b'
    dc_terminal = 'dc-terminal'
    saf_d_grid = 'saf-d-grid'
    hardwired = 'hardwired'


class Type24(BaseModel):
    label: Label31
    value: Value31


class PowerPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: NestedDeviceType
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type24] = Field(None, title='Type')
    maximum_draw: Optional[conint(ge=1, le=32767)] = Field(
        None, description='Maximum power draw (watts)', title='Maximum draw'
    )
    allocated_draw: Optional[conint(ge=1, le=32767)] = Field(
        None, description='Allocated power draw (watts)', title='Allocated draw'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type25(Enum):
    iec_60320_c6 = 'iec-60320-c6'
    iec_60320_c8 = 'iec-60320-c8'
    iec_60320_c14 = 'iec-60320-c14'
    iec_60320_c16 = 'iec-60320-c16'
    iec_60320_c20 = 'iec-60320-c20'
    iec_60320_c22 = 'iec-60320-c22'
    iec_60309_p_n_e_4h = 'iec-60309-p-n-e-4h'
    iec_60309_p_n_e_6h = 'iec-60309-p-n-e-6h'
    iec_60309_p_n_e_9h = 'iec-60309-p-n-e-9h'
    iec_60309_2p_e_4h = 'iec-60309-2p-e-4h'
    iec_60309_2p_e_6h = 'iec-60309-2p-e-6h'
    iec_60309_2p_e_9h = 'iec-60309-2p-e-9h'
    iec_60309_3p_e_4h = 'iec-60309-3p-e-4h'
    iec_60309_3p_e_6h = 'iec-60309-3p-e-6h'
    iec_60309_3p_e_9h = 'iec-60309-3p-e-9h'
    iec_60309_3p_n_e_4h = 'iec-60309-3p-n-e-4h'
    iec_60309_3p_n_e_6h = 'iec-60309-3p-n-e-6h'
    iec_60309_3p_n_e_9h = 'iec-60309-3p-n-e-9h'
    nema_1_15p = 'nema-1-15p'
    nema_5_15p = 'nema-5-15p'
    nema_5_20p = 'nema-5-20p'
    nema_5_30p = 'nema-5-30p'
    nema_5_50p = 'nema-5-50p'
    nema_6_15p = 'nema-6-15p'
    nema_6_20p = 'nema-6-20p'
    nema_6_30p = 'nema-6-30p'
    nema_6_50p = 'nema-6-50p'
    nema_10_30p = 'nema-10-30p'
    nema_10_50p = 'nema-10-50p'
    nema_14_20p = 'nema-14-20p'
    nema_14_30p = 'nema-14-30p'
    nema_14_50p = 'nema-14-50p'
    nema_14_60p = 'nema-14-60p'
    nema_15_15p = 'nema-15-15p'
    nema_15_20p = 'nema-15-20p'
    nema_15_30p = 'nema-15-30p'
    nema_15_50p = 'nema-15-50p'
    nema_15_60p = 'nema-15-60p'
    nema_l1_15p = 'nema-l1-15p'
    nema_l5_15p = 'nema-l5-15p'
    nema_l5_20p = 'nema-l5-20p'
    nema_l5_30p = 'nema-l5-30p'
    nema_l5_50p = 'nema-l5-50p'
    nema_l6_15p = 'nema-l6-15p'
    nema_l6_20p = 'nema-l6-20p'
    nema_l6_30p = 'nema-l6-30p'
    nema_l6_50p = 'nema-l6-50p'
    nema_l10_30p = 'nema-l10-30p'
    nema_l14_20p = 'nema-l14-20p'
    nema_l14_30p = 'nema-l14-30p'
    nema_l14_50p = 'nema-l14-50p'
    nema_l14_60p = 'nema-l14-60p'
    nema_l15_20p = 'nema-l15-20p'
    nema_l15_30p = 'nema-l15-30p'
    nema_l15_50p = 'nema-l15-50p'
    nema_l15_60p = 'nema-l15-60p'
    nema_l21_20p = 'nema-l21-20p'
    nema_l21_30p = 'nema-l21-30p'
    nema_l22_30p = 'nema-l22-30p'
    cs6361c = 'cs6361c'
    cs6365c = 'cs6365c'
    cs8165c = 'cs8165c'
    cs8265c = 'cs8265c'
    cs8365c = 'cs8365c'
    cs8465c = 'cs8465c'
    ita_c = 'ita-c'
    ita_e = 'ita-e'
    ita_f = 'ita-f'
    ita_ef = 'ita-ef'
    ita_g = 'ita-g'
    ita_h = 'ita-h'
    ita_i = 'ita-i'
    ita_j = 'ita-j'
    ita_k = 'ita-k'
    ita_l = 'ita-l'
    ita_m = 'ita-m'
    ita_n = 'ita-n'
    ita_o = 'ita-o'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    usb_3_b = 'usb-3-b'
    usb_3_micro_b = 'usb-3-micro-b'
    dc_terminal = 'dc-terminal'
    saf_d_grid = 'saf-d-grid'
    hardwired = 'hardwired'


class WritablePowerPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: int = Field(..., title='Device type')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type25] = Field(None, title='Type')
    maximum_draw: Optional[conint(ge=1, le=32767)] = Field(
        None, description='Maximum power draw (watts)', title='Maximum draw'
    )
    allocated_draw: Optional[conint(ge=1, le=32767)] = Field(
        None, description='Allocated power draw (watts)', title='Allocated draw'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Label32(Enum):
    C6 = 'C6'
    C8 = 'C8'
    C14 = 'C14'
    C16 = 'C16'
    C20 = 'C20'
    C22 = 'C22'
    P_N_E_4H = 'P+N+E 4H'
    P_N_E_6H = 'P+N+E 6H'
    P_N_E_9H = 'P+N+E 9H'
    field_2P_E_4H = '2P+E 4H'
    field_2P_E_6H = '2P+E 6H'
    field_2P_E_9H = '2P+E 9H'
    field_3P_E_4H = '3P+E 4H'
    field_3P_E_6H = '3P+E 6H'
    field_3P_E_9H = '3P+E 9H'
    field_3P_N_E_4H = '3P+N+E 4H'
    field_3P_N_E_6H = '3P+N+E 6H'
    field_3P_N_E_9H = '3P+N+E 9H'
    NEMA_1_15P = 'NEMA 1-15P'
    NEMA_5_15P = 'NEMA 5-15P'
    NEMA_5_20P = 'NEMA 5-20P'
    NEMA_5_30P = 'NEMA 5-30P'
    NEMA_5_50P = 'NEMA 5-50P'
    NEMA_6_15P = 'NEMA 6-15P'
    NEMA_6_20P = 'NEMA 6-20P'
    NEMA_6_30P = 'NEMA 6-30P'
    NEMA_6_50P = 'NEMA 6-50P'
    NEMA_10_30P = 'NEMA 10-30P'
    NEMA_10_50P = 'NEMA 10-50P'
    NEMA_14_20P = 'NEMA 14-20P'
    NEMA_14_30P = 'NEMA 14-30P'
    NEMA_14_50P = 'NEMA 14-50P'
    NEMA_14_60P = 'NEMA 14-60P'
    NEMA_15_15P = 'NEMA 15-15P'
    NEMA_15_20P = 'NEMA 15-20P'
    NEMA_15_30P = 'NEMA 15-30P'
    NEMA_15_50P = 'NEMA 15-50P'
    NEMA_15_60P = 'NEMA 15-60P'
    NEMA_L1_15P = 'NEMA L1-15P'
    NEMA_L5_15P = 'NEMA L5-15P'
    NEMA_L5_20P = 'NEMA L5-20P'
    NEMA_L5_30P = 'NEMA L5-30P'
    NEMA_L5_50P = 'NEMA L5-50P'
    NEMA_L6_15P = 'NEMA L6-15P'
    NEMA_L6_20P = 'NEMA L6-20P'
    NEMA_L6_30P = 'NEMA L6-30P'
    NEMA_L6_50P = 'NEMA L6-50P'
    NEMA_L10_30P = 'NEMA L10-30P'
    NEMA_L14_20P = 'NEMA L14-20P'
    NEMA_L14_30P = 'NEMA L14-30P'
    NEMA_L14_50P = 'NEMA L14-50P'
    NEMA_L14_60P = 'NEMA L14-60P'
    NEMA_L15_20P = 'NEMA L15-20P'
    NEMA_L15_30P = 'NEMA L15-30P'
    NEMA_L15_50P = 'NEMA L15-50P'
    NEMA_L15_60P = 'NEMA L15-60P'
    NEMA_L21_20P = 'NEMA L21-20P'
    NEMA_L21_30P = 'NEMA L21-30P'
    NEMA_L22_30P = 'NEMA L22-30P'
    CS6361C = 'CS6361C'
    CS6365C = 'CS6365C'
    CS8165C = 'CS8165C'
    CS8265C = 'CS8265C'
    CS8365C = 'CS8365C'
    CS8465C = 'CS8465C'
    ITA_Type_C__CEE_7_16_ = 'ITA Type C (CEE 7/16)'
    ITA_Type_E__CEE_7_6_ = 'ITA Type E (CEE 7/6)'
    ITA_Type_F__CEE_7_4_ = 'ITA Type F (CEE 7/4)'
    ITA_Type_E_F__CEE_7_7_ = 'ITA Type E/F (CEE 7/7)'
    ITA_Type_G__BS_1363_ = 'ITA Type G (BS 1363)'
    ITA_Type_H = 'ITA Type H'
    ITA_Type_I = 'ITA Type I'
    ITA_Type_J = 'ITA Type J'
    ITA_Type_K = 'ITA Type K'
    ITA_Type_L__CEI_23_50_ = 'ITA Type L (CEI 23-50)'
    ITA_Type_M__BS_546_ = 'ITA Type M (BS 546)'
    ITA_Type_N = 'ITA Type N'
    ITA_Type_O = 'ITA Type O'
    USB_Type_A = 'USB Type A'
    USB_Type_B = 'USB Type B'
    USB_Type_C = 'USB Type C'
    USB_Mini_A = 'USB Mini A'
    USB_Mini_B = 'USB Mini B'
    USB_Micro_A = 'USB Micro A'
    USB_Micro_B = 'USB Micro B'
    USB_Micro_AB = 'USB Micro AB'
    USB_3_0_Type_B = 'USB 3.0 Type B'
    USB_3_0_Micro_B = 'USB 3.0 Micro B'
    DC_Terminal = 'DC Terminal'
    Saf_D_Grid = 'Saf-D-Grid'
    Hardwired = 'Hardwired'


class Value32(Enum):
    iec_60320_c6 = 'iec-60320-c6'
    iec_60320_c8 = 'iec-60320-c8'
    iec_60320_c14 = 'iec-60320-c14'
    iec_60320_c16 = 'iec-60320-c16'
    iec_60320_c20 = 'iec-60320-c20'
    iec_60320_c22 = 'iec-60320-c22'
    iec_60309_p_n_e_4h = 'iec-60309-p-n-e-4h'
    iec_60309_p_n_e_6h = 'iec-60309-p-n-e-6h'
    iec_60309_p_n_e_9h = 'iec-60309-p-n-e-9h'
    iec_60309_2p_e_4h = 'iec-60309-2p-e-4h'
    iec_60309_2p_e_6h = 'iec-60309-2p-e-6h'
    iec_60309_2p_e_9h = 'iec-60309-2p-e-9h'
    iec_60309_3p_e_4h = 'iec-60309-3p-e-4h'
    iec_60309_3p_e_6h = 'iec-60309-3p-e-6h'
    iec_60309_3p_e_9h = 'iec-60309-3p-e-9h'
    iec_60309_3p_n_e_4h = 'iec-60309-3p-n-e-4h'
    iec_60309_3p_n_e_6h = 'iec-60309-3p-n-e-6h'
    iec_60309_3p_n_e_9h = 'iec-60309-3p-n-e-9h'
    nema_1_15p = 'nema-1-15p'
    nema_5_15p = 'nema-5-15p'
    nema_5_20p = 'nema-5-20p'
    nema_5_30p = 'nema-5-30p'
    nema_5_50p = 'nema-5-50p'
    nema_6_15p = 'nema-6-15p'
    nema_6_20p = 'nema-6-20p'
    nema_6_30p = 'nema-6-30p'
    nema_6_50p = 'nema-6-50p'
    nema_10_30p = 'nema-10-30p'
    nema_10_50p = 'nema-10-50p'
    nema_14_20p = 'nema-14-20p'
    nema_14_30p = 'nema-14-30p'
    nema_14_50p = 'nema-14-50p'
    nema_14_60p = 'nema-14-60p'
    nema_15_15p = 'nema-15-15p'
    nema_15_20p = 'nema-15-20p'
    nema_15_30p = 'nema-15-30p'
    nema_15_50p = 'nema-15-50p'
    nema_15_60p = 'nema-15-60p'
    nema_l1_15p = 'nema-l1-15p'
    nema_l5_15p = 'nema-l5-15p'
    nema_l5_20p = 'nema-l5-20p'
    nema_l5_30p = 'nema-l5-30p'
    nema_l5_50p = 'nema-l5-50p'
    nema_l6_15p = 'nema-l6-15p'
    nema_l6_20p = 'nema-l6-20p'
    nema_l6_30p = 'nema-l6-30p'
    nema_l6_50p = 'nema-l6-50p'
    nema_l10_30p = 'nema-l10-30p'
    nema_l14_20p = 'nema-l14-20p'
    nema_l14_30p = 'nema-l14-30p'
    nema_l14_50p = 'nema-l14-50p'
    nema_l14_60p = 'nema-l14-60p'
    nema_l15_20p = 'nema-l15-20p'
    nema_l15_30p = 'nema-l15-30p'
    nema_l15_50p = 'nema-l15-50p'
    nema_l15_60p = 'nema-l15-60p'
    nema_l21_20p = 'nema-l21-20p'
    nema_l21_30p = 'nema-l21-30p'
    nema_l22_30p = 'nema-l22-30p'
    cs6361c = 'cs6361c'
    cs6365c = 'cs6365c'
    cs8165c = 'cs8165c'
    cs8265c = 'cs8265c'
    cs8365c = 'cs8365c'
    cs8465c = 'cs8465c'
    ita_c = 'ita-c'
    ita_e = 'ita-e'
    ita_f = 'ita-f'
    ita_ef = 'ita-ef'
    ita_g = 'ita-g'
    ita_h = 'ita-h'
    ita_i = 'ita-i'
    ita_j = 'ita-j'
    ita_k = 'ita-k'
    ita_l = 'ita-l'
    ita_m = 'ita-m'
    ita_n = 'ita-n'
    ita_o = 'ita-o'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    usb_3_b = 'usb-3-b'
    usb_3_micro_b = 'usb-3-micro-b'
    dc_terminal = 'dc-terminal'
    saf_d_grid = 'saf-d-grid'
    hardwired = 'hardwired'


class Type26(BaseModel):
    label: Label32
    value: Value32


class PowerPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type26] = Field(None, title='Type')
    maximum_draw: Optional[conint(ge=1, le=32767)] = Field(
        None, description='Maximum power draw (watts)', title='Maximum draw'
    )
    allocated_draw: Optional[conint(ge=1, le=32767)] = Field(
        None, description='Allocated power draw (watts)', title='Allocated draw'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Type27(Enum):
    iec_60320_c6 = 'iec-60320-c6'
    iec_60320_c8 = 'iec-60320-c8'
    iec_60320_c14 = 'iec-60320-c14'
    iec_60320_c16 = 'iec-60320-c16'
    iec_60320_c20 = 'iec-60320-c20'
    iec_60320_c22 = 'iec-60320-c22'
    iec_60309_p_n_e_4h = 'iec-60309-p-n-e-4h'
    iec_60309_p_n_e_6h = 'iec-60309-p-n-e-6h'
    iec_60309_p_n_e_9h = 'iec-60309-p-n-e-9h'
    iec_60309_2p_e_4h = 'iec-60309-2p-e-4h'
    iec_60309_2p_e_6h = 'iec-60309-2p-e-6h'
    iec_60309_2p_e_9h = 'iec-60309-2p-e-9h'
    iec_60309_3p_e_4h = 'iec-60309-3p-e-4h'
    iec_60309_3p_e_6h = 'iec-60309-3p-e-6h'
    iec_60309_3p_e_9h = 'iec-60309-3p-e-9h'
    iec_60309_3p_n_e_4h = 'iec-60309-3p-n-e-4h'
    iec_60309_3p_n_e_6h = 'iec-60309-3p-n-e-6h'
    iec_60309_3p_n_e_9h = 'iec-60309-3p-n-e-9h'
    nema_1_15p = 'nema-1-15p'
    nema_5_15p = 'nema-5-15p'
    nema_5_20p = 'nema-5-20p'
    nema_5_30p = 'nema-5-30p'
    nema_5_50p = 'nema-5-50p'
    nema_6_15p = 'nema-6-15p'
    nema_6_20p = 'nema-6-20p'
    nema_6_30p = 'nema-6-30p'
    nema_6_50p = 'nema-6-50p'
    nema_10_30p = 'nema-10-30p'
    nema_10_50p = 'nema-10-50p'
    nema_14_20p = 'nema-14-20p'
    nema_14_30p = 'nema-14-30p'
    nema_14_50p = 'nema-14-50p'
    nema_14_60p = 'nema-14-60p'
    nema_15_15p = 'nema-15-15p'
    nema_15_20p = 'nema-15-20p'
    nema_15_30p = 'nema-15-30p'
    nema_15_50p = 'nema-15-50p'
    nema_15_60p = 'nema-15-60p'
    nema_l1_15p = 'nema-l1-15p'
    nema_l5_15p = 'nema-l5-15p'
    nema_l5_20p = 'nema-l5-20p'
    nema_l5_30p = 'nema-l5-30p'
    nema_l5_50p = 'nema-l5-50p'
    nema_l6_15p = 'nema-l6-15p'
    nema_l6_20p = 'nema-l6-20p'
    nema_l6_30p = 'nema-l6-30p'
    nema_l6_50p = 'nema-l6-50p'
    nema_l10_30p = 'nema-l10-30p'
    nema_l14_20p = 'nema-l14-20p'
    nema_l14_30p = 'nema-l14-30p'
    nema_l14_50p = 'nema-l14-50p'
    nema_l14_60p = 'nema-l14-60p'
    nema_l15_20p = 'nema-l15-20p'
    nema_l15_30p = 'nema-l15-30p'
    nema_l15_50p = 'nema-l15-50p'
    nema_l15_60p = 'nema-l15-60p'
    nema_l21_20p = 'nema-l21-20p'
    nema_l21_30p = 'nema-l21-30p'
    nema_l22_30p = 'nema-l22-30p'
    cs6361c = 'cs6361c'
    cs6365c = 'cs6365c'
    cs8165c = 'cs8165c'
    cs8265c = 'cs8265c'
    cs8365c = 'cs8365c'
    cs8465c = 'cs8465c'
    ita_c = 'ita-c'
    ita_e = 'ita-e'
    ita_f = 'ita-f'
    ita_ef = 'ita-ef'
    ita_g = 'ita-g'
    ita_h = 'ita-h'
    ita_i = 'ita-i'
    ita_j = 'ita-j'
    ita_k = 'ita-k'
    ita_l = 'ita-l'
    ita_m = 'ita-m'
    ita_n = 'ita-n'
    ita_o = 'ita-o'
    usb_a = 'usb-a'
    usb_b = 'usb-b'
    usb_c = 'usb-c'
    usb_mini_a = 'usb-mini-a'
    usb_mini_b = 'usb-mini-b'
    usb_micro_a = 'usb-micro-a'
    usb_micro_b = 'usb-micro-b'
    usb_micro_ab = 'usb-micro-ab'
    usb_3_b = 'usb-3-b'
    usb_3_micro_b = 'usb-3-micro-b'
    dc_terminal = 'dc-terminal'
    saf_d_grid = 'saf-d-grid'
    hardwired = 'hardwired'


class WritablePowerPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Optional[Type27] = Field(None, description='Physical port type', title='Type')
    maximum_draw: Optional[conint(ge=1, le=32767)] = Field(
        None, description='Maximum power draw (watts)', title='Maximum draw'
    )
    allocated_draw: Optional[conint(ge=1, le=32767)] = Field(
        None, description='Allocated power draw (watts)', title='Allocated draw'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    connected_endpoint: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the type of connected object.\n',
        title='Connected endpoint',
    )
    connected_endpoint_type: Optional[str] = Field(
        None, title='Connected endpoint type'
    )
    connected_endpoint_reachable: Optional[bool] = Field(
        None, title='Connected endpoint reachable'
    )
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class NestedUser(BaseModel):
    id: Optional[int] = Field(None, title='ID')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    username: constr(regex=r'^[\w.@+-]+$', min_length=1, max_length=150) = Field(
        ...,
        description='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
        title='Username',
    )


class RackReservation(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    rack: NestedRack
    units: List[conint(ge=0, le=32767)]
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    user: NestedUser
    tenant: Optional[NestedTenant] = None
    description: constr(min_length=1, max_length=200) = Field(..., title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')


class WritableRackReservation(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    rack: int = Field(..., title='Rack')
    units: List[conint(ge=0, le=32767)]
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    user: int = Field(..., title='User')
    tenant: Optional[int] = Field(None, title='Tenant')
    description: constr(min_length=1, max_length=200) = Field(..., title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')


class RackRole(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', min_length=1, max_length=6)] = Field(
        None, title='Color'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    rack_count: Optional[int] = Field(None, title='Rack count')


class NestedRackRole(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    rack_count: Optional[int] = Field(None, title='Rack count')


class Label33(Enum):
    Reserved = 'Reserved'
    Available = 'Available'
    Planned = 'Planned'
    Active = 'Active'
    Deprecated = 'Deprecated'


class Value33(Enum):
    reserved = 'reserved'
    available = 'available'
    planned = 'planned'
    active = 'active'
    deprecated = 'deprecated'


class Status9(BaseModel):
    label: Label33
    value: Value33


class Label34(Enum):
    field_2_post_frame = '2-post frame'
    field_4_post_frame = '4-post frame'
    field_4_post_cabinet = '4-post cabinet'
    Wall_mounted_frame = 'Wall-mounted frame'
    Wall_mounted_cabinet = 'Wall-mounted cabinet'


class Value34(Enum):
    field_2_post_frame = '2-post-frame'
    field_4_post_frame = '4-post-frame'
    field_4_post_cabinet = '4-post-cabinet'
    wall_frame = 'wall-frame'
    wall_cabinet = 'wall-cabinet'


class Type28(BaseModel):
    label: Label34
    value: Value34


class Label35(Enum):
    field_10_inches = '10 inches'
    field_19_inches = '19 inches'
    field_21_inches = '21 inches'
    field_23_inches = '23 inches'


class Value35(Enum):
    integer_10 = 10
    integer_19 = 19
    integer_21 = 21
    integer_23 = 23


class Width(BaseModel):
    label: Label35
    value: Value35


class Label36(Enum):
    Millimeters = 'Millimeters'
    Inches = 'Inches'


class Value36(Enum):
    mm = 'mm'
    in_ = 'in'


class OuterUnit(BaseModel):
    label: Label36
    value: Value36


class Rack(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    facility_id: Optional[constr(max_length=50)] = Field(None, title='Facility ID')
    site: NestedSite
    location: Optional[NestedLocation] = None
    tenant: Optional[NestedTenant] = None
    status: Optional[Status9] = Field(None, title='Status')
    role: Optional[NestedRackRole] = None
    serial: Optional[constr(max_length=50)] = Field(None, title='Serial number')
    asset_tag: Optional[constr(max_length=50)] = Field(
        None, description='A unique tag used to identify this rack', title='Asset tag'
    )
    type: Optional[Type28] = Field(None, title='Type')
    width: Optional[Width] = Field(None, title='Width')
    u_height: Optional[conint(ge=1, le=100)] = Field(
        None, description='Height in rack units', title='Height (U)'
    )
    desc_units: Optional[bool] = Field(
        None, description='Units are numbered top-to-bottom', title='Descending units'
    )
    outer_width: Optional[conint(ge=0, le=32767)] = Field(
        None, description='Outer dimension of rack (width)', title='Outer width'
    )
    outer_depth: Optional[conint(ge=0, le=32767)] = Field(
        None, description='Outer dimension of rack (depth)', title='Outer depth'
    )
    outer_unit: Optional[OuterUnit] = Field(None, title='Outer unit')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')
    powerfeed_count: Optional[int] = Field(None, title='Powerfeed count')


class Status10(Enum):
    reserved = 'reserved'
    available = 'available'
    planned = 'planned'
    active = 'active'
    deprecated = 'deprecated'


class Type29(Enum):
    field_2_post_frame = '2-post-frame'
    field_4_post_frame = '4-post-frame'
    field_4_post_cabinet = '4-post-cabinet'
    wall_frame = 'wall-frame'
    wall_cabinet = 'wall-cabinet'


class Width1(Enum):
    integer_10 = 10
    integer_19 = 19
    integer_21 = 21
    integer_23 = 23


class OuterUnit1(Enum):
    mm = 'mm'
    in_ = 'in'


class WritableRack(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    facility_id: Optional[constr(max_length=50)] = Field(None, title='Facility ID')
    site: int = Field(..., title='Site')
    location: int = Field(..., title='Location')
    tenant: Optional[int] = Field(None, title='Tenant')
    status: Optional[Status10] = Field(None, title='Status')
    role: Optional[int] = Field(None, description='Functional role', title='Role')
    serial: Optional[constr(max_length=50)] = Field(None, title='Serial number')
    asset_tag: Optional[constr(max_length=50)] = Field(
        None, description='A unique tag used to identify this rack', title='Asset tag'
    )
    type: Optional[Type29] = Field(None, title='Type')
    width: Optional[Width1] = Field(
        None, description='Rail-to-rail width', title='Width'
    )
    u_height: Optional[conint(ge=1, le=100)] = Field(
        None, description='Height in rack units', title='Height (U)'
    )
    desc_units: Optional[bool] = Field(
        None, description='Units are numbered top-to-bottom', title='Descending units'
    )
    outer_width: Optional[conint(ge=0, le=32767)] = Field(
        None, description='Outer dimension of rack (width)', title='Outer width'
    )
    outer_depth: Optional[conint(ge=0, le=32767)] = Field(
        None, description='Outer dimension of rack (depth)', title='Outer depth'
    )
    outer_unit: Optional[OuterUnit1] = Field(None, title='Outer unit')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')
    powerfeed_count: Optional[int] = Field(None, title='Powerfeed count')


class Label37(Enum):
    Front = 'Front'
    Rear = 'Rear'


class Value37(Enum):
    front = 'front'
    rear = 'rear'


class Face3(BaseModel):
    label: Label37
    value: Value37


class RackUnit(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    name: Optional[constr(min_length=1)] = Field(None, title='Name')
    face: Optional[Face3] = Field(None, title='Face')
    device: Optional[NestedDevice] = None
    occupied: Optional[bool] = Field(None, title='Occupied')
    display: Optional[str] = Field(None, title='Display')


class Label38(Enum):
    field_8P8C = '8P8C'
    field_8P6C = '8P6C'
    field_8P4C = '8P4C'
    field_8P2C = '8P2C'
    field_6P6C = '6P6C'
    field_6P4C = '6P4C'
    field_6P2C = '6P2C'
    field_4P4C = '4P4C'
    field_4P2C = '4P2C'
    GG45 = 'GG45'
    TERA_4P = 'TERA 4P'
    TERA_2P = 'TERA 2P'
    TERA_1P = 'TERA 1P'
    field_110_Punch = '110 Punch'
    BNC = 'BNC'
    F_Connector = 'F Connector'
    N_Connector = 'N Connector'
    MRJ21 = 'MRJ21'
    FC = 'FC'
    LC = 'LC'
    LC_APC = 'LC/APC'
    LSH = 'LSH'
    LSH_APC = 'LSH/APC'
    MPO = 'MPO'
    MTRJ = 'MTRJ'
    SC = 'SC'
    SC_APC = 'SC/APC'
    ST = 'ST'
    CS = 'CS'
    SN = 'SN'
    SMA_905 = 'SMA 905'
    SMA_906 = 'SMA 906'
    URM_P2 = 'URM-P2'
    URM_P4 = 'URM-P4'
    URM_P8 = 'URM-P8'
    Splice = 'Splice'


class Value38(Enum):
    field_8p8c = '8p8c'
    field_8p6c = '8p6c'
    field_8p4c = '8p4c'
    field_8p2c = '8p2c'
    field_6p6c = '6p6c'
    field_6p4c = '6p4c'
    field_6p2c = '6p2c'
    field_4p4c = '4p4c'
    field_4p2c = '4p2c'
    gg45 = 'gg45'
    tera_4p = 'tera-4p'
    tera_2p = 'tera-2p'
    tera_1p = 'tera-1p'
    field_110_punch = '110-punch'
    bnc = 'bnc'
    f = 'f'
    n = 'n'
    mrj21 = 'mrj21'
    fc = 'fc'
    lc = 'lc'
    lc_apc = 'lc-apc'
    lsh = 'lsh'
    lsh_apc = 'lsh-apc'
    mpo = 'mpo'
    mtrj = 'mtrj'
    sc = 'sc'
    sc_apc = 'sc-apc'
    st = 'st'
    cs = 'cs'
    sn = 'sn'
    sma_905 = 'sma-905'
    sma_906 = 'sma-906'
    urm_p2 = 'urm-p2'
    urm_p4 = 'urm-p4'
    urm_p8 = 'urm-p8'
    splice = 'splice'


class Type30(BaseModel):
    label: Label38
    value: Value38


class RearPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: NestedDeviceType
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type30 = Field(..., title='Type')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    positions: Optional[conint(ge=1, le=1024)] = Field(None, title='Positions')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type31(Enum):
    field_8p8c = '8p8c'
    field_8p6c = '8p6c'
    field_8p4c = '8p4c'
    field_8p2c = '8p2c'
    field_6p6c = '6p6c'
    field_6p4c = '6p4c'
    field_6p2c = '6p2c'
    field_4p4c = '4p4c'
    field_4p2c = '4p2c'
    gg45 = 'gg45'
    tera_4p = 'tera-4p'
    tera_2p = 'tera-2p'
    tera_1p = 'tera-1p'
    field_110_punch = '110-punch'
    bnc = 'bnc'
    f = 'f'
    n = 'n'
    mrj21 = 'mrj21'
    fc = 'fc'
    lc = 'lc'
    lc_apc = 'lc-apc'
    lsh = 'lsh'
    lsh_apc = 'lsh-apc'
    mpo = 'mpo'
    mtrj = 'mtrj'
    sc = 'sc'
    sc_apc = 'sc-apc'
    st = 'st'
    cs = 'cs'
    sn = 'sn'
    sma_905 = 'sma-905'
    sma_906 = 'sma-906'
    urm_p2 = 'urm-p2'
    urm_p4 = 'urm-p4'
    urm_p8 = 'urm-p8'
    splice = 'splice'


class WritableRearPortTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device_type: int = Field(..., title='Device type')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type31 = Field(..., title='Type')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    positions: Optional[conint(ge=1, le=1024)] = Field(None, title='Positions')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Label39(Enum):
    field_8P8C = '8P8C'
    field_8P6C = '8P6C'
    field_8P4C = '8P4C'
    field_8P2C = '8P2C'
    field_6P6C = '6P6C'
    field_6P4C = '6P4C'
    field_6P2C = '6P2C'
    field_4P4C = '4P4C'
    field_4P2C = '4P2C'
    GG45 = 'GG45'
    TERA_4P = 'TERA 4P'
    TERA_2P = 'TERA 2P'
    TERA_1P = 'TERA 1P'
    field_110_Punch = '110 Punch'
    BNC = 'BNC'
    F_Connector = 'F Connector'
    N_Connector = 'N Connector'
    MRJ21 = 'MRJ21'
    FC = 'FC'
    LC = 'LC'
    LC_APC = 'LC/APC'
    LSH = 'LSH'
    LSH_APC = 'LSH/APC'
    MPO = 'MPO'
    MTRJ = 'MTRJ'
    SC = 'SC'
    SC_APC = 'SC/APC'
    ST = 'ST'
    CS = 'CS'
    SN = 'SN'
    SMA_905 = 'SMA 905'
    SMA_906 = 'SMA 906'
    URM_P2 = 'URM-P2'
    URM_P4 = 'URM-P4'
    URM_P8 = 'URM-P8'
    Splice = 'Splice'


class Value39(Enum):
    field_8p8c = '8p8c'
    field_8p6c = '8p6c'
    field_8p4c = '8p4c'
    field_8p2c = '8p2c'
    field_6p6c = '6p6c'
    field_6p4c = '6p4c'
    field_6p2c = '6p2c'
    field_4p4c = '4p4c'
    field_4p2c = '4p2c'
    gg45 = 'gg45'
    tera_4p = 'tera-4p'
    tera_2p = 'tera-2p'
    tera_1p = 'tera-1p'
    field_110_punch = '110-punch'
    bnc = 'bnc'
    f = 'f'
    n = 'n'
    mrj21 = 'mrj21'
    fc = 'fc'
    lc = 'lc'
    lc_apc = 'lc-apc'
    lsh = 'lsh'
    lsh_apc = 'lsh-apc'
    mpo = 'mpo'
    mtrj = 'mtrj'
    sc = 'sc'
    sc_apc = 'sc-apc'
    st = 'st'
    cs = 'cs'
    sn = 'sn'
    sma_905 = 'sma-905'
    sma_906 = 'sma-906'
    urm_p2 = 'urm-p2'
    urm_p4 = 'urm-p4'
    urm_p8 = 'urm-p8'
    splice = 'splice'


class Type32(BaseModel):
    label: Label39
    value: Value39


class RearPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: NestedDevice
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type32 = Field(..., title='Type')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    positions: Optional[conint(ge=1, le=1024)] = Field(None, title='Positions')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class Type33(Enum):
    field_8p8c = '8p8c'
    field_8p6c = '8p6c'
    field_8p4c = '8p4c'
    field_8p2c = '8p2c'
    field_6p6c = '6p6c'
    field_6p4c = '6p4c'
    field_6p2c = '6p2c'
    field_4p4c = '4p4c'
    field_4p2c = '4p2c'
    gg45 = 'gg45'
    tera_4p = 'tera-4p'
    tera_2p = 'tera-2p'
    tera_1p = 'tera-1p'
    field_110_punch = '110-punch'
    bnc = 'bnc'
    f = 'f'
    n = 'n'
    mrj21 = 'mrj21'
    fc = 'fc'
    lc = 'lc'
    lc_apc = 'lc-apc'
    lsh = 'lsh'
    lsh_apc = 'lsh-apc'
    mpo = 'mpo'
    mtrj = 'mtrj'
    sc = 'sc'
    sc_apc = 'sc-apc'
    st = 'st'
    cs = 'cs'
    sn = 'sn'
    sma_905 = 'sma-905'
    sma_906 = 'sma-906'
    urm_p2 = 'urm-p2'
    urm_p4 = 'urm-p4'
    urm_p8 = 'urm-p8'
    splice = 'splice'


class WritableRearPort(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: int = Field(..., title='Device')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    label: Optional[constr(max_length=64)] = Field(
        None, description='Physical label', title='Label'
    )
    type: Type33 = Field(..., title='Type')
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', max_length=6)] = Field(
        None, title='Color'
    )
    positions: Optional[conint(ge=1, le=1024)] = Field(None, title='Positions')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mark_connected: Optional[bool] = Field(
        None, description='Treat as if a cable is connected', title='Mark connected'
    )
    cable: Optional[NestedCable] = None
    link_peer: Optional[Dict[str, str]] = Field(
        None,
        description='\nReturn the appropriate serializer for the link termination model.\n',
        title='Link peer',
    )
    link_peer_type: Optional[str] = Field(None, title='Link peer type')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    _occupied: Optional[bool] = Field(None, title='occupied')


class NestedRegion(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    site_count: Optional[int] = Field(None, title='Site count')
    _depth: Optional[int] = Field(None, title='depth')


class Region(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: Optional[NestedRegion] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    site_count: Optional[int] = Field(None, title='Site count')
    _depth: Optional[int] = Field(None, title='depth')


class WritableRegion(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: Optional[int] = Field(None, title='Parent')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    site_count: Optional[int] = Field(None, title='Site count')
    _depth: Optional[int] = Field(None, title='depth')


class NestedSiteGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    site_count: Optional[int] = Field(None, title='Site count')
    _depth: Optional[int] = Field(None, title='depth')


class SiteGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: Optional[NestedSiteGroup] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    site_count: Optional[int] = Field(None, title='Site count')
    _depth: Optional[int] = Field(None, title='depth')


class WritableSiteGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: Optional[int] = Field(None, title='Parent')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    site_count: Optional[int] = Field(None, title='Site count')
    _depth: Optional[int] = Field(None, title='depth')


class NestedASN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    asn: conint(ge=1, le=4294967295) = Field(
        ..., description='32-bit autonomous system number', title='ASN'
    )


class Label40(Enum):
    Planned = 'Planned'
    Staging = 'Staging'
    Active = 'Active'
    Decommissioning = 'Decommissioning'
    Retired = 'Retired'


class Value40(Enum):
    planned = 'planned'
    staging = 'staging'
    active = 'active'
    decommissioning = 'decommissioning'
    retired = 'retired'


class Status11(BaseModel):
    label: Label40
    value: Value40


class Site(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    status: Optional[Status11] = Field(None, title='Status')
    region: Optional[NestedRegion] = None
    group: Optional[NestedSiteGroup] = None
    tenant: Optional[NestedTenant] = None
    facility: Optional[constr(max_length=50)] = Field(
        None, description='Local facility ID or description', title='Facility'
    )
    asn: Optional[conint(ge=1, le=4294967295)] = Field(
        None, description='32-bit autonomous system number', title='ASN'
    )
    asns: Optional[List[NestedASN]] = None
    time_zone: Optional[str] = Field(None, title='Time zone')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    physical_address: Optional[constr(max_length=200)] = Field(
        None, title='Physical address'
    )
    shipping_address: Optional[constr(max_length=200)] = Field(
        None, title='Shipping address'
    )
    latitude: Optional[Decimal] = Field(
        None, description='GPS coordinate (latitude)', title='Latitude'
    )
    longitude: Optional[Decimal] = Field(
        None, description='GPS coordinate (longitude)', title='Longitude'
    )
    contact_name: Optional[constr(max_length=50)] = Field(None, title='Contact name')
    contact_phone: Optional[constr(max_length=20)] = Field(None, title='Contact phone')
    contact_email: Optional[EmailStr] = Field(None, title='Contact E-mail')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    circuit_count: Optional[int] = Field(None, title='Circuit count')
    device_count: Optional[int] = Field(None, title='Device count')
    prefix_count: Optional[int] = Field(None, title='Prefix count')
    rack_count: Optional[int] = Field(None, title='Rack count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')
    vlan_count: Optional[int] = Field(None, title='Vlan count')


class Status12(Enum):
    planned = 'planned'
    staging = 'staging'
    active = 'active'
    decommissioning = 'decommissioning'
    retired = 'retired'


class WritableSite(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    status: Optional[Status12] = Field(None, title='Status')
    region: Optional[int] = Field(None, title='Region')
    group: Optional[int] = Field(None, title='Group')
    tenant: Optional[int] = Field(None, title='Tenant')
    facility: Optional[constr(max_length=50)] = Field(
        None, description='Local facility ID or description', title='Facility'
    )
    asn: Optional[conint(ge=1, le=4294967295)] = Field(
        None, description='32-bit autonomous system number', title='ASN'
    )
    asns: Optional[List[int]] = None
    time_zone: Optional[str] = Field(None, title='Time zone')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    physical_address: Optional[constr(max_length=200)] = Field(
        None, title='Physical address'
    )
    shipping_address: Optional[constr(max_length=200)] = Field(
        None, title='Shipping address'
    )
    latitude: Optional[Decimal] = Field(
        None, description='GPS coordinate (latitude)', title='Latitude'
    )
    longitude: Optional[Decimal] = Field(
        None, description='GPS coordinate (longitude)', title='Longitude'
    )
    contact_name: Optional[constr(max_length=50)] = Field(None, title='Contact name')
    contact_phone: Optional[constr(max_length=20)] = Field(None, title='Contact phone')
    contact_email: Optional[EmailStr] = Field(None, title='Contact E-mail')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    circuit_count: Optional[int] = Field(None, title='Circuit count')
    device_count: Optional[int] = Field(None, title='Device count')
    prefix_count: Optional[int] = Field(None, title='Prefix count')
    rack_count: Optional[int] = Field(None, title='Rack count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')
    vlan_count: Optional[int] = Field(None, title='Vlan count')


class VirtualChassis(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    domain: Optional[constr(max_length=30)] = Field(None, title='Domain')
    master: Optional[NestedDevice] = None
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    member_count: Optional[int] = Field(None, title='Member count')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableVirtualChassis(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    domain: Optional[constr(max_length=30)] = Field(None, title='Domain')
    master: Optional[int] = Field(None, title='Master')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    member_count: Optional[int] = Field(None, title='Member count')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedClusterGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    cluster_count: Optional[int] = Field(None, title='Cluster count')


class NestedTenantGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    tenant_count: Optional[int] = Field(None, title='Tenant count')
    _depth: Optional[int] = Field(None, title='depth')


class ConfigContext(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    weight: Optional[conint(ge=0, le=32767)] = Field(None, title='Weight')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    is_active: Optional[bool] = Field(None, title='Is active')
    regions: Optional[List[NestedRegion]] = None
    site_groups: Optional[List[NestedSiteGroup]] = None
    sites: Optional[List[NestedSite]] = None
    device_types: Optional[List[NestedDeviceType]] = None
    roles: Optional[List[NestedDeviceRole]] = None
    platforms: Optional[List[NestedPlatform]] = None
    cluster_groups: Optional[List[NestedClusterGroup]] = None
    clusters: Optional[List[NestedCluster]] = None
    tenant_groups: Optional[List[NestedTenantGroup]] = None
    tenants: Optional[List[NestedTenant]] = None
    tags: Optional[List[constr(regex=r'^[-a-zA-Z0-9_]+$')]] = None
    data: str = Field(..., title='Data')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableConfigContext(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    weight: Optional[conint(ge=0, le=32767)] = Field(None, title='Weight')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    is_active: Optional[bool] = Field(None, title='Is active')
    regions: Optional[List[int]] = None
    site_groups: Optional[List[int]] = None
    sites: Optional[List[int]] = None
    device_types: Optional[List[int]] = None
    roles: Optional[List[int]] = None
    platforms: Optional[List[int]] = None
    cluster_groups: Optional[List[int]] = None
    clusters: Optional[List[int]] = None
    tenant_groups: Optional[List[int]] = None
    tenants: Optional[List[int]] = None
    tags: Optional[List[constr(regex=r'^[-a-zA-Z0-9_]+$')]] = None
    data: str = Field(..., title='Data')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class ContentType(BaseModel):
    id: Optional[int] = Field(None, title='ID')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    app_label: constr(min_length=1, max_length=100) = Field(..., title='App label')
    model: constr(min_length=1, max_length=100) = Field(
        ..., title='Python model class name'
    )


class Label41(Enum):
    Text = 'Text'
    Text__long_ = 'Text (long)'
    Integer = 'Integer'
    Boolean__true_false_ = 'Boolean (true/false)'
    Date = 'Date'
    URL = 'URL'
    JSON = 'JSON'
    Selection = 'Selection'
    Multiple_selection = 'Multiple selection'


class Value41(Enum):
    text = 'text'
    longtext = 'longtext'
    integer = 'integer'
    boolean = 'boolean'
    date = 'date'
    url = 'url'
    json = 'json'
    select = 'select'
    multiselect = 'multiselect'


class Type34(BaseModel):
    label: Label41
    value: Value41


class Label42(Enum):
    Disabled = 'Disabled'
    Loose = 'Loose'
    Exact = 'Exact'


class Value42(Enum):
    disabled = 'disabled'
    loose = 'loose'
    exact = 'exact'


class FilterLogic(BaseModel):
    label: Label42
    value: Value42


class CustomField(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    content_types: List[str]
    type: Type34 = Field(..., title='Type')
    name: constr(regex=r'^[a-z0-9_]+$', min_length=1, max_length=50) = Field(
        ..., description='Internal field name', title='Name'
    )
    label: Optional[constr(max_length=50)] = Field(
        None,
        description="Name of the field as displayed to users (if not provided, the field's name will be used)",
        title='Label',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    required: Optional[bool] = Field(
        None,
        description='If true, this field is required when creating new objects or editing an existing object.',
        title='Required',
    )
    filter_logic: Optional[FilterLogic] = Field(None, title='Filter logic')
    default: Optional[str] = Field(
        None,
        description='Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. "Foo").',
        title='Default',
    )
    weight: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='Fields with higher weights appear lower in a form.',
        title='Weight',
    )
    validation_minimum: Optional[conint(ge=-2147483648, le=2147483647)] = Field(
        None,
        description='Minimum allowed value (for numeric fields)',
        title='Minimum value',
    )
    validation_maximum: Optional[conint(ge=-2147483648, le=2147483647)] = Field(
        None,
        description='Maximum allowed value (for numeric fields)',
        title='Maximum value',
    )
    validation_regex: Optional[constr(max_length=500)] = Field(
        None,
        description='Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.',
        title='Validation regex',
    )
    choices: Optional[List[constr(min_length=1, max_length=100)]] = Field(
        None,
        description='Comma-separated list of available choices (for selection fields)',
    )
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Type35(Enum):
    text = 'text'
    longtext = 'longtext'
    integer = 'integer'
    boolean = 'boolean'
    date = 'date'
    url = 'url'
    json = 'json'
    select = 'select'
    multiselect = 'multiselect'


class FilterLogic1(Enum):
    disabled = 'disabled'
    loose = 'loose'
    exact = 'exact'


class WritableCustomField(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    content_types: List[str]
    type: Optional[Type35] = Field(None, title='Type')
    name: constr(regex=r'^[a-z0-9_]+$', min_length=1, max_length=50) = Field(
        ..., description='Internal field name', title='Name'
    )
    label: Optional[constr(max_length=50)] = Field(
        None,
        description="Name of the field as displayed to users (if not provided, the field's name will be used)",
        title='Label',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    required: Optional[bool] = Field(
        None,
        description='If true, this field is required when creating new objects or editing an existing object.',
        title='Required',
    )
    filter_logic: Optional[FilterLogic1] = Field(
        None,
        description='Loose matches any instance of a given string; exact matches the entire field.',
        title='Filter logic',
    )
    default: Optional[str] = Field(
        None,
        description='Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. "Foo").',
        title='Default',
    )
    weight: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='Fields with higher weights appear lower in a form.',
        title='Weight',
    )
    validation_minimum: Optional[conint(ge=-2147483648, le=2147483647)] = Field(
        None,
        description='Minimum allowed value (for numeric fields)',
        title='Minimum value',
    )
    validation_maximum: Optional[conint(ge=-2147483648, le=2147483647)] = Field(
        None,
        description='Maximum allowed value (for numeric fields)',
        title='Maximum value',
    )
    validation_regex: Optional[constr(max_length=500)] = Field(
        None,
        description='Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.',
        title='Validation regex',
    )
    choices: Optional[List[constr(min_length=1, max_length=100)]] = Field(
        None,
        description='Comma-separated list of available choices (for selection fields)',
    )
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class ButtonClass(Enum):
    outline_dark = 'outline-dark'
    ghost_dark = 'ghost-dark'
    blue = 'blue'
    indigo = 'indigo'
    purple = 'purple'
    pink = 'pink'
    red = 'red'
    orange = 'orange'
    yellow = 'yellow'
    green = 'green'
    teal = 'teal'
    cyan = 'cyan'
    secondary = 'secondary'


class CustomLink(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    content_type: str = Field(..., title='Content type')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    link_text: constr(min_length=1, max_length=500) = Field(
        ..., description='Jinja2 template code for link text', title='Link text'
    )
    link_url: constr(min_length=1, max_length=500) = Field(
        ..., description='Jinja2 template code for link URL', title='Link URL'
    )
    weight: Optional[conint(ge=0, le=32767)] = Field(None, title='Weight')
    group_name: Optional[constr(max_length=50)] = Field(
        None,
        description='Links with the same group will appear as a dropdown menu',
        title='Group name',
    )
    button_class: Optional[ButtonClass] = Field(
        None,
        description='The class of the first link in a group will be used for the dropdown button',
        title='Button class',
    )
    new_window: Optional[bool] = Field(
        None, description='Force link to open in a new window', title='New window'
    )
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class ExportTemplate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    content_type: str = Field(..., title='Content type')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    template_code: constr(min_length=1) = Field(
        ...,
        description='Jinja2 template code. The list of objects being exported is passed as a context variable named <code>queryset</code>.',
        title='Template code',
    )
    mime_type: Optional[constr(max_length=50)] = Field(
        None, description='Defaults to <code>text/plain</code>', title='MIME type'
    )
    file_extension: Optional[constr(max_length=15)] = Field(
        None,
        description='Extension to append to the rendered filename',
        title='File extension',
    )
    as_attachment: Optional[bool] = Field(
        None, description='Download file as attachment', title='As attachment'
    )
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class ImageAttachment(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    content_type: str = Field(..., title='Content type')
    object_id: conint(ge=0, le=2147483647) = Field(..., title='Object id')
    parent: Optional[Dict[str, str]] = Field(None, title='Parent')
    name: Optional[constr(max_length=50)] = Field(None, title='Name')
    image: Optional[AnyUrl] = Field(None, title='Image')
    image_height: conint(ge=0, le=32767) = Field(..., title='Image height')
    image_width: conint(ge=0, le=32767) = Field(..., title='Image width')
    created: Optional[datetime] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Label43(Enum):
    Pending = 'Pending'
    Running = 'Running'
    Completed = 'Completed'
    Errored = 'Errored'
    Failed = 'Failed'


class Value43(Enum):
    pending = 'pending'
    running = 'running'
    completed = 'completed'
    errored = 'errored'
    failed = 'failed'


class Status13(BaseModel):
    label: Label43
    value: Value43


class JobResult(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    created: Optional[datetime] = Field(None, title='Created')
    completed: Optional[datetime] = Field(None, title='Completed')
    name: constr(min_length=1, max_length=255) = Field(..., title='Name')
    obj_type: Optional[str] = Field(None, title='Obj type')
    status: Optional[Status13] = Field(None, title='Status')
    user: Optional[NestedUser] = None
    data: Optional[str] = Field(None, title='Data')
    job_id: UUID = Field(..., title='Job id')


class Label44(Enum):
    Info = 'Info'
    Success = 'Success'
    Warning = 'Warning'
    Danger = 'Danger'


class Value44(Enum):
    info = 'info'
    success = 'success'
    warning = 'warning'
    danger = 'danger'


class Kind(BaseModel):
    label: Label44
    value: Value44


class JournalEntry(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    assigned_object_type: str = Field(..., title='Assigned object type')
    assigned_object_id: conint(ge=0, le=2147483647) = Field(
        ..., title='Assigned object id'
    )
    assigned_object: Optional[Dict[str, str]] = Field(None, title='Assigned object')
    created: Optional[datetime] = Field(None, title='Created')
    created_by: Optional[int] = Field(None, title='Created by')
    kind: Optional[Kind] = Field(None, title='Kind')
    comments: constr(min_length=1) = Field(..., title='Comments')


class Kind1(Enum):
    info = 'info'
    success = 'success'
    warning = 'warning'
    danger = 'danger'


class WritableJournalEntry(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    assigned_object_type: str = Field(..., title='Assigned object type')
    assigned_object_id: conint(ge=0, le=2147483647) = Field(
        ..., title='Assigned object id'
    )
    assigned_object: Optional[Dict[str, str]] = Field(None, title='Assigned object')
    created: Optional[datetime] = Field(None, title='Created')
    created_by: Optional[int] = Field(None, title='Created by')
    kind: Optional[Kind1] = Field(None, title='Kind')
    comments: constr(min_length=1) = Field(..., title='Comments')


class Label45(Enum):
    Created = 'Created'
    Updated = 'Updated'
    Deleted = 'Deleted'


class Value45(Enum):
    create = 'create'
    update = 'update'
    delete = 'delete'


class Action(BaseModel):
    label: Label45
    value: Value45


class ObjectChange(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    time: Optional[datetime] = Field(None, title='Time')
    user: Optional[NestedUser] = None
    user_name: Optional[constr(min_length=1)] = Field(None, title='User name')
    request_id: Optional[UUID] = Field(None, title='Request id')
    action: Optional[Action] = Field(None, title='Action')
    changed_object_type: Optional[str] = Field(None, title='Changed object type')
    changed_object_id: conint(ge=0, le=2147483647) = Field(
        ..., title='Changed object id'
    )
    changed_object: Optional[Dict[str, str]] = Field(
        None,
        description='\nSerialize a nested representation of the changed object.\n',
        title='Changed object',
    )
    prechange_data: Optional[str] = Field(None, title='Prechange data')
    postchange_data: Optional[str] = Field(None, title='Postchange data')


class Tag(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    color: Optional[constr(regex=r'^[0-9a-f]{6}$', min_length=1, max_length=6)] = Field(
        None, title='Color'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tagged_items: Optional[int] = Field(None, title='Tagged items')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class HttpMethod(Enum):
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'
    DELETE = 'DELETE'


class Webhook(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    content_types: List[str]
    name: constr(min_length=1, max_length=150) = Field(..., title='Name')
    type_create: Optional[bool] = Field(
        False,
        description='Call this webhook when a matching object is created.',
        title='Type create',
    )
    type_update: Optional[bool] = Field(
        False,
        description='Call this webhook when a matching object is updated.',
        title='Type update',
    )
    type_delete: Optional[bool] = Field(
        False,
        description='Call this webhook when a matching object is deleted.',
        title='Type delete',
    )
    payload_url: constr(min_length=1, max_length=500) = Field(
        ...,
        description='A POST will be sent to this URL when the webhook is called.',
        title='URL',
    )
    enabled: Optional[bool] = Field(None, title='Enabled')
    http_method: Optional[HttpMethod] = Field(None, title='HTTP method')
    http_content_type: Optional[constr(min_length=1, max_length=100)] = Field(
        None,
        description='The complete list of official content types is available <a href="https://www.iana.org/assignments/media-types/media-types.xhtml">here</a>.',
        title='HTTP content type',
    )
    additional_headers: Optional[str] = Field(
        None,
        description='User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format <code>Name: Value</code>. Jinja2 template processing is supported with the same context as the request body (below).',
        title='Additional headers',
    )
    body_template: Optional[str] = Field(
        None,
        description='Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: <code>event</code>, <code>model</code>, <code>timestamp</code>, <code>username</code>, <code>request_id</code>, and <code>data</code>.',
        title='Body template',
    )
    secret: Optional[constr(max_length=255)] = Field(
        None,
        description="When provided, the request will include a 'X-Hook-Signature' header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.",
        title='Secret',
    )
    conditions: Optional[str] = Field(
        None,
        description='A set of conditions which determine whether the webhook will be generated.',
        title='Conditions',
    )
    ssl_verification: Optional[bool] = Field(
        None,
        description='Enable SSL certificate verification. Disable with caution!',
        title='SSL verification',
    )
    ca_file_path: Optional[constr(max_length=4096)] = Field(
        None,
        description='The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.',
        title='CA File Path',
    )
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedRIR(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    aggregate_count: Optional[int] = Field(None, title='Aggregate count')


class Label46(Enum):
    IPv4 = 'IPv4'
    IPv6 = 'IPv6'


class Value46(Enum):
    integer_4 = 4
    integer_6 = 6


class Family(BaseModel):
    label: Label46
    value: Value46


class Aggregate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[Family] = Field(None, title='Family')
    prefix: str = Field(..., title='Prefix')
    rir: NestedRIR
    tenant: Optional[NestedTenant] = None
    date_added: Optional[date] = Field(None, title='Date added')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableAggregate(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[str] = Field(None, title='Family')
    prefix: str = Field(..., title='Prefix')
    rir: int = Field(..., title='RIR')
    tenant: Optional[int] = Field(None, title='Tenant')
    date_added: Optional[date] = Field(None, title='Date added')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class ASN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    asn: conint(ge=1, le=4294967295) = Field(
        ..., description='32-bit autonomous system number', title='ASN'
    )
    site_count: Optional[int] = Field(None, title='Site count')
    rir: int = Field(..., title='RIR')
    tenant: Optional[NestedTenant] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableASN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    asn: conint(ge=1, le=4294967295) = Field(
        ..., description='32-bit autonomous system number', title='ASN'
    )
    site_count: Optional[int] = Field(None, title='Site count')
    rir: int = Field(..., title='RIR')
    tenant: Optional[int] = Field(None, title='Tenant')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Protocol(Enum):
    vrrp2 = 'vrrp2'
    vrrp3 = 'vrrp3'
    hsrp = 'hsrp'
    glbp = 'glbp'
    carp = 'carp'
    other = 'other'


class NestedFHRPGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    protocol: Protocol = Field(..., title='Protocol')
    group_id: conint(ge=0, le=32767) = Field(..., title='Group ID')


class FHRPGroupAssignment(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    group: NestedFHRPGroup
    interface_type: str = Field(..., title='Interface type')
    interface_id: conint(ge=0, le=2147483647) = Field(..., title='Interface id')
    interface: Optional[Dict[str, str]] = Field(None, title='Interface')
    priority: conint(ge=0, le=255) = Field(..., title='Priority')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableFHRPGroupAssignment(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    group: int = Field(..., title='Group')
    interface_type: str = Field(..., title='Interface type')
    interface_id: conint(ge=0, le=2147483647) = Field(..., title='Interface id')
    interface: Optional[Dict[str, str]] = Field(None, title='Interface')
    priority: conint(ge=0, le=255) = Field(..., title='Priority')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Protocol1(Enum):
    vrrp2 = 'vrrp2'
    vrrp3 = 'vrrp3'
    hsrp = 'hsrp'
    glbp = 'glbp'
    carp = 'carp'
    other = 'other'


class AuthType(Enum):
    plaintext = 'plaintext'
    md5 = 'md5'


class FHRPGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    protocol: Protocol1 = Field(..., title='Protocol')
    group_id: conint(ge=0, le=32767) = Field(..., title='Group ID')
    auth_type: Optional[AuthType] = Field(None, title='Authentication type')
    auth_key: Optional[constr(max_length=255)] = Field(None, title='Authentication key')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    ip_addresses: Optional[List[NestedIPAddress]] = None
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedVRF(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    rd: Optional[constr(max_length=21)] = Field(
        None,
        description='Unique route distinguisher (as defined in RFC 4364)',
        title='Route distinguisher',
    )
    prefix_count: Optional[int] = Field(None, title='Prefix count')


class Label47(Enum):
    IPv4 = 'IPv4'
    IPv6 = 'IPv6'


class Value47(Enum):
    integer_4 = 4
    integer_6 = 6


class Family1(BaseModel):
    label: Label47
    value: Value47


class Label48(Enum):
    Active = 'Active'
    Reserved = 'Reserved'
    Deprecated = 'Deprecated'
    DHCP = 'DHCP'
    SLAAC = 'SLAAC'


class Value48(Enum):
    active = 'active'
    reserved = 'reserved'
    deprecated = 'deprecated'
    dhcp = 'dhcp'
    slaac = 'slaac'


class Status14(BaseModel):
    label: Label48
    value: Value48


class Label49(Enum):
    Loopback = 'Loopback'
    Secondary = 'Secondary'
    Anycast = 'Anycast'
    VIP = 'VIP'
    VRRP = 'VRRP'
    HSRP = 'HSRP'
    GLBP = 'GLBP'
    CARP = 'CARP'


class Value49(Enum):
    loopback = 'loopback'
    secondary = 'secondary'
    anycast = 'anycast'
    vip = 'vip'
    vrrp = 'vrrp'
    hsrp = 'hsrp'
    glbp = 'glbp'
    carp = 'carp'


class Role(BaseModel):
    label: Label49
    value: Value49


class IPAddress(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[Family1] = Field(None, title='Family')
    address: str = Field(
        ..., description='IPv4 or IPv6 address (with mask)', title='Address'
    )
    vrf: Optional[NestedVRF] = None
    tenant: Optional[NestedTenant] = None
    status: Optional[Status14] = Field(None, title='Status')
    role: Optional[Role] = Field(None, title='Role')
    assigned_object_type: Optional[str] = Field(None, title='Assigned object type')
    assigned_object_id: Optional[conint(ge=0, le=2147483647)] = Field(
        None, title='Assigned object id'
    )
    assigned_object: Optional[Dict[str, str]] = Field(None, title='Assigned object')
    nat_inside: Optional[NestedIPAddress] = None
    nat_outside: Optional[NestedIPAddress] = None
    dns_name: Optional[constr(regex=r'^[0-9A-Za-z._-]+$', max_length=255)] = Field(
        None, description='Hostname or FQDN (not case-sensitive)', title='DNS Name'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Status15(Enum):
    active = 'active'
    reserved = 'reserved'
    deprecated = 'deprecated'
    dhcp = 'dhcp'
    slaac = 'slaac'


class Role1(Enum):
    loopback = 'loopback'
    secondary = 'secondary'
    anycast = 'anycast'
    vip = 'vip'
    vrrp = 'vrrp'
    hsrp = 'hsrp'
    glbp = 'glbp'
    carp = 'carp'


class WritableIPAddress(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[str] = Field(None, title='Family')
    address: str = Field(
        ..., description='IPv4 or IPv6 address (with mask)', title='Address'
    )
    vrf: Optional[int] = Field(None, title='VRF')
    tenant: Optional[int] = Field(None, title='Tenant')
    status: Optional[Status15] = Field(
        None, description='The operational status of this IP', title='Status'
    )
    role: Optional[Role1] = Field(
        None, description='The functional role of this IP', title='Role'
    )
    assigned_object_type: Optional[str] = Field(None, title='Assigned object type')
    assigned_object_id: Optional[conint(ge=0, le=2147483647)] = Field(
        None, title='Assigned object id'
    )
    assigned_object: Optional[Dict[str, str]] = Field(None, title='Assigned object')
    nat_inside: Optional[int] = Field(
        None,
        description='The IP for which this address is the "outside" IP',
        title='NAT (Inside)',
    )
    nat_outside: Optional[str] = Field(None, title='Nat outside')
    dns_name: Optional[constr(regex=r'^[0-9A-Za-z._-]+$', max_length=255)] = Field(
        None, description='Hostname or FQDN (not case-sensitive)', title='DNS Name'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedRole(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    prefix_count: Optional[int] = Field(None, title='Prefix count')
    vlan_count: Optional[int] = Field(None, title='Vlan count')


class Label50(Enum):
    IPv4 = 'IPv4'
    IPv6 = 'IPv6'


class Value50(Enum):
    integer_4 = 4
    integer_6 = 6


class Family2(BaseModel):
    label: Label50
    value: Value50


class Label51(Enum):
    Active = 'Active'
    Reserved = 'Reserved'
    Deprecated = 'Deprecated'


class Value51(Enum):
    active = 'active'
    reserved = 'reserved'
    deprecated = 'deprecated'


class Status16(BaseModel):
    label: Label51
    value: Value51


class IPRange(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[Family2] = Field(None, title='Family')
    start_address: str = Field(
        ..., description='IPv4 or IPv6 address (with mask)', title='Start address'
    )
    end_address: str = Field(
        ..., description='IPv4 or IPv6 address (with mask)', title='End address'
    )
    size: Optional[int] = Field(None, title='Size')
    vrf: Optional[NestedVRF] = None
    tenant: Optional[NestedTenant] = None
    status: Optional[Status16] = Field(None, title='Status')
    role: Optional[NestedRole] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    children: Optional[int] = Field(None, title='Children')


class Status17(Enum):
    active = 'active'
    reserved = 'reserved'
    deprecated = 'deprecated'


class WritableIPRange(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[str] = Field(None, title='Family')
    start_address: str = Field(
        ..., description='IPv4 or IPv6 address (with mask)', title='Start address'
    )
    end_address: str = Field(
        ..., description='IPv4 or IPv6 address (with mask)', title='End address'
    )
    size: Optional[int] = Field(None, title='Size')
    vrf: Optional[int] = Field(None, title='VRF')
    tenant: Optional[int] = Field(None, title='Tenant')
    status: Optional[Status17] = Field(
        None, description='Operational status of this range', title='Status'
    )
    role: Optional[int] = Field(
        None, description='The primary function of this range', title='Role'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    children: Optional[int] = Field(None, title='Children')


class AvailableIP(BaseModel):
    family: Optional[int] = Field(None, title='Family')
    address: Optional[constr(min_length=1)] = Field(None, title='Address')
    vrf: Optional[NestedVRF] = None


class WritableAvailableIP(BaseModel):
    family: Optional[int] = Field(None, title='Family')
    address: Optional[constr(min_length=1)] = Field(None, title='Address')


class Label52(Enum):
    IPv4 = 'IPv4'
    IPv6 = 'IPv6'


class Value52(Enum):
    integer_4 = 4
    integer_6 = 6


class Family3(BaseModel):
    label: Label52
    value: Value52


class Label53(Enum):
    Container = 'Container'
    Active = 'Active'
    Reserved = 'Reserved'
    Deprecated = 'Deprecated'


class Value53(Enum):
    container = 'container'
    active = 'active'
    reserved = 'reserved'
    deprecated = 'deprecated'


class Status18(BaseModel):
    label: Label53
    value: Value53


class Prefix(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[Family3] = Field(None, title='Family')
    prefix: str = Field(
        ..., description='IPv4 or IPv6 network with mask', title='Prefix'
    )
    site: Optional[NestedSite] = None
    vrf: Optional[NestedVRF] = None
    tenant: Optional[NestedTenant] = None
    vlan: Optional[NestedVLAN] = None
    status: Optional[Status18] = Field(None, title='Status')
    role: Optional[NestedRole] = None
    is_pool: Optional[bool] = Field(
        None,
        description='All IP addresses within this prefix are considered usable',
        title='Is a pool',
    )
    mark_utilized: Optional[bool] = Field(
        None, description='Treat as 100% utilized', title='Mark utilized'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    children: Optional[int] = Field(None, title='Children')
    _depth: Optional[int] = Field(None, title='depth')


class Status19(Enum):
    container = 'container'
    active = 'active'
    reserved = 'reserved'
    deprecated = 'deprecated'


class WritablePrefix(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    family: Optional[str] = Field(None, title='Family')
    prefix: str = Field(
        ..., description='IPv4 or IPv6 network with mask', title='Prefix'
    )
    site: Optional[int] = Field(None, title='Site')
    vrf: Optional[int] = Field(None, title='VRF')
    tenant: Optional[int] = Field(None, title='Tenant')
    vlan: Optional[int] = Field(None, title='VLAN')
    status: Optional[Status19] = Field(
        None, description='Operational status of this prefix', title='Status'
    )
    role: Optional[int] = Field(
        None, description='The primary function of this prefix', title='Role'
    )
    is_pool: Optional[bool] = Field(
        None,
        description='All IP addresses within this prefix are considered usable',
        title='Is a pool',
    )
    mark_utilized: Optional[bool] = Field(
        None, description='Treat as 100% utilized', title='Mark utilized'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    children: Optional[int] = Field(None, title='Children')
    _depth: Optional[int] = Field(None, title='depth')


class AvailablePrefix(BaseModel):
    family: Optional[int] = Field(None, title='Family')
    prefix: Optional[constr(min_length=1)] = Field(None, title='Prefix')
    vrf: Optional[NestedVRF] = None


class PrefixLength(BaseModel):
    prefix_length: int = Field(..., title='Prefix length')


class RIR(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    is_private: Optional[bool] = Field(
        None,
        description='IP space managed by this RIR is considered private',
        title='Private',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    aggregate_count: Optional[int] = Field(None, title='Aggregate count')


class Role2(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    weight: Optional[conint(ge=0, le=32767)] = Field(None, title='Weight')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    prefix_count: Optional[int] = Field(None, title='Prefix count')
    vlan_count: Optional[int] = Field(None, title='Vlan count')


class RouteTarget(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=21) = Field(
        ...,
        description='Route target value (formatted in accordance with RFC 4360)',
        title='Name',
    )
    tenant: Optional[NestedTenant] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableRouteTarget(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=21) = Field(
        ...,
        description='Route target value (formatted in accordance with RFC 4360)',
        title='Name',
    )
    tenant: Optional[int] = Field(None, title='Tenant')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedVirtualMachine(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')


class Label54(Enum):
    TCP = 'TCP'
    UDP = 'UDP'


class Value54(Enum):
    tcp = 'tcp'
    udp = 'udp'


class Protocol2(BaseModel):
    label: Label54
    value: Value54


class Service(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: Optional[NestedDevice] = None
    virtual_machine: Optional[NestedVirtualMachine] = None
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    ports: List[conint(ge=1, le=65535)]
    protocol: Optional[Protocol2] = Field(None, title='Protocol')
    ipaddresses: Optional[List[NestedIPAddress]] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Protocol3(Enum):
    tcp = 'tcp'
    udp = 'udp'


class WritableService(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    device: Optional[int] = Field(None, title='Device')
    virtual_machine: Optional[int] = Field(None, title='Virtual machine')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    ports: List[conint(ge=1, le=65535)]
    protocol: Protocol3 = Field(..., title='Protocol')
    ipaddresses: Optional[List[int]] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class VLANGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    scope_type: Optional[str] = Field(None, title='Scope type')
    scope_id: Optional[int] = Field(None, title='Scope id')
    scope: Optional[str] = Field(None, title='Scope')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    vlan_count: Optional[int] = Field(None, title='Vlan count')


class NestedVLANGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    vlan_count: Optional[int] = Field(None, title='Vlan count')


class Label55(Enum):
    Active = 'Active'
    Reserved = 'Reserved'
    Deprecated = 'Deprecated'


class Value55(Enum):
    active = 'active'
    reserved = 'reserved'
    deprecated = 'deprecated'


class Status20(BaseModel):
    label: Label55
    value: Value55


class VLAN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    site: Optional[NestedSite] = None
    group: Optional[NestedVLANGroup] = None
    vid: conint(ge=1, le=4094) = Field(..., title='ID')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    tenant: Optional[NestedTenant] = None
    status: Optional[Status20] = Field(None, title='Status')
    role: Optional[NestedRole] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    prefix_count: Optional[int] = Field(None, title='Prefix count')


class Status21(Enum):
    active = 'active'
    reserved = 'reserved'
    deprecated = 'deprecated'


class WritableVLAN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    site: Optional[int] = Field(None, title='Site')
    group: int = Field(..., title='Group')
    vid: conint(ge=1, le=4094) = Field(..., title='ID')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    tenant: Optional[int] = Field(None, title='Tenant')
    status: Optional[Status21] = Field(None, title='Status')
    role: Optional[int] = Field(None, title='Role')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    prefix_count: Optional[int] = Field(None, title='Prefix count')


class NestedRouteTarget(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=21) = Field(
        ...,
        description='Route target value (formatted in accordance with RFC 4360)',
        title='Name',
    )


class VRF(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    rd: Optional[constr(max_length=21)] = Field(
        None,
        description='Unique route distinguisher (as defined in RFC 4364)',
        title='Route distinguisher',
    )
    tenant: Optional[NestedTenant] = None
    enforce_unique: Optional[bool] = Field(
        None,
        description='Prevent duplicate prefixes/IP addresses within this VRF',
        title='Enforce unique space',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    import_targets: Optional[List[NestedRouteTarget]] = None
    export_targets: Optional[List[NestedRouteTarget]] = None
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    ipaddress_count: Optional[int] = Field(None, title='Ipaddress count')
    prefix_count: Optional[int] = Field(None, title='Prefix count')


class WritableVRF(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    rd: Optional[constr(max_length=21)] = Field(
        None,
        description='Unique route distinguisher (as defined in RFC 4364)',
        title='Route distinguisher',
    )
    tenant: Optional[int] = Field(None, title='Tenant')
    enforce_unique: Optional[bool] = Field(
        None,
        description='Prevent duplicate prefixes/IP addresses within this VRF',
        title='Enforce unique space',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    import_targets: Optional[List[int]] = None
    export_targets: Optional[List[int]] = None
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    ipaddress_count: Optional[int] = Field(None, title='Ipaddress count')
    prefix_count: Optional[int] = Field(None, title='Prefix count')


class NestedContact(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')


class NestedContactRole(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )


class Label56(Enum):
    Primary = 'Primary'
    Secondary = 'Secondary'
    Tertiary = 'Tertiary'
    Inactive = 'Inactive'


class Value56(Enum):
    primary = 'primary'
    secondary = 'secondary'
    tertiary = 'tertiary'
    inactive = 'inactive'


class Priority(BaseModel):
    label: Label56
    value: Value56


class ContactAssignment(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    content_type: str = Field(..., title='Content type')
    object_id: conint(ge=0, le=2147483647) = Field(..., title='Object id')
    object: Optional[Dict[str, str]] = Field(None, title='Object')
    contact: NestedContact
    role: Optional[NestedContactRole] = None
    priority: Optional[Priority] = Field(None, title='Priority')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Priority1(Enum):
    primary = 'primary'
    secondary = 'secondary'
    tertiary = 'tertiary'
    inactive = 'inactive'


class WritableContactAssignment(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    content_type: str = Field(..., title='Content type')
    object_id: conint(ge=0, le=2147483647) = Field(..., title='Object id')
    object: Optional[Dict[str, str]] = Field(None, title='Object')
    contact: int = Field(..., title='Contact')
    role: int = Field(..., title='Role')
    priority: Priority1 = Field(..., title='Priority')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedContactGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    contact_count: Optional[int] = Field(None, title='Contact count')
    _depth: Optional[int] = Field(None, title='depth')


class ContactGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: Optional[NestedContactGroup] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    contact_count: Optional[int] = Field(None, title='Contact count')
    _depth: Optional[int] = Field(None, title='depth')


class WritableContactGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: int = Field(..., title='Parent')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    contact_count: Optional[int] = Field(None, title='Contact count')
    _depth: Optional[int] = Field(None, title='depth')


class ContactRole(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Contact(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    group: Optional[NestedContactGroup] = None
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    title: Optional[constr(max_length=100)] = Field(None, title='Title')
    phone: Optional[constr(max_length=50)] = Field(None, title='Phone')
    email: Optional[EmailStr] = Field(None, title='Email')
    address: Optional[constr(max_length=200)] = Field(None, title='Address')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class WritableContact(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    group: int = Field(..., title='Group')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    title: Optional[constr(max_length=100)] = Field(None, title='Title')
    phone: Optional[constr(max_length=50)] = Field(None, title='Phone')
    email: Optional[EmailStr] = Field(None, title='Email')
    address: Optional[constr(max_length=200)] = Field(None, title='Address')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class TenantGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: Optional[NestedTenantGroup] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    tenant_count: Optional[int] = Field(None, title='Tenant count')
    _depth: Optional[int] = Field(None, title='depth')


class WritableTenantGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: Optional[int] = Field(None, title='Parent')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    tenant_count: Optional[int] = Field(None, title='Tenant count')
    _depth: Optional[int] = Field(None, title='depth')


class Tenant(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    group: Optional[NestedTenantGroup] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    circuit_count: Optional[int] = Field(None, title='Circuit count')
    device_count: Optional[int] = Field(None, title='Device count')
    ipaddress_count: Optional[int] = Field(None, title='Ipaddress count')
    prefix_count: Optional[int] = Field(None, title='Prefix count')
    rack_count: Optional[int] = Field(None, title='Rack count')
    site_count: Optional[int] = Field(None, title='Site count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')
    vlan_count: Optional[int] = Field(None, title='Vlan count')
    vrf_count: Optional[int] = Field(None, title='Vrf count')
    cluster_count: Optional[int] = Field(None, title='Cluster count')


class WritableTenant(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    group: Optional[int] = Field(None, title='Group')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    circuit_count: Optional[int] = Field(None, title='Circuit count')
    device_count: Optional[int] = Field(None, title='Device count')
    ipaddress_count: Optional[int] = Field(None, title='Ipaddress count')
    prefix_count: Optional[int] = Field(None, title='Prefix count')
    rack_count: Optional[int] = Field(None, title='Rack count')
    site_count: Optional[int] = Field(None, title='Site count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')
    vlan_count: Optional[int] = Field(None, title='Vlan count')
    vrf_count: Optional[int] = Field(None, title='Vrf count')
    cluster_count: Optional[int] = Field(None, title='Cluster count')


class Group(BaseModel):
    id: Optional[int] = Field(None, title='ID')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=150) = Field(..., title='Name')
    user_count: Optional[int] = Field(None, title='User count')


class NestedGroup(BaseModel):
    id: Optional[int] = Field(None, title='ID')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=150) = Field(..., title='Name')


class ObjectPermission(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    enabled: Optional[bool] = Field(None, title='Enabled')
    object_types: List[str]
    groups: Optional[List[NestedGroup]] = None
    users: Optional[List[NestedUser]] = None
    actions: List[constr(min_length=1, max_length=30)] = Field(
        ..., description='The list of actions granted by this permission'
    )
    constraints: Optional[str] = Field(
        None,
        description='Queryset filter matching the applicable objects of the selected type(s)',
        title='Constraints',
    )


class WritableObjectPermission(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    enabled: Optional[bool] = Field(None, title='Enabled')
    object_types: List[str]
    groups: Optional[List[int]] = None
    users: Optional[List[int]] = None
    actions: List[constr(min_length=1, max_length=30)] = Field(
        ..., description='The list of actions granted by this permission'
    )
    constraints: Optional[str] = Field(
        None,
        description='Queryset filter matching the applicable objects of the selected type(s)',
        title='Constraints',
    )


class Token(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    user: NestedUser
    created: Optional[datetime] = Field(None, title='Created')
    expires: Optional[datetime] = Field(None, title='Expires')
    key: Optional[constr(min_length=40, max_length=40)] = Field(None, title='Key')
    write_enabled: Optional[bool] = Field(
        None,
        description='Permit create/update/delete operations using this key',
        title='Write enabled',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')


class WritableToken(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    user: int = Field(..., title='User')
    created: Optional[datetime] = Field(None, title='Created')
    expires: Optional[datetime] = Field(None, title='Expires')
    key: Optional[constr(min_length=40, max_length=40)] = Field(None, title='Key')
    write_enabled: Optional[bool] = Field(
        None,
        description='Permit create/update/delete operations using this key',
        title='Write enabled',
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')


class User(BaseModel):
    id: Optional[int] = Field(None, title='ID')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    username: constr(regex=r'^[\w.@+-]+$', min_length=1, max_length=150) = Field(
        ...,
        description='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
        title='Username',
    )
    password: constr(min_length=1, max_length=128) = Field(..., title='Password')
    first_name: Optional[constr(max_length=150)] = Field(None, title='First name')
    last_name: Optional[constr(max_length=150)] = Field(None, title='Last name')
    email: Optional[EmailStr] = Field(None, title='Email address')
    is_staff: Optional[bool] = Field(
        None,
        description='Designates whether the user can log into this admin site.',
        title='Staff status',
    )
    is_active: Optional[bool] = Field(
        None,
        description='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
        title='Active',
    )
    date_joined: Optional[datetime] = Field(None, title='Date joined')
    groups: Optional[List[NestedGroup]] = None


class WritableUser(BaseModel):
    id: Optional[int] = Field(None, title='ID')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    username: constr(regex=r'^[\w.@+-]+$', min_length=1, max_length=150) = Field(
        ...,
        description='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
        title='Username',
    )
    password: constr(min_length=1, max_length=128) = Field(..., title='Password')
    first_name: Optional[constr(max_length=150)] = Field(None, title='First name')
    last_name: Optional[constr(max_length=150)] = Field(None, title='Last name')
    email: Optional[EmailStr] = Field(None, title='Email address')
    is_staff: Optional[bool] = Field(
        None,
        description='Designates whether the user can log into this admin site.',
        title='Staff status',
    )
    is_active: Optional[bool] = Field(
        None,
        description='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
        title='Active',
    )
    date_joined: Optional[datetime] = Field(None, title='Date joined')
    groups: Optional[List[int]] = Field(
        None,
        description='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
    )


class ClusterGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    cluster_count: Optional[int] = Field(None, title='Cluster count')


class ClusterType(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    cluster_count: Optional[int] = Field(None, title='Cluster count')


class NestedClusterType(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    cluster_count: Optional[int] = Field(None, title='Cluster count')


class Cluster(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    type: NestedClusterType
    group: Optional[NestedClusterGroup] = None
    tenant: Optional[NestedTenant] = None
    site: Optional[NestedSite] = None
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')


class WritableCluster(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    type: int = Field(..., title='Type')
    group: int = Field(..., title='Group')
    tenant: Optional[int] = Field(None, title='Tenant')
    site: int = Field(..., title='Site')
    comments: Optional[str] = Field(None, title='Comments')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    device_count: Optional[int] = Field(None, title='Device count')
    virtualmachine_count: Optional[int] = Field(None, title='Virtualmachine count')


class NestedVMInterface(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    virtual_machine: Optional[NestedVirtualMachine] = None
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')


class Label57(Enum):
    Access = 'Access'
    Tagged = 'Tagged'
    Tagged__All_ = 'Tagged (All)'


class Value57(Enum):
    access = 'access'
    tagged = 'tagged'
    tagged_all = 'tagged-all'


class Mode2(BaseModel):
    label: Label57
    value: Value57


class VMInterface(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    virtual_machine: NestedVirtualMachine
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    enabled: Optional[bool] = Field(None, title='Enabled')
    parent: Optional[NestedVMInterface] = None
    bridge: Optional[NestedVMInterface] = None
    mtu: Optional[conint(ge=1, le=65536)] = Field(None, title='MTU')
    mac_address: Optional[str] = Field(None, title='MAC Address')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mode: Optional[Mode2] = Field(None, title='Mode')
    untagged_vlan: Optional[NestedVLAN] = None
    tagged_vlans: Optional[List[NestedVLAN]] = None
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    count_ipaddresses: Optional[int] = Field(None, title='Count ipaddresses')
    count_fhrp_groups: Optional[int] = Field(None, title='Count fhrp groups')


class Mode3(Enum):
    access = 'access'
    tagged = 'tagged'
    tagged_all = 'tagged-all'


class WritableVMInterface(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    virtual_machine: int = Field(..., title='Virtual machine')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    enabled: Optional[bool] = Field(None, title='Enabled')
    parent: Optional[int] = Field(None, title='Parent interface')
    bridge: Optional[int] = Field(None, title='Bridge interface')
    mtu: Optional[conint(ge=1, le=65536)] = Field(None, title='MTU')
    mac_address: Optional[str] = Field(None, title='MAC Address')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    mode: Optional[Mode3] = Field(None, title='Mode')
    untagged_vlan: Optional[int] = Field(None, title='Untagged VLAN')
    tagged_vlans: Optional[List[int]] = None
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    count_ipaddresses: Optional[int] = Field(None, title='Count ipaddresses')
    count_fhrp_groups: Optional[int] = Field(None, title='Count fhrp groups')


class Label58(Enum):
    Offline = 'Offline'
    Active = 'Active'
    Planned = 'Planned'
    Staged = 'Staged'
    Failed = 'Failed'
    Decommissioning = 'Decommissioning'


class Value58(Enum):
    offline = 'offline'
    active = 'active'
    planned = 'planned'
    staged = 'staged'
    failed = 'failed'
    decommissioning = 'decommissioning'


class Status22(BaseModel):
    label: Label58
    value: Value58


class VirtualMachineWithConfigContext(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    status: Optional[Status22] = Field(None, title='Status')
    site: Optional[NestedSite] = None
    cluster: NestedCluster
    role: Optional[NestedDeviceRole] = None
    tenant: Optional[NestedTenant] = None
    platform: Optional[NestedPlatform] = None
    primary_ip: Optional[NestedIPAddress] = None
    primary_ip4: Optional[NestedIPAddress] = None
    primary_ip6: Optional[NestedIPAddress] = None
    vcpus: Optional[
        condecimal(ge=0.01000000000000000020816681711721685132943093776702880859375)
    ] = Field(None, title='VCPUs')
    memory: Optional[conint(ge=0, le=2147483647)] = Field(None, title='Memory (MB)')
    disk: Optional[conint(ge=0, le=2147483647)] = Field(None, title='Disk (GB)')
    comments: Optional[str] = Field(None, title='Comments')
    local_context_data: Optional[str] = Field(None, title='Local context data')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    config_context: Optional[Dict[str, str]] = Field(None, title='Config context')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Status23(Enum):
    offline = 'offline'
    active = 'active'
    planned = 'planned'
    staged = 'staged'
    failed = 'failed'
    decommissioning = 'decommissioning'


class WritableVirtualMachineWithConfigContext(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=64) = Field(..., title='Name')
    status: Optional[Status23] = Field(None, title='Status')
    site: Optional[str] = Field(None, title='Site')
    cluster: int = Field(..., title='Cluster')
    role: Optional[int] = Field(None, title='Role')
    tenant: Optional[int] = Field(None, title='Tenant')
    platform: Optional[int] = Field(None, title='Platform')
    primary_ip: Optional[str] = Field(None, title='Primary ip')
    primary_ip4: Optional[int] = Field(None, title='Primary IPv4')
    primary_ip6: Optional[int] = Field(None, title='Primary IPv6')
    vcpus: Optional[
        condecimal(ge=0.01000000000000000020816681711721685132943093776702880859375)
    ] = Field(None, title='VCPUs')
    memory: Optional[conint(ge=0, le=2147483647)] = Field(None, title='Memory (MB)')
    disk: Optional[conint(ge=0, le=2147483647)] = Field(None, title='Disk (GB)')
    comments: Optional[str] = Field(None, title='Comments')
    local_context_data: Optional[str] = Field(None, title='Local context data')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    config_context: Optional[Dict[str, str]] = Field(None, title='Config context')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class NestedWirelessLANGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    wirelesslan_count: Optional[int] = Field(None, title='Wirelesslan count')
    _depth: Optional[int] = Field(None, title='depth')


class WirelessLANGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: Optional[NestedWirelessLANGroup] = None
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    wirelesslan_count: Optional[int] = Field(None, title='Wirelesslan count')
    _depth: Optional[int] = Field(None, title='depth')


class WritableWirelessLANGroup(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    name: constr(min_length=1, max_length=100) = Field(..., title='Name')
    slug: constr(regex=r'^[-a-zA-Z0-9_]+$', min_length=1, max_length=100) = Field(
        ..., title='Slug'
    )
    parent: int = Field(..., title='Parent')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
    wirelesslan_count: Optional[int] = Field(None, title='Wirelesslan count')
    _depth: Optional[int] = Field(None, title='depth')


class Label59(Enum):
    Open = 'Open'
    WEP = 'WEP'
    WPA_Personal__PSK_ = 'WPA Personal (PSK)'
    WPA_Enterprise = 'WPA Enterprise'


class Value59(Enum):
    open = 'open'
    wep = 'wep'
    wpa_personal = 'wpa-personal'
    wpa_enterprise = 'wpa-enterprise'


class AuthType1(BaseModel):
    label: Label59
    value: Value59


class Label60(Enum):
    Auto = 'Auto'
    TKIP = 'TKIP'
    AES = 'AES'


class Value60(Enum):
    auto = 'auto'
    tkip = 'tkip'
    aes = 'aes'


class AuthCipher(BaseModel):
    label: Label60
    value: Value60


class WirelessLAN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    ssid: constr(min_length=1, max_length=32) = Field(..., title='SSID')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    group: Optional[NestedWirelessLANGroup] = None
    vlan: Optional[NestedVLAN] = None
    auth_type: Optional[AuthType1] = Field(None, title='Auth type')
    auth_cipher: Optional[AuthCipher] = Field(None, title='Auth cipher')
    auth_psk: Optional[constr(max_length=64)] = Field(None, title='Pre-shared key')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class AuthType2(Enum):
    open = 'open'
    wep = 'wep'
    wpa_personal = 'wpa-personal'
    wpa_enterprise = 'wpa-enterprise'


class AuthCipher1(Enum):
    auto = 'auto'
    tkip = 'tkip'
    aes = 'aes'


class WritableWirelessLAN(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    ssid: constr(min_length=1, max_length=32) = Field(..., title='SSID')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    group: Optional[int] = Field(None, title='Group')
    vlan: Optional[int] = Field(None, title='VLAN')
    auth_type: Optional[AuthType2] = Field(None, title='Auth type')
    auth_cipher: Optional[AuthCipher1] = Field(None, title='Auth cipher')
    auth_psk: Optional[constr(max_length=64)] = Field(None, title='Pre-shared key')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Label61(Enum):
    Connected = 'Connected'
    Planned = 'Planned'
    Decommissioning = 'Decommissioning'


class Value61(Enum):
    connected = 'connected'
    planned = 'planned'
    decommissioning = 'decommissioning'


class Status24(BaseModel):
    label: Label61
    value: Value61


class Label62(Enum):
    Open = 'Open'
    WEP = 'WEP'
    WPA_Personal__PSK_ = 'WPA Personal (PSK)'
    WPA_Enterprise = 'WPA Enterprise'


class Value62(Enum):
    open = 'open'
    wep = 'wep'
    wpa_personal = 'wpa-personal'
    wpa_enterprise = 'wpa-enterprise'


class AuthType3(BaseModel):
    label: Label62
    value: Value62


class Label63(Enum):
    Auto = 'Auto'
    TKIP = 'TKIP'
    AES = 'AES'


class Value63(Enum):
    auto = 'auto'
    tkip = 'tkip'
    aes = 'aes'


class AuthCipher2(BaseModel):
    label: Label63
    value: Value63


class WirelessLink(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    interface_a: NestedInterface
    interface_b: NestedInterface
    ssid: Optional[constr(max_length=32)] = Field(None, title='SSID')
    status: Optional[Status24] = Field(None, title='Status')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    auth_type: Optional[AuthType3] = Field(None, title='Auth type')
    auth_cipher: Optional[AuthCipher2] = Field(None, title='Auth cipher')
    auth_psk: Optional[constr(max_length=64)] = Field(None, title='Pre-shared key')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')


class Status25(Enum):
    connected = 'connected'
    planned = 'planned'
    decommissioning = 'decommissioning'


class AuthType4(Enum):
    open = 'open'
    wep = 'wep'
    wpa_personal = 'wpa-personal'
    wpa_enterprise = 'wpa-enterprise'


class AuthCipher3(Enum):
    auto = 'auto'
    tkip = 'tkip'
    aes = 'aes'


class WritableWirelessLink(BaseModel):
    id: Optional[int] = Field(None, title='Id')
    url: Optional[AnyUrl] = Field(None, title='Url')
    display: Optional[str] = Field(None, title='Display')
    interface_a: int = Field(..., title='Interface a')
    interface_b: int = Field(..., title='Interface b')
    ssid: Optional[constr(max_length=32)] = Field(None, title='SSID')
    status: Optional[Status25] = Field(None, title='Status')
    description: Optional[constr(max_length=200)] = Field(None, title='Description')
    auth_type: Optional[AuthType4] = Field(None, title='Auth type')
    auth_cipher: Optional[AuthCipher3] = Field(None, title='Auth cipher')
    auth_psk: Optional[constr(max_length=64)] = Field(None, title='Pre-shared key')
    tags: Optional[List[NestedTag]] = None
    custom_fields: Optional[Dict[str, Any]] = Field({}, title='Custom fields')
    created: Optional[date] = Field(None, title='Created')
    last_updated: Optional[datetime] = Field(None, title='Last updated')
